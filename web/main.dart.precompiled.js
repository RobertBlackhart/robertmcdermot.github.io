// Generated by dart2js, the Dart to JavaScript compiler version: 1.0.0.10_r30798.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
var A = {};
delete A.x;
var B = {};
delete B.x;
var C = {};
delete C.x;
var D = {};
delete D.x;
var E = {};
delete E.x;
var F = {};
delete F.x;
var G = {};
delete G.x;
var H = {};
delete H.x;
var J = {};
delete J.x;
var K = {};
delete K.x;
var L = {};
delete L.x;
var M = {};
delete M.x;
var N = {};
delete N.x;
var O = {};
delete O.x;
var P = {};
delete P.x;
var Q = {};
delete Q.x;
var R = {};
delete R.x;
var S = {};
delete S.x;
var T = {};
delete T.x;
var U = {};
delete U.x;
var V = {};
delete V.x;
var W = {};
delete W.x;
var X = {};
delete X.x;
var Y = {};
delete Y.x;
var Z = {};
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Method closures
$$.BoundClosure$i0 = [W, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self, this._receiver);
  },
  $is_void_: true
}];

$$.BoundClosure$1 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, p0);
  },
  $is_args1: true
}];

$$.BoundClosure$i1 = [F, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, this._receiver, p0);
  },
  $is_args1: true
}];

$$.BoundClosure$0 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self);
  },
  $is_void_: true
}];

$$.BoundClosure$2 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, p0, p1);
  },
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

$$.BoundClosure$20 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, p0, p1);
  },
  $is_args2: true
}];

$$.Closure$2 = [H, {"": "Closure;call$2,$name", $is_args2: true}];

$$.Closure$1 = [H, {"": "Closure;call$1,$name", $is_args1: true}];

$$.Closure$0 = [H, {"": "Closure;call$0,$name", $is_void_: true}];

$$.Closure$7 = [H, {"": "Closure;call$7,$name"}];

$$.Closure$21 = [P, {"": "Closure;call$2,$name",
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

$$.Closure$4 = [W, {"": "Closure;call$4,$name"}];

(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
JS_CONST: {"": "Object;code"}}],
["_interceptors", "dart:_interceptors", , J, {
getInterceptor: function(object) {
  return void 0;
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto, interceptor;
  record = object[init.dispatchPropertyName];
  if (record == null)
    if ($.initNativeDispatchFlag == null) {
      H.initNativeDispatch();
      record = object[init.dispatchPropertyName];
    }
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
  }
  interceptor = H.lookupAndCacheInterceptor(object);
  if (interceptor == null)
    return C.UnknownJavaScriptObject_methods;
  return interceptor;
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return H.Primitives_objectToString(receiver);
  },
  get$runtimeType: function(receiver) {
    return new H.TypeImpl(H.getRuntimeTypeString(receiver), null);
  },
  "%": "ArrayBuffer|CanvasGradient|CanvasPattern|CanvasRenderingContext|CanvasRenderingContext2D|DOMImplementation|MediaError|MediaKeyError|Navigator|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString"
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  get$runtimeType: function(receiver) {
    return C.Type_EsU;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  get$runtimeType: function(receiver) {
    return C.Type_eZO;
  }
},

JavaScriptObject: {"": "Interceptor;",
  get$hashCode: function(_) {
    return 0;
  },
  get$runtimeType: function(_) {
    return C.Type_XXD;
  }
},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("add"));
    receiver.push(value);
  },
  removeAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("removeAt"));
    return receiver.splice(index, 1)[0];
  },
  remove$1: function(receiver, element) {
    var i;
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("remove"));
    for (i = 0; i < receiver.length; ++i)
      if (J.$eq(receiver[i], element)) {
        receiver.splice(i, 1);
        return true;
      }
    return false;
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
      this.add$1(receiver, t1.get$current());
  },
  forEach$1: function(receiver, f) {
    return H.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    var t1 = new H.MappedListIterable(receiver, f);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  join$1: function(receiver, separator) {
    var t1, list, i, t2;
    t1 = receiver.length;
    list = P.List_List(t1, null);
    for (i = 0; i < receiver.length; ++i) {
      t2 = H.S(receiver[i]);
      if (i >= t1)
        throw H.ioore(list, i);
      list[i] = t2;
    }
    return list.join(separator);
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    if (start < 0 || start > receiver.length)
      throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
    if (end < start || end > receiver.length)
      throw H.wrapException(P.RangeError$range(end, start, receiver.length));
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw H.wrapException(P.StateError$("No elements"));
  },
  indexOf$2: function(receiver, element, start) {
    return H.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  lastIndexOf$2: function(receiver, element, start) {
    return H.IterableMixinWorkaround_lastIndexOfList(receiver, element, start);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  contains$1: function(receiver, other) {
    var i;
    for (i = 0; i < receiver.length; ++i)
      if (J.$eq(receiver[i], other))
        return true;
    return false;
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  toString$0: function(receiver) {
    return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  toList$1$growable: function(receiver, growable) {
    return P.List_List$from(receiver, growable, H.getRuntimeTypeArgument(receiver, "JSArray", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    var t1 = new H.ListIterator(receiver, receiver.length, 0, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "JSArray", 0)]);
    return t1;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (newLength < 0)
      throw H.wrapException(P.RangeError$value(newLength));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      H.throwExpression(P.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: true,
  $asList: null,
  $isList: true,
  $isEfficientLength: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true,
  $asJSArray: function() {
    return [null];
  },
  $asList: function() {
    return [null];
  }
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (typeof b !== "number")
      throw H.wrapException(new P.ArgumentError(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
          return 0;
        if (this.get$isNegative(receiver))
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var t1;
    if (receiver >= -2147483648 && receiver <= 2147483647)
      return receiver | 0;
    if (isFinite(receiver)) {
      t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
      return t1 + 0;
    }
    throw H.wrapException(P.UnsupportedError$('' + receiver));
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver - other;
  },
  $mul: function(receiver, other) {
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
      return receiver / other | 0;
    else
      return this._slowTdiv$1(receiver, other);
  },
  _slowTdiv$1: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return this.toInt$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw H.wrapException(new P.ArgumentError(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw H.wrapException(P.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true,
  static: {
"": "JSNumber__MIN_INT32,JSNumber__MAX_INT32",
}

},

JSInt: {"": "int/JSNumber;",
  get$runtimeType: function(receiver) {
    return C.Type_SnA;
  },
  $isdouble: true,
  $isnum: true,
  $isint: true
},

JSDouble: {"": "double/JSNumber;",
  get$runtimeType: function(receiver) {
    return C.Type_qq1;
  },
  $isdouble: true,
  $isnum: true
},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(P.ArgumentError$(index));
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    if (index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    return H.allMatchesInStringUnchecked(receiver, str);
  },
  matchAsPrefix$2: function(receiver, string, start) {
    var t1, t2, i, t3;
    if (start < 0 || start > string.length)
      throw H.wrapException(P.RangeError$range(start, 0, string.length));
    t1 = receiver.length;
    t2 = string.length;
    if (start + t1 > t2)
      return;
    for (i = 0; i < t1; ++i) {
      t3 = start + i;
      if (typeof t3 !== "number" || Math.floor(t3) !== t3)
        H.throwExpression(new P.ArgumentError(t3));
      if (t3 < 0)
        H.throwExpression(P.RangeError$value(t3));
      if (t3 >= t2)
        H.throwExpression(P.RangeError$value(t3));
      t3 = string.charCodeAt(t3);
      if (i >= t1)
        H.throwExpression(P.RangeError$value(i));
      if (t3 !== receiver.charCodeAt(i))
        return;
    }
    return new H.StringMatch(start, string, receiver);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    return H.stringReplaceAllUnchecked(receiver, from, to);
  },
  splitMapJoin$3$onMatch$onNonMatch: function(receiver, from, onMatch, onNonMatch) {
    return H.stringReplaceAllFuncUnchecked(receiver, from, onMatch, onNonMatch);
  },
  split$1: function(receiver, pattern) {
    return receiver.split(pattern);
  },
  startsWith$2: function(receiver, pattern, index) {
    var endIndex;
    if (index < 0 || index > receiver.length)
      throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
    if (typeof pattern === "string") {
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    }
    return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
  },
  startsWith$1: function($receiver, pattern) {
    return this.startsWith$2($receiver, pattern, 0);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
      H.throwExpression(P.ArgumentError$(startIndex));
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
      H.throwExpression(P.ArgumentError$(endIndex));
    t1 = J.getInterceptor$n(startIndex);
    if (t1.$lt(startIndex, 0))
      throw H.wrapException(P.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex))
      throw H.wrapException(P.RangeError$value(startIndex));
    if (J.$gt$n(endIndex, receiver.length))
      throw H.wrapException(P.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  trim$0: function(receiver) {
    var endIndex, startIndex, codeUnit, endIndex0, endIndex1;
    for (endIndex = receiver.length, startIndex = 0; startIndex < endIndex;) {
      if (startIndex >= endIndex)
        H.throwExpression(P.RangeError$value(startIndex));
      codeUnit = receiver.charCodeAt(startIndex);
      if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
        ++startIndex;
      else
        break;
    }
    if (startIndex === endIndex)
      return "";
    for (endIndex0 = endIndex; true; endIndex0 = endIndex1) {
      endIndex1 = endIndex0 - 1;
      if (endIndex1 < 0)
        H.throwExpression(P.RangeError$value(endIndex1));
      if (endIndex1 >= endIndex)
        H.throwExpression(P.RangeError$value(endIndex1));
      codeUnit = receiver.charCodeAt(endIndex1);
      if (codeUnit === 32 || codeUnit === 13 || J.JSString__isWhitespace(codeUnit))
        ;
      else
        break;
    }
    if (startIndex === 0 && endIndex0 === endIndex)
      return receiver;
    return receiver.substring(startIndex, endIndex0);
  },
  indexOf$2: function(receiver, pattern, start) {
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw H.wrapException(new P.ArgumentError(start));
    if (start < 0 || start > receiver.length)
      throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
    return receiver.indexOf(pattern, start);
  },
  indexOf$1: function($receiver, pattern) {
    return this.indexOf$2($receiver, pattern, 0);
  },
  lastIndexOf$2: function(receiver, pattern, start) {
    var t1, t2;
    start = receiver.length;
    t1 = pattern.length;
    if (typeof start !== "number")
      throw start.$add();
    t2 = receiver.length;
    if (start + t1 > t2)
      start = t2 - t1;
    return receiver.lastIndexOf(pattern, start);
  },
  lastIndexOf$1: function($receiver, pattern) {
    return this.lastIndexOf$2($receiver, pattern, null);
  },
  contains$2: function(receiver, other, startIndex) {
    if (other == null)
      H.throwExpression(new P.ArgumentError(null));
    if (startIndex < 0 || startIndex > receiver.length)
      throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length));
    return H.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$runtimeType: function(receiver) {
    return C.Type_Ejg;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $isString: true,
  static: {
JSString__isWhitespace: function(codeUnit) {
  if (codeUnit < 256)
    switch (codeUnit) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 133:
      case 160:
        return true;
      default:
        return false;
    }
  switch (codeUnit) {
    case 5760:
    case 6158:
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8232:
    case 8233:
    case 8239:
    case 8287:
    case 12288:
    case 65279:
      return true;
    default:
      return false;
  }
}}

},

_CodeUnits: {"": "UnmodifiableListBase;__interceptors$_string",
  get$length: function(_) {
    return this.__interceptors$_string.length;
  },
  $index: function(_, i) {
    var t1, t2;
    t1 = this.__interceptors$_string;
    if (typeof i !== "number" || Math.floor(i) !== i)
      H.throwExpression(new P.ArgumentError(i));
    t2 = J.getInterceptor$n(i);
    if (t2.$lt(i, 0))
      H.throwExpression(P.RangeError$value(i));
    if (t2.$ge(i, t1.length))
      H.throwExpression(P.RangeError$value(i));
    return t1.charCodeAt(i);
  },
  $asUnmodifiableListBase: function() {
    return [J.JSInt];
  },
  $asList: function() {
    return [J.JSInt];
  }
}}],
["_isolate_helper", "dart:_isolate_helper", , H, {
_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
},

startRootIsolate: function(entry) {
  var rootContext;
  $globalState = H._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = H._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  if (!!entry.$is_args1)
    rootContext.eval$1(new H.startRootIsolate_closure(entry));
  else if (!!entry.$is_args2)
    rootContext.eval$1(new H.startRootIsolate_closure0(entry));
  else
    rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

IsolateNatives_computeThisScript: function() {
  var currentScript = init.currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  if (typeof version == "function" && typeof os == "object" && "system" in os)
    return H.IsolateNatives_computeThisScriptD8();
  if (typeof version == "function" && typeof system == "function")
    return thisFilename();
  return;
},

IsolateNatives_computeThisScriptD8: function() {
  var stack, matches;
  stack = new Error().stack;
  if (stack == null) {
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
    if (stack == null)
      throw H.wrapException(P.UnsupportedError$("No stack trace"));
  }
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, args, message, isSpawnUri, replyTo, context, t2;
  msg = H._deserializeMessage(e.data);
  t1 = J.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : init.globalFunctions[functionName];
      args = t1.$index(msg, "args");
      message = H._deserializeMessage(t1.$index(msg, "msg"));
      isSpawnUri = t1.$index(msg, "isSpawnUri");
      replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
      context = H._IsolateContext$();
      $globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      H.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "args"), t1.$index(msg, "msg"), t1.$index(msg, "isSpawnUri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      H.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      } else
        P.print(t1.$index(msg, "msg"));
      break;
    case "error":
      throw H.wrapException(t1.$index(msg, "msg"));
    default:
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    t1.toString;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      H.unwrapException(exception);
      trace = new H._StackTrace(exception, null);
      throw H.wrapException(P.Exception_Exception(trace));
    }

},

IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, replyTo) {
  var t1;
  H.Primitives_initializeStatics($globalState.currentContext.id);
  $.lazyPort = H.ReceivePortImpl$();
  t1 = $.lazyPort;
  t1.toString;
  J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, $globalState.currentContext.id)]);
  if (isSpawnUri !== true)
    topLevel.call$1(message);
  else {
    t1 = J.getInterceptor(topLevel);
    if (!!t1.$is_args2)
      topLevel.call$2(args, message);
    else if (!!t1.$is_args1)
      topLevel.call$1(args);
    else
      topLevel.call$0();
  }
},

IsolateNatives__spawnWorker: function(functionName, uri, args, message, isSpawnUri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(replyPort), "args", args, "msg", H._serializeMessage(message), "isSpawnUri", isSpawnUri, "functionName", functionName], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
},

_waitForPendingPorts: function(message, callback) {
  var finder = H._PendingSendPortFinder$();
  finder.traverse$1(message);
  P.Future_wait(finder.ports).then$1(new H._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new H._JsDeserializer(null).deserialize$1(message);
  else
    return message;
},

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

startRootIsolate_closure: {"": "Closure;entry_0",
  call$0: function() {
    this.entry_0.call$1([]);
  },
  $is_void_: true
},

startRootIsolate_closure0: {"": "Closure;entry_1",
  call$0: function() {
    this.entry_1.call$2([], null);
  },
  $is_void_: true
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { H.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
    this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
    this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
    if (this.isWorker === true) {
      this.mainManager = new H._MainManagerStub();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  static: {
_Manager$: function(entry) {
  var t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
}}

},

_IsolateContext: {"": "Object;id>,ports,isolateStatics<",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        $ = old.get$isolateStatics();
    }
    return result;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1 = this.ports;
    if (t1.containsKey$1(t1, portId))
      throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._collection$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, P.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  $is_IsolateContext: true,
  static: {
_IsolateContext$: function() {
  var t1 = new H._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
}}

},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null) {
      var t1 = $globalState.isolates;
      t1 = t1.containsKey$1(t1, $globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._collection$_length === 0;
    } else
      t1 = false;
    if (t1)
      throw H.wrapException(P.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop.activeTimerCount === 0) {
        t1 = t1.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new H._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        trace = new H._StackTrace(exception, null);
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    P.Timer_Timer(C.Duration_0, this);
  },
  $is_void_: true
},

_IsolateEvent: {"": "Object;isolate,fn,message>",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  },
  $is_IsolateEvent: true
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,args_1,message_2,isSpawnUri_3,replyTo_4",
  call$0: function() {
    H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.replyTo_4);
  },
  $is_void_: true
},

_BaseSendPort: {"": "Object;", $isSendPort: true},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort,_isolateId",
  send$1: function(_, message) {
    H._waitForPendingPorts(message, new H._NativeJsSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = $globalState.isolates;
    t3 = this.this_1;
    t4 = t3._isolateId;
    isolate = t2.$index(t2, t4);
    if (isolate == null)
      return;
    if ((t3._receivePort.get$__isolate_helper$_controller()._state & 4) !== 0)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t4;
    msg = this.message_2;
    t1.msg_0 = msg;
    if (shouldSerialize)
      t1.msg_0 = H._serializeMessage(t1.msg_0);
    t2 = $globalState.topEventLoop;
    t4 = "receive " + H.S(msg);
    t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send__closure(t1, t3, shouldSerialize), t4));
  },
  $is_void_: true
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_3,shouldSerialize_4",
  call$0: function() {
    var t1, t2;
    t1 = this.this_3._receivePort;
    if ((t1.get$__isolate_helper$_controller()._state & 4) === 0) {
      if (this.shouldSerialize_4) {
        t2 = this.box_0;
        t2.msg_0 = H._deserializeMessage(t2.msg_0);
      }
      t1 = t1.__isolate_helper$_controller;
      t2 = this.box_0.msg_0;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._async$_add$1(t2);
    }
  },
  $is_void_: true
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
  send$1: function(_, message) {
    H._waitForPendingPorts(message, new H._WorkerSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = this._workerId;
    if (typeof t1 !== "number")
      throw t1.$shl();
    t2 = this._isolateId;
    if (typeof t2 !== "number")
      throw t2.$shl();
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1",
  call$0: function() {
    var t1, workerMessage, t2, manager;
    t1 = this.this_0;
    workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", t1, "msg", this.message_1], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.toString;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1._workerId);
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  },
  $is_void_: true
},

ReceivePortImpl: {"": "Stream;_id<,__isolate_helper$_controller<",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = this.__isolate_helper$_controller;
    t1.toString;
    t1 = new P._ControllerStream(t1);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  close$0: function(_) {
    var t1 = this.__isolate_helper$_controller;
    if ((t1._state & 4) !== 0)
      return;
    t1.close$0(t1);
    $globalState.currentContext.unregister$1(this._id);
  },
  get$close: function(_receiver) {
    return new W.BoundClosure$i0(this, H.ReceivePortImpl.prototype.close$0, _receiver, "close$0");
  },
  ReceivePortImpl$0: function() {
    this.__isolate_helper$_controller = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
    var t1 = $globalState.currentContext;
    t1.register$2(t1, this._id, this);
  },
  $asStream: function() {
    return [null];
  },
  $isReceivePort: true,
  $isStream: true,
  static: {
"": "ReceivePortImpl__nextFreeId",
ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = t1 + 1;
  t1 = new H.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
}}

},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $is_args1: true
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    J.forEach$1$ax(list, this.get$_dispatch());
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    J.forEach$1$ax(J.get$values$x(map), this.get$_dispatch());
  },
  visitSendPort$1: function(port) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = new H._JsVisitedMap(null);
  },
  static: {
_PendingSendPortFinder$: function() {
  var t1 = new H._PendingSendPortFinder([], new H._MessageTraverserVisitedMap());
  t1._PendingSendPortFinder$0();
  return t1;
}}

},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (!!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return new H._NativeJsSendPort(x._receivePort, x._isolateId);
    if (!!x.$is_WorkerSendPort)
      return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = J.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if (J.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new H._NativeJsSendPort(receivePort, isolateId);
    } else
      return new H._WorkerSendPort(managerId, receivePortId, isolateId);
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = P.List_List(null, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    if (H._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPort)
      return this.visitSendPort$1(x);
    return this.visitObject$1(x);
  },
  get$_dispatch: function() {
    return new H.BoundClosure$1(this, H._MessageTraverser.prototype._dispatch$1, null, "_dispatch$1");
  },
  visitObject$1: function(x) {
    throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
  }
},

_Copier: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, t2, i;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = P.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (i = 0; i < len; ++i) {
      t2 = this._dispatch$1(t1.$index(list, i));
      if (i >= len)
        throw H.ioore(copy, i);
      copy[i] = t2;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    J.forEach$1$ax(map, new H._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  $is_args2: true
},

_Serializer: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = J.getInterceptor$x(map);
    return ["map", id, this._serializeList$1(J.toList$0$ax(t1.get$keys(map))), this._serializeList$1(J.toList$0$ax(t1.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var t1, len, result, i, t2;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = P.List_List(len, null);
    for (i = 0; i < len; ++i) {
      t2 = this._dispatch$1(t1.$index(list, i));
      if (i >= len)
        throw H.ioore(result, i);
      result[i] = t2;
    }
    return result;
  }
},

_Deserializer: {"": "Object;",
  deserialize$1: function(x) {
    if (H._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = J.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = J.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw H.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    values = t1.$index(x, 3);
    t1 = J.getInterceptor$asx(keys);
    len = t1.get$length(keys);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = J.getInterceptor$asx(values);
    i = 0;
    for (; i < len; ++i)
      result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
    return result;
  },
  deserializeObject$1: function(x) {
    throw H.wrapException("Unexpected serialized object");
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle",
  cancel$0: function() {
    if ($.get$globalThis().setTimeout != null) {
      if (this._inEventLoop)
        throw H.wrapException(P.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      var t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
  },
  static: {
TimerImpl$: function(milliseconds, callback) {
  var t1 = new H.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
}}

},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0._handle = null;
    this.callback_1.call$0();
  },
  $is_void_: true
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2._handle = null;
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  },
  $is_void_: true
}}],
["_js_helper", "dart:_js_helper", , H, {
isJsIndexable: function(object, record) {
  var result, t1;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  t1 = J.getInterceptor(object);
  return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = J.toString$0(value);
  if (typeof res !== "string")
    throw H.wrapException(P.ArgumentError$(value));
  return res;
},

Primitives_initializeStatics: function(id) {
  $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + H.S(id));
  $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + H.S(id));
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives__throwFormatException: function(string) {
  throw H.wrapException(P.FormatException$(string));
},

Primitives_parseInt: function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i, t2;
  handleError = H.Primitives__throwFormatException$closure;
  if (typeof source !== "string")
    H.throwExpression(new P.ArgumentError(source));
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    if (match != null) {
      t1 = match.length;
      if (2 >= t1)
        throw H.ioore(match, 2);
      if (match[2] != null)
        return parseInt(source, 16);
      if (3 >= t1)
        throw H.ioore(match, 3);
      if (match[3] != null)
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    radix = 10;
  } else {
    if (typeof radix !== "number" || Math.floor(radix) !== radix)
      throw H.wrapException(new P.ArgumentError("Radix is not an integer"));
    if (radix < 2 || radix > 36)
      throw H.wrapException(P.RangeError$("Radix " + H.S(radix) + " not in range 2..36"));
    if (match != null) {
      if (radix === 10) {
        if (3 >= match.length)
          throw H.ioore(match, 3);
        t1 = match[3] != null;
      } else
        t1 = false;
      if (t1)
        return parseInt(source, 10);
      if (!(radix < 10)) {
        if (3 >= match.length)
          throw H.ioore(match, 3);
        t1 = match[3] == null;
      } else
        t1 = true;
      if (t1) {
        maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
        if (1 >= match.length)
          throw H.ioore(match, 1);
        digitsPart = match[1];
        t1 = J.getInterceptor$asx(digitsPart);
        i = 0;
        while (true) {
          t2 = t1.get$length(digitsPart);
          if (typeof t2 !== "number")
            throw H.iae(t2);
          if (!(i < t2))
            break;
          t1.codeUnitAt$1(digitsPart, 0);
          if (i >= digitsPart.length)
            H.throwExpression(P.RangeError$value(i));
          if (digitsPart.charCodeAt(i) > maxCharCode)
            return handleError.call$1(source);
          ++i;
        }
      }
    }
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, radix);
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled;
  $name = C.JS_CONST_86y(J.getInterceptor(object));
  if ($name === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  if (J.getInterceptor$s($name).codeUnitAt$1($name, 0) === 36)
    $name = C.JSString_methods.substring$1($name, 1);
  return $name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives_stringFromCodePoints: function(codePoints) {
  var a, $arguments, t1, t2, i;
  a = [];
  a.$builtinTypeInfo = [J.JSInt];
  $arguments = H.substitute(codePoints.$asJSArray, H.getRuntimeTypeInfo(codePoints));
  t1 = $arguments == null ? null : $arguments[0];
  t2 = new H.ListIterator(codePoints, codePoints.length, 0, null);
  t2.$builtinTypeInfo = [t1];
  for (; t2.moveNext$0();) {
    i = t2._dev$_current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(P.ArgumentError$(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + (C.JSInt_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw H.wrapException(P.ArgumentError$(i));
  }
  return H.Primitives__fromCharCodeApply(a);
},

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, i;
  for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(charCodes, "JSArray", 0)]); t1.moveNext$0();) {
    i = t1._dev$_current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(P.ArgumentError$(i));
    if (i < 0)
      throw H.wrapException(P.ArgumentError$(i));
    if (i > 65535)
      return H.Primitives_stringFromCodePoints(charCodes);
  }
  return H.Primitives__fromCharCodeApply(charCodes);
},

Primitives_lazyAsJsDate: function(receiver) {
  if (receiver.date === void 0)
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
},

Primitives_getYear: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
},

Primitives_getMonth: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
},

Primitives_getDay: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
},

Primitives_getHours: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
},

Primitives_getMinutes: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
},

Primitives_getSeconds: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
},

Primitives_getMilliseconds: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  object[key] = value;
},

iae: function(argument) {
  throw H.wrapException(P.ArgumentError$(argument));
},

ioore: function(receiver, index) {
  if (receiver == null)
    J.get$length$asx(receiver);
  if (typeof index !== "number" || Math.floor(index) !== index)
    H.iae(index);
  throw H.wrapException(P.RangeError$value(index));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new P.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = H.toStringWrapper$closure.call$0;
  return wrapper;
},

toStringWrapper: function() {
  return J.toString$0(this.dartException);
},

throwExpression: function(ex) {
  throw H.wrapException(ex);
},

unwrapException: function(ex) {
  var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
  t1 = new H.unwrapException_saveStackTrace(ex);
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return t1.call$1(ex.dartException);
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if ("number" in ex && typeof ex.number == "number") {
    number = ex.number;
    ieErrorCode = number & 65535;
    if ((C.JSInt_methods.$shr(number, 16) & 8191) === 10)
      switch (ieErrorCode) {
        case 438:
          return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
        case 445:
        case 5007:
          t2 = H.S(message) + " (Error " + ieErrorCode + ")";
          return t1.call$1(new H.NullError(t2, null));
        default:
      }
  }
  if (ex instanceof TypeError) {
    t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
    t3 = $.get$TypeErrorDecoder_notClosurePattern();
    t4 = $.get$TypeErrorDecoder_nullCallPattern();
    nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
    t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
    t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
    t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
    $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
    t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
    t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
    match = t2.matchTypeError$1(message);
    if (match != null)
      return t1.call$1(H.JsNoSuchMethodError$(message, match));
    else {
      match = t3.matchTypeError$1(message);
      if (match != null) {
        match.method = "call";
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      } else {
        match = t4.matchTypeError$1(message);
        if (match == null) {
          match = nullLiteralCall.matchTypeError$1(message);
          if (match == null) {
            match = t5.matchTypeError$1(message);
            if (match == null) {
              match = t6.matchTypeError$1(message);
              if (match == null) {
                match = t7.matchTypeError$1(message);
                if (match == null) {
                  match = nullLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = t8.matchTypeError$1(message);
                    if (match == null) {
                      match = t9.matchTypeError$1(message);
                      t2 = match != null;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
        } else
          t2 = true;
        if (t2) {
          t2 = match == null ? null : match.method;
          return t1.call$1(new H.NullError(message, t2));
        }
      }
    }
    t2 = typeof message === "string" ? message : "";
    return t1.call$1(new H.UnknownJsTypeError(t2));
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new P.StackOverflowError();
    return t1.call$1(new P.ArgumentError(null));
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new P.StackOverflowError();
  return ex;
},

objectHashCode: function(object) {
  if (object == null || typeof object != 'object')
    return J.get$hashCode$(object);
  else
    return H.Primitives_objectHashCode(object);
},

fillLiteralMap: function(keyValuePairs, result) {
  var $length, index, index0, index1;
  $length = keyValuePairs.length;
  for (index = 0; index < $length; index = index1) {
    index0 = index + 1;
    index1 = index0 + 1;
    result.$indexSet(result, keyValuePairs[index], keyValuePairs[index0]);
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
  var t1 = J.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1))
    return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2))
    return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
  else if (t1.$eq(numberOfArguments, 3))
    return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
  else if (t1.$eq(numberOfArguments, 4))
    return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
  else
    throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,$globalState.currentContext,H.invokeClosure$closure.call$7);
  closure.$identity = $function;
  return $function;
},

propertyTypeCastError: function(value, property) {
  var t1 = J.getInterceptor$asx(property);
  throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
},

interceptedTypeCast: function(value, property) {
  var t1;
  if (value != null)
    t1 = typeof value === "object" && J.getInterceptor(value)[property];
  else
    t1 = true;
  if (t1)
    return value;
  H.propertyTypeCastError(value, property);
},

throwCyclicInit: function(staticName) {
  throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
},

createRuntimeType: function($name) {
  return new H.TypeImpl($name, null);
},

setRuntimeTypeInfo: function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeArguments: function(target, substitutionName) {
  return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
},

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
  return $arguments == null ? null : $arguments[index];
},

getRuntimeTypeAsString: function(runtimeType, onTypeVariable) {
  return runtimeType[0].builtin$cls + H.joinArguments(runtimeType, 1, onTypeVariable);
},

runtimeTypeToString: function(type, onTypeVariable) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return H.getRuntimeTypeAsString(type, onTypeVariable);
  else if (typeof type == "function")
    return type.builtin$cls;
  else if (typeof type === "number" && Math.floor(type) === type)
    return C.JSInt_methods.toString$0(type);
  else
    return;
},

joinArguments: function(types, startIndex, onTypeVariable) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = P.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = H.runtimeTypeToString(argument, onTypeVariable);
    str = typeof str === "string" ? str : H.S(str);
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + H.S(buffer) + ">";
},

getRuntimeTypeString: function(object) {
  var className = typeof object === "object" && object !== null && object.constructor === Array ? "List" : J.getInterceptor(object).constructor.builtin$cls;
  return className + H.joinArguments(object.$builtinTypeInfo, 0, null);
},

substitute: function(substitution, $arguments) {
  if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function") {
    substitution = H.invokeOn(substitution, null, $arguments);
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function")
      $arguments = H.invokeOn(substitution, null, $arguments);
  }
  return $arguments;
},

checkSubtype: function(object, isField, checks, asField) {
  var $arguments, interceptor;
  if (object == null)
    return false;
  $arguments = H.getRuntimeTypeInfo(object);
  interceptor = J.getInterceptor(object);
  if (interceptor[isField] == null)
    return false;
  return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
},

areSubtypes: function(s, t) {
  var len, i;
  if (s == null || t == null)
    return true;
  len = s.length;
  for (i = 0; i < len; ++i)
    if (!H.isSubtype(s[i], t[i]))
      return false;
  return true;
},

computeSignature: function(signature, context, contextName) {
  return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
},

isSupertypeOfNull: function(type) {
  return type == null || type.builtin$cls === "Object" || type.builtin$cls === "Null";
},

checkSubtypeOfRuntimeType: function(o, t) {
  var rti, type;
  if (o == null)
    return H.isSupertypeOfNull(t);
  if (t == null)
    return true;
  rti = H.getRuntimeTypeInfo(o);
  o = J.getInterceptor(o);
  if (rti != null) {
    type = rti.slice();
    type.splice(0, 0, o);
  } else
    type = o;
  return H.isSubtype(type, t);
},

isSubtype: function(s, t) {
  var targetSignatureFunction, t1, typeOfS, t2, typeOfT, substitution;
  if (s === t)
    return true;
  if (s == null || t == null)
    return true;
  if ("func" in t) {
    if (!("func" in s)) {
      if ("$is_" + H.S(t.func) in s)
        return true;
      targetSignatureFunction = s.$signature;
      if (targetSignatureFunction == null)
        return false;
      s = targetSignatureFunction.apply(s, null);
    }
    return H.isFunctionSubtype(s, t);
  }
  if (t.builtin$cls === "Function" && "func" in s)
    return true;
  t1 = typeof s === "object" && s !== null && s.constructor === Array;
  typeOfS = t1 ? s[0] : s;
  t2 = typeof t === "object" && t !== null && t.constructor === Array;
  typeOfT = t2 ? t[0] : t;
  if (!("$is" + H.S(H.runtimeTypeToString(typeOfT, null)) in typeOfS))
    return false;
  substitution = typeOfT !== typeOfS ? typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))] : null;
  if (!t1 && substitution == null || !t2)
    return true;
  t1 = t1 ? s.slice(1) : null;
  t2 = t2 ? t.slice(1) : null;
  return H.areSubtypes(H.substitute(substitution, t1), t2);
},

isAssignable: function(s, t) {
  return H.isSubtype(s, t) || H.isSubtype(t, s);
},

areAssignable: function(s, t, allowShorter) {
  var sLength, tLength, i, t1, t2;
  if (t == null && s == null)
    return true;
  if (t == null)
    return allowShorter;
  if (s == null)
    return false;
  sLength = s.length;
  tLength = t.length;
  if (allowShorter) {
    if (sLength < tLength)
      return false;
  } else if (sLength !== tLength)
    return false;
  for (i = 0; i < tLength; ++i) {
    t1 = s[i];
    t2 = t[i];
    if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
      return false;
  }
  return true;
},

areAssignableMaps: function(s, t) {
  if (t == null)
    return true;
  if (s == null)
    return false;
  return      function (t, s, isAssignable) {
       for (var $name in t) {
         if (!s.hasOwnProperty($name)) {
           return false;
         }
         var tType = t[$name];
         var sType = s[$name];
         if (!isAssignable.call$2(sType, tType)) {
          return false;
         }
       }
       return true;
     }(t, s, H.isAssignable$closure)
  ;
},

isFunctionSubtype: function(s, t) {
  var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
  if (!("func" in s))
    return false;
  if ("void" in s) {
    if (!("void" in t) && "ret" in t)
      return false;
  } else if (!("void" in t)) {
    sReturnType = s.ret;
    tReturnType = t.ret;
    if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
      return false;
  }
  sParameterTypes = s.args;
  tParameterTypes = t.args;
  sOptionalParameterTypes = s.opt;
  tOptionalParameterTypes = t.opt;
  sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
  tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
  sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
  tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
  if (sParametersLen > tParametersLen)
    return false;
  if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
    return false;
  if (sParametersLen === tParametersLen) {
    if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
      return false;
    if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
      return false;
  } else {
    for (pos = 0; pos < sParametersLen; ++pos) {
      t1 = sParameterTypes[pos];
      t2 = tParameterTypes[pos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
      t1 = sOptionalParameterTypes[sPos];
      t2 = tParameterTypes[tPos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    for (sPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
      t1 = tOptionalParameterTypes[sPos];
      t2 = tOptionalParameterTypes[tPos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
  }
  return H.areAssignableMaps(s.named, t.named);
},

invokeOn: function($function, receiver, $arguments) {
  return $function.apply(receiver, $arguments);
},

toStringForNativeObject: function(obj) {
  var t1 = $.getTagFunction;
  return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
},

hashCodeForNativeObject: function(object) {
  return H.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

lookupAndCacheInterceptor: function(obj) {
  var tag, record, interceptor, interceptorClass, mark, t1;
  tag = $.getTagFunction.call$1(obj);
  record = $.dispatchRecordsForInstanceTags[tag];
  if (record != null) {
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  interceptor = $.interceptorsForUncacheableTags[tag];
  if (interceptor != null)
    return interceptor;
  interceptorClass = init.interceptorsByTag[tag];
  if (interceptorClass == null) {
    tag = $.alternateTagFunction.call$2(obj, tag);
    if (tag != null) {
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
    }
  }
  if (interceptorClass == null)
    return;
  interceptor = interceptorClass.prototype;
  mark = tag[0];
  if (mark === "!") {
    record = H.makeLeafDispatchRecord(interceptor);
    $.dispatchRecordsForInstanceTags[tag] = record;
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  if (mark === "~") {
    $.interceptorsForUncacheableTags[tag] = interceptor;
    return interceptor;
  }
  if (mark === "-") {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  }
  if (mark === "+")
    return H.patchInteriorProto(obj, interceptor);
  if (mark === "*")
    throw H.wrapException(P.UnimplementedError$(tag));
  if (init.leafTags[tag] === true) {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  } else
    return H.patchInteriorProto(obj, interceptor);
},

patchInteriorProto: function(obj, interceptor) {
  var proto, record;
  proto = Object.getPrototypeOf(obj);
  record = J.makeDispatchRecord(interceptor, proto, null, null);
  Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
  return interceptor;
},

makeLeafDispatchRecord: function(interceptor) {
  return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
  var interceptor = interceptorClass.prototype;
  if (init.leafTags[tag] === true)
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return J.makeDispatchRecord(interceptor, proto, null, null);
},

initNativeDispatch: function() {
  if (true === $.initNativeDispatchFlag)
    return;
  $.initNativeDispatchFlag = true;
  H.initNativeDispatchContinue();
},

initNativeDispatchContinue: function() {
  var map, tags, i, tag, proto, record, interceptorClass;
  $.dispatchRecordsForInstanceTags = Object.create(null);
  $.interceptorsForUncacheableTags = Object.create(null);
  H.initHooks();
  map = init.interceptorsByTag;
  tags = Object.getOwnPropertyNames(map);
  if (typeof window != "undefined") {
    window;
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      proto = $.prototypeForTagFunction.call$1(tag);
      if (proto != null) {
        record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
        if (record != null)
          Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      }
    }
  }
  for (i = 0; i < tags.length; ++i) {
    tag = tags[i];
    if (/^[A-Za-z_]/.test(tag)) {
      interceptorClass = map[tag];
      map["!" + tag] = interceptorClass;
      map["~" + tag] = interceptorClass;
      map["-" + tag] = interceptorClass;
      map["+" + tag] = interceptorClass;
      map["*" + tag] = interceptorClass;
    }
  }
},

initHooks: function() {
  var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
  hooks = C.JS_CONST_TtD();
  hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_rD3, H.applyHooksTransformer(C.JS_CONST_6qb, H.applyHooksTransformer(C.JS_CONST_Cbr(C.JS_CONST_86y), hooks))))));
  if (typeof dartNativeDispatchHooksTransformer != "undefined") {
    transformers = dartNativeDispatchHooksTransformer;
    if (typeof transformers == "function")
      transformers = [transformers];
    if (transformers.constructor == Array)
      for (i = 0; i < transformers.length; ++i) {
        transformer = transformers[i];
        if (typeof transformer == "function")
          hooks = transformer(hooks) || hooks;
      }
  }
  getTag = hooks.getTag;
  getUnknownTag = hooks.getUnknownTag;
  prototypeForTag = hooks.prototypeForTag;
  $.getTagFunction = new H.initHooks_closure(getTag);
  $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
  $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
},

applyHooksTransformer: function(transformer, hooks) {
  return transformer(hooks) || hooks;
},

regExpGetGlobalNative: function(regexp) {
  var nativeRegexp = regexp.get$_nativeGlobalVersion();
  nativeRegexp.lastIndex = 0;
  return nativeRegexp;
},

allMatchesInStringUnchecked: function(needle, haystack) {
  var result, $length, patternLength, startIndex, position, endIndex;
  result = P.List_List(null, P.Match);
  H.setRuntimeTypeInfo(result, [P.Match]);
  $length = haystack.length;
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = C.JSString_methods.indexOf$2(haystack, needle, startIndex);
    if (position === -1)
      break;
    result.push(new H.StringMatch(position, haystack, needle));
    endIndex = position + patternLength;
    if (endIndex === $length)
      break;
    else
      startIndex = position === endIndex ? startIndex + 1 : endIndex;
  }
  return result;
},

stringContainsUnchecked: function(receiver, other, startIndex) {
  var t1, t2;
  if (typeof other === "string")
    return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  else {
    t1 = J.getInterceptor$s(other);
    if (typeof other === "object" && other !== null && !!t1.$isJSSyntaxRegExp) {
      t1 = C.JSString_methods.substring$1(receiver, startIndex);
      t2 = other._nativeRegExp;
      return t2.test(t1);
    } else
      return J.get$isNotEmpty$asx(t1.allMatches$1(other, C.JSString_methods.substring$1(receiver, startIndex)));
  }
},

stringReplaceAllUnchecked: function(receiver, from, to) {
  var result, $length, i, t1;
  if (typeof from === "string")
    if (from === "")
      if (receiver === "")
        return to;
      else {
        result = P.StringBuffer$("");
        $length = receiver.length;
        result.write$1(to);
        for (i = 0; i < $length; ++i) {
          t1 = receiver[i];
          result._contents = result._contents + t1;
          result._contents = result._contents + to;
        }
        return result._contents;
      }
    else
      return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
  else {
    t1 = J.getInterceptor(from);
    if (typeof from === "object" && from !== null && !!t1.$isJSSyntaxRegExp)
      return receiver.replace(H.regExpGetGlobalNative(from), to.replace("$", "$$$$"));
    else {
      if (from == null)
        H.throwExpression(new P.ArgumentError(null));
      throw H.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
    }
  }
},

_matchString: function(match) {
  return J.$index$asx(match, 0);
},

_stringIdentity: function(string) {
  return string;
},

stringReplaceAllFuncUnchecked: function(receiver, pattern, onMatch, onNonMatch) {
  var buffer, t1, startIndex, match, t2, str, t3;
  buffer = P.StringBuffer$("");
  t1 = new H._AllMatchesIterable(pattern, receiver);
  t1 = new H._AllMatchesIterator(t1._re, t1._string, null);
  startIndex = 0;
  for (; t1.moveNext$0();) {
    match = t1.__js_helper$_current;
    t2 = match._match;
    str = onNonMatch.call$1(C.JSString_methods.substring$2(receiver, startIndex, t2.index));
    str = typeof str === "string" ? str : H.S(str);
    buffer._contents = buffer._contents + str;
    str = onMatch.call$1(match);
    str = typeof str === "string" ? str : H.S(str);
    buffer._contents = buffer._contents + str;
    t3 = t2.index;
    if (0 >= t2.length)
      throw H.ioore(t2, 0);
    t2 = J.get$length$asx(t2[0]);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    startIndex = t3 + t2;
  }
  buffer.write$1(onNonMatch.call$1(C.JSString_methods.substring$1(receiver, startIndex)));
  return buffer._contents;
},

ConstantMap: {"": "Object;",
  get$isEmpty: function(_) {
    return J.$eq(this.get$length(this), 0);
  },
  get$isNotEmpty: function(_) {
    return !J.$eq(this.get$length(this), 0);
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  _throwUnmodifiable$0: function() {
    throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
  },
  $indexSet: function(_, key, val) {
    return this._throwUnmodifiable$0();
  },
  remove$1: function(_, key) {
    return this._throwUnmodifiable$0();
  },
  $isMap: true,
  $asMap: null
},

ConstantStringMap: {"": "ConstantMap;length>,_jsObject,_keys",
  containsKey$1: function(_, key) {
    if (typeof key !== "string")
      return false;
    if (key === "__proto__")
      return false;
    return this._jsObject.hasOwnProperty(key);
  },
  $index: function(_, key) {
    if (typeof key !== "string")
      return;
    if (!this.containsKey$1(this, key))
      return;
    return this._jsObject[key];
  },
  forEach$1: function(_, f) {
    J.forEach$1$ax(this._keys, new H.ConstantStringMap_forEach_closure(this, f));
  },
  get$keys: function(_) {
    var t1 = new H._ConstantMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "ConstantStringMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    return J.map$1$ax(this._keys, new H.ConstantStringMap_values_closure(this));
  },
  $asConstantMap: null,
  $asMap: null,
  $isEfficientLength: true
},

ConstantStringMap_forEach_closure: {"": "Closure;this_0,f_1",
  call$1: function(key) {
    var t1 = this.this_0;
    return this.f_1.call$2(key, t1.$index(t1, key));
  },
  $is_args1: true
},

ConstantStringMap_values_closure: {"": "Closure;this_0",
  call$1: function(key) {
    var t1 = this.this_0;
    return t1.$index(t1, key);
  },
  $is_args1: true
},

_ConstantMapKeyIterable: {"": "IterableBase;__js_helper$_map",
  get$iterator: function(_) {
    return J.get$iterator$ax(this.__js_helper$_map._keys);
  },
  $asIterableBase: null
},

TypeErrorDecoder: {"": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
  matchTypeError$1: function(message) {
    var match, result, t1;
    match = new RegExp(this._pattern).exec(message);
    if (match == null)
      return;
    result = {};
    t1 = this._arguments;
    if (t1 !== -1)
      result.arguments = match[t1 + 1];
    t1 = this._argumentsExpr;
    if (t1 !== -1)
      result.argumentsExpr = match[t1 + 1];
    t1 = this._expr;
    if (t1 !== -1)
      result.expr = match[t1 + 1];
    t1 = this._method;
    if (t1 !== -1)
      result.method = match[t1 + 1];
    t1 = this._receiver;
    if (t1 !== -1)
      result.receiver = match[t1 + 1];
    return result;
  },
  static: {
"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern",
TypeErrorDecoder_extractPattern: function(message) {
  var match, $arguments, argumentsExpr, expr, method, receiver;
  message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
  match = message.match(/\\\$[a-zA-Z]+\\\$/g);
  if (match == null)
    match = [];
  $arguments = match.indexOf("\\$arguments\\$");
  argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
  expr = match.indexOf("\\$expr\\$");
  method = match.indexOf("\\$method\\$");
  receiver = match.indexOf("\\$receiver\\$");
  return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
},

TypeErrorDecoder_provokeCallErrorOn: function(expression) {
  return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokeCallErrorOnNull: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
  return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokePropertyErrorOnNull: function() {
  return function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
  return function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}();
}}

},

NullError: {"": "Error;_message,_method",
  toString$0: function(_) {
    var t1 = this._method;
    if (t1 == null)
      return "NullError: " + H.S(this._message);
    return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
  },
  $isError: true
},

JsNoSuchMethodError: {"": "Error;_message,_method,_receiver",
  toString$0: function(_) {
    var t1, t2;
    t1 = this._method;
    if (t1 == null)
      return "NoSuchMethodError: " + H.S(this._message);
    t2 = this._receiver;
    if (t2 == null)
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
    return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
  },
  $isError: true,
  static: {
JsNoSuchMethodError$: function(_message, match) {
  var t1, t2;
  t1 = match == null;
  t2 = t1 ? null : match.method;
  t1 = t1 ? null : match.receiver;
  return new H.JsNoSuchMethodError(_message, t2, t1);
}}

},

UnknownJsTypeError: {"": "Error;_message",
  toString$0: function(_) {
    var t1 = this._message;
    return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
  }
},

unwrapException_saveStackTrace: {"": "Closure;ex_0",
  call$1: function(error) {
    var t1 = J.getInterceptor(error);
    if (typeof error === "object" && error !== null && !!t1.$isError)
      if (error.$thrownJsError == null)
        error.$thrownJsError = this.ex_0;
    return error;
  },
  $is_args1: true
},

_StackTrace: {"": "Object;_exception,_trace",
  toString$0: function(_) {
    var t1, trace;
    t1 = this._trace;
    if (t1 != null)
      return t1;
    t1 = this._exception;
    trace = typeof t1 === "object" ? t1.stack : null;
    t1 = trace == null ? "" : trace;
    this._trace = t1;
    return t1;
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  $is_void_: true
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  $is_void_: true
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  $is_void_: true
},

invokeClosure_closure2: {"": "Closure;closure_6,arg1_7,arg2_8,arg3_9",
  call$0: function() {
    return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
  },
  $is_void_: true
},

invokeClosure_closure3: {"": "Closure;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
  call$0: function() {
    return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
  },
  $is_void_: true
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

BoundClosure: {"": "Closure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
      return false;
    return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    var t1, receiverHashCode;
    t1 = this._receiver;
    if (t1 == null)
      receiverHashCode = H.Primitives_objectHashCode(this._self);
    else
      receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
    return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
  },
  $isBoundClosure: true
},

CastErrorImplementation: {"": "Error;message>",
  toString$0: function(_) {
    return this.message;
  },
  $isError: true,
  static: {
CastErrorImplementation$: function(actualType, expectedType) {
  return new H.CastErrorImplementation("CastError: Casting value of type " + actualType + " to incompatible type " + H.S(expectedType));
}}

},

TypeImpl: {"": "Object;_typeName,_unmangledName",
  toString$0: function(_) {
    var t1, unmangledName, unmangledName0;
    t1 = this._unmangledName;
    if (t1 != null)
      return t1;
    unmangledName = this._typeName;
    unmangledName0 = H.unmangleGlobalNameIfPreservedAnyways(unmangledName);
    unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
    this._unmangledName = unmangledName;
    return unmangledName;
  },
  get$hashCode: function(_) {
    return J.get$hashCode$(this._typeName);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isTypeImpl && J.$eq(this._typeName, other._typeName);
  },
  $isTypeImpl: true
},

initHooks_closure: {"": "Closure;getTag_0",
  call$1: function(o) {
    return this.getTag_0(o);
  },
  $is_args1: true
},

initHooks_closure0: {"": "Closure;getUnknownTag_1",
  call$2: function(o, tag) {
    return this.getUnknownTag_1(o, tag);
  },
  $is_args2: true
},

initHooks_closure1: {"": "Closure;prototypeForTag_2",
  call$1: function(tag) {
    return this.prototypeForTag_2(tag);
  },
  $is_args1: true
},

JSSyntaxRegExp: {"": "Object;_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
  get$_nativeGlobalVersion: function() {
    var t1 = this._nativeGlobalRegExp;
    if (t1 != null)
      return t1;
    t1 = this._nativeRegExp;
    t1 = H.JSSyntaxRegExp_makeNative(t1.source, t1.multiline, !t1.ignoreCase, true);
    this._nativeGlobalRegExp = t1;
    return t1;
  },
  get$_nativeAnchoredVersion: function() {
    var t1 = this._nativeAnchoredRegExp;
    if (t1 != null)
      return t1;
    t1 = this._nativeRegExp;
    t1 = H.JSSyntaxRegExp_makeNative(t1.source + "|()", t1.multiline, !t1.ignoreCase, true);
    this._nativeAnchoredRegExp = t1;
    return t1;
  },
  firstMatch$1: function(str) {
    var m;
    if (typeof str !== "string")
      H.throwExpression(new P.ArgumentError(str));
    m = this._nativeRegExp.exec(str);
    if (m == null)
      return;
    return H._MatchImplementation$(this, m);
  },
  allMatches$1: function(_, str) {
    return new H._AllMatchesIterable(this, str);
  },
  _execGlobal$2: function(string, start) {
    var regexp, match;
    regexp = this.get$_nativeGlobalVersion();
    regexp.lastIndex = start;
    match = regexp.exec(string);
    if (match == null)
      return;
    return H._MatchImplementation$(this, match);
  },
  _execAnchored$2: function(string, start) {
    var regexp, match, t1, t2;
    regexp = this.get$_nativeAnchoredVersion();
    regexp.lastIndex = start;
    match = regexp.exec(string);
    if (match == null)
      return;
    t1 = match.length;
    t2 = t1 - 1;
    if (t2 < 0)
      throw H.ioore(match, t2);
    if (match[t2] != null)
      return;
    J.set$length$asx(match, t2);
    return H._MatchImplementation$(this, match);
  },
  matchAsPrefix$2: function(_, string, start) {
    if (start < 0 || start > string.length)
      throw H.wrapException(P.RangeError$range(start, 0, string.length));
    return this._execAnchored$2(string, start);
  },
  $isJSSyntaxRegExp: true,
  static: {
JSSyntaxRegExp_makeNative: function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  m = multiLine ? "m" : "";
  i = caseSensitive ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw H.wrapException(P.FormatException$("Illegal RegExp pattern: " + pattern + ", " + errorMessage));
}}

},

_MatchImplementation: {"": "Object;pattern,_match",
  $index: function(_, index) {
    var t1 = this._match;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  _MatchImplementation$2: function(pattern, _match) {
  },
  $isMatch: true,
  static: {
_MatchImplementation$: function(pattern, _match) {
  var t1 = new H._MatchImplementation(pattern, _match);
  t1._MatchImplementation$2(pattern, _match);
  return t1;
}}

},

_AllMatchesIterable: {"": "IterableBase;_re,_string",
  get$iterator: function(_) {
    return new H._AllMatchesIterator(this._re, this._string, null);
  },
  $asIterableBase: function() {
    return [P.Match];
  }
},

_AllMatchesIterator: {"": "Object;_regExp,_string,__js_helper$_current",
  get$current: function() {
    return this.__js_helper$_current;
  },
  moveNext$0: function() {
    var t1, t2, index;
    if (this._string == null)
      return false;
    t1 = this.__js_helper$_current;
    if (t1 != null) {
      t1 = t1._match;
      t2 = t1.index;
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      t1 = J.get$length$asx(t1[0]);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      index = t2 + t1;
      if (this.__js_helper$_current._match.index === index)
        ++index;
    } else
      index = 0;
    this.__js_helper$_current = this._regExp._execGlobal$2(this._string, index);
    if (this.__js_helper$_current == null) {
      this._string = null;
      return false;
    }
    return true;
  }
},

StringMatch: {"": "Object;start,input,pattern",
  $index: function(_, g) {
    if (!J.$eq(g, 0))
      H.throwExpression(P.RangeError$value(g));
    return this.pattern;
  },
  $isMatch: true
}}],
["asset_pack", "package:asset_pack/asset_pack.dart", , F, {
AssetLoader_httpLoad: function(asset, responseType, extractResponse, tracer) {
  var t1, completer, xhr;
  tracer.toString;
  t1 = null;
  completer = new P._AsyncCompleter(P._Future$(t1));
  H.setRuntimeTypeInfo(completer, [t1]);
  xhr = new XMLHttpRequest();
  C.HttpRequest_methods.open$3$async(xhr, "GET", asset.url, true);
  xhr.responseType = responseType;
  C.EventStreamProvider_load.forTarget$1(xhr).listen$1(new F.AssetLoader_httpLoad_closure(asset, extractResponse, tracer, completer, xhr));
  C.EventStreamProvider_error.forTarget$1(xhr).listen$1(new F.AssetLoader_httpLoad_closure0(asset, tracer, completer, xhr));
  xhr.send();
  return completer.future;
},

Asset: {"": "Object;pack,name>,type>,loader,importer,loaderArguments,importerArguments,url>,_status,_imported@",
  get$isPack: function() {
    return J.$eq(this.type, "pack");
  },
  $isAsset: true
},

AssetImporter: {"": "Object;", $isAssetImporter: true},

AssetLoader: {"": "Object;", $isAssetLoader: true},

AssetLoader_httpLoad_closure: {"": "Closure;asset_0,extractResponse_1,tracer_2,completer_3,xhr_4",
  call$1: function(e) {
    var t1, t2, t3, t4;
    t1 = this.xhr_4;
    t2 = t1.status;
    if (typeof t2 !== "number")
      throw t2.$ge();
    t3 = t2 >= 200 && t2 < 300 || t2 === 0 || t2 === 304;
    t4 = this.completer_3;
    if (t3) {
      t1 = this.extractResponse_1.call$1(t1);
      t2 = t4.future;
      if (t2._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t2._asyncComplete$1(t1);
    } else {
      "" + t2;
      t1.statusText;
      t1 = t4.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(null);
    }
  },
  $is_args1: true
},

AssetLoader_httpLoad_closure0: {"": "Closure;asset_5,tracer_6,completer_7,xhr_8",
  call$1: function(e) {
    var t1 = this.xhr_8;
    H.S(t1.status);
    t1.statusText;
    t1 = this.completer_7.future;
    if (t1._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    t1._asyncComplete$1(null);
  },
  $is_args1: true
},

AssetManager: {"": "Object;importers,loaders,tracer,_root",
  $index: function(_, path) {
    return this._root.getImportedAtPath$1(path);
  },
  _loadAndImport$1: function(asset) {
    var t1 = asset.loader;
    if (t1 == null) {
      H.S(asset.type);
      this.tracer.toString;
      return P._Future$immediate(asset, null);
    }
    if (asset.importer == null) {
      H.S(asset.type);
      this.tracer.toString;
      return P._Future$immediate(asset, null);
    }
    asset._status = "Loading";
    return J.load$2$x(t1, asset, this.tracer).then$1(new F.AssetManager__loadAndImport_closure(this, asset));
  },
  AssetManager$1: function(tracer0) {
    var t1;
    this._root = new F.AssetPack(this, "root", P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, F.Asset), null);
    t1 = this.importers;
    t1.$indexSet(t1, "json", new F.JsonImporter());
    t1.$indexSet(t1, "text", new F.TextImporter());
    t1.$indexSet(t1, "pack", new F.PackImporter(this));
    t1.$indexSet(t1, "textmap", new F.NoopImporter());
    t1.$indexSet(t1, "imagemap", new F.NoopImporter());
    t1.$indexSet(t1, "image", new F.NoopImporter());
    t1 = this.loaders;
    t1.$indexSet(t1, "textmap", new F.MapLoader(new F.TextLoader()));
    t1.$indexSet(t1, "imagemap", new F.MapLoader(new F.ImageLoader()));
    t1.$indexSet(t1, "json", new F.TextLoader());
    t1.$indexSet(t1, "text", t1.$index(t1, "json"));
    t1.$indexSet(t1, "pack", t1.$index(t1, "json"));
    t1.$indexSet(t1, "image", new F.ImageLoader());
  },
  static: {
AssetManager$: function(tracer0) {
  var t1, t2, t3;
  t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, F.AssetImporter);
  t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, F.AssetLoader);
  t3 = new F.NullAssetPackTrace(P.StreamController_StreamController(null, null, null, null, true, F.AssetPackTraceEvent));
  t3 = new F.AssetManager(t1, t2, t3, null);
  t3.AssetManager$1(tracer0);
  return t3;
}}

},

AssetManager__loadAndImport_closure: {"": "Closure;this_0,asset_1",
  call$1: function(payload) {
    var t1 = this.asset_1;
    t1._status = "Importing";
    return J.import$3$x(t1.importer, payload, t1, this.this_0.tracer);
  },
  $is_args1: true
},

AssetPack: {"": "Object;manager,name>,assets,_parent?",
  type$1: function(_, assetName) {
    var t1, asset;
    t1 = this.assets;
    asset = t1.$index(t1, assetName);
    if (asset != null)
      return J.get$type$x(asset);
    return;
  },
  get$type: function(_receiver) {
    return new F.BoundClosure$i1(this, F.AssetPack.prototype.type$1, _receiver, "type$1");
  },
  url$1: function(_, assetName) {
    var t1, asset;
    t1 = this.assets;
    asset = t1.$index(t1, assetName);
    if (asset != null)
      return J.get$url$x(asset);
    return;
  },
  get$url: function(_receiver) {
    return new F.BoundClosure$i1(this, F.AssetPack.prototype.url$1, _receiver, "url$1");
  },
  registerAsset$5: function($name, type, url, loaderArguments, importerArguments) {
    var t1, t2, t3, loader, importer, asset;
    if (J.$eq($name, ""))
      throw H.wrapException(new P.ArgumentError(H.S($name) + " is an invalid name."));
    t1 = this.assets;
    if (t1.$index(t1, $name) != null)
      throw H.wrapException(new P.ArgumentError(H.S($name) + " already exists."));
    t2 = this.manager;
    t3 = t2.loaders;
    loader = t3.$index(t3, type);
    t2 = t2.importers;
    importer = t2.$index(t2, type);
    asset = new F.Asset(this, $name, type, loader, importer, loaderArguments, loaderArguments, url, "", null);
    t2 = importer == null;
    if (!t2)
      importer.initialize$1(asset);
    if (t2)
      asset._status = "No importer available.";
    else if (loader == null)
      asset._status = "No loader available.";
    else
      asset._status = "OK";
    t1.$indexSet(t1, $name, asset);
    return asset;
  },
  getImportedAtPath$1: function(path) {
    var asset = this._getAssetAtPath$3(path, J.split$1$s(path, "."), false);
    if (asset != null)
      return asset._imported;
    return;
  },
  $index: function(_, path) {
    return this.getImportedAtPath$1(path);
  },
  _getAssetAtPath$3: function(fullAssetPath, assetPath, throwOnNotFound) {
    var t1, asset;
    if (assetPath.length === 0) {
      if (!throwOnNotFound)
        return;
      throw H.wrapException(new P.ArgumentError(fullAssetPath + " does not exist."));
    }
    t1 = this.assets;
    asset = t1.$index(t1, C.JSArray_methods.removeAt$1(assetPath, 0));
    if (asset == null) {
      if (!throwOnNotFound)
        return;
      throw H.wrapException(new P.ArgumentError(fullAssetPath + " does not exist."));
    }
    if (asset.get$isPack() && assetPath.length > 0)
      return asset._imported._getAssetAtPath$3(fullAssetPath, assetPath, throwOnNotFound);
    if (assetPath.length > 0) {
      if (!throwOnNotFound)
        return;
      throw H.wrapException(new P.ArgumentError(fullAssetPath + " does not exist."));
    }
    return asset;
  },
  loadPack$2: function($name, url) {
    var asset = this.registerAsset$5($name, "pack", url, H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    asset._imported.set$_parent(this);
    return this.manager._loadAndImport$1(asset).then$1(new F.AssetPack_loadPack_closure(asset));
  },
  get$length: function(_) {
    return this.assets._collection$_length;
  }
},

AssetPack_loadPack_closure: {"": "Closure;asset_0",
  call$1: function(_) {
    return this.asset_0._imported;
  },
  $is_args1: true
},

AssetPackTraceEvent: {"": "Object;", $isAssetPackTraceEvent: true},

AssetPackTrace: {"": "Object;"},

NullAssetPackTrace: {"": "AssetPackTrace;_streamCtrl"},

JsonImporter: {"": "AssetImporter;",
  initialize$1: function(asset) {
    asset._imported = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    asset._status = "OK";
  },
  import$3: function(_, payload, asset, tracer) {
    var parsed, e, t1, exception, t2;
    tracer.toString;
    try {
      t1 = payload;
      if (typeof t1 === "string")
        try {
          parsed = C.C_JsonCodec.decode$1(payload);
          t1 = asset;
          t1.set$_imported(parsed);
          t1._status = "OK";
        } catch (exception) {
          t1 = H.unwrapException(exception);
          t2 = J.getInterceptor(t1);
          if (typeof t1 === "object" && t1 !== null && !!t2.$isFormatException) {
            e = t1;
            J.get$message$x(e);
          } else
            throw exception;
        }

      t1 = P._Future$immediate(asset, null);
      return t1;
    } finally {
    }
  }
},

NoopImporter: {"": "AssetImporter;",
  initialize$1: function(asset) {
    asset._imported = null;
    asset._status = "OK";
  },
  import$3: function(_, payload, asset, tracer) {
    var t1;
    tracer.toString;
    try {
      t1 = asset;
      t1.set$_imported(payload);
      t1._status = "OK";
      t1 = P._Future$immediate(asset, null);
      return t1;
    } finally {
    }
  }
},

PackImporter: {"": "AssetImporter;manager",
  initialize$1: function(asset) {
    asset._imported = new F.AssetPack(this.manager, asset.name, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, F.Asset), null);
    asset._status = "OK";
    asset._imported.set$_parent(asset.pack);
  },
  import$3: function(_, payload, asset, tracer) {
    var parsed, e, t1, baseUri, exception, t2, pack, packFile, futureAssets;
    tracer.toString;
    if (payload == null)
      return P._Future$immediate(asset, null);
    t1 = J.get$url$x(asset);
    baseUri = P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(t1));
    parsed = null;
    t1 = payload;
    if (typeof t1 === "string")
      try {
        parsed = C.C_JsonCodec.decode$1(payload);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        t2 = J.getInterceptor(t1);
        if (typeof t1 === "object" && t1 !== null && !!t2.$isFormatException) {
          e = t1;
          J.get$message$x(e);
          return P._Future$immediate(asset, null);
        } else
          throw exception;
      }

    pack = asset.get$_imported();
    packFile = Z.AssetPackFile$fromJson(parsed);
    futureAssets = P.List_List(null, [P.Future, F.Asset]);
    H.setRuntimeTypeInfo(futureAssets, [[P.Future, F.Asset]]);
    t1 = packFile.assets;
    t1 = t1.get$values(t1);
    t1.forEach$1(t1, new F.PackImporter_import_closure(this, baseUri, pack, futureAssets));
    return P.Future_wait(futureAssets).then$1(new F.PackImporter_import_closure0(asset, tracer, pack));
  }
},

PackImporter_import_closure: {"": "Closure;this_0,baseUri_1,pack_2,futureAssets_3",
  call$1: function(packFileAsset) {
    var t1, t2, url, $name, type, childAsset;
    t1 = J.getInterceptor$x(packFileAsset);
    t2 = t1.get$url(packFileAsset);
    t2 = this.baseUri_1.resolveUri$1(P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(t2)));
    url = t2.toString$0(t2);
    $name = t1.get$name(packFileAsset);
    type = t1.get$type(packFileAsset);
    if (J.$eq(type, ""))
      return;
    childAsset = this.pack_2.registerAsset$5($name, type, url, packFileAsset.get$loadArguments(), packFileAsset.importArguments);
    this.futureAssets_3.push(this.this_0.manager._loadAndImport$1(childAsset).then$1(new F.PackImporter_import__closure(childAsset)));
  },
  $is_args1: true
},

PackImporter_import__closure: {"": "Closure;childAsset_4",
  call$1: function(_) {
    this.childAsset_4._status = "Ok";
  },
  $is_args1: true
},

PackImporter_import_closure0: {"": "Closure;asset_5,tracer_6,pack_7",
  call$1: function(loaded) {
    return P._Future$immediate(this.pack_7, null);
  },
  $is_args1: true
},

TextImporter: {"": "AssetImporter;",
  initialize$1: function(asset) {
    asset._imported = "";
    asset._status = "OK";
  },
  import$3: function(_, payload, asset, tracer) {
    tracer.toString;
    if (typeof payload === "string") {
      asset._imported = payload;
      asset._status = "OK";
    }
    return P._Future$immediate(asset, null);
  }
},

ImageLoader: {"": "AssetLoader;",
  load$2: function(_, asset, tracer) {
    var t1, completer, image, t2, t3;
    tracer.toString;
    t1 = null;
    completer = new P._AsyncCompleter(P._Future$(t1));
    H.setRuntimeTypeInfo(completer, [t1]);
    image = W.ImageElement_ImageElement(null, null, null);
    t1 = J.getInterceptor$x(image);
    t2 = t1.get$onLoad(image);
    t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new F.ImageLoader_load_closure(asset, tracer, completer, image)), t2._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t3._tryResume$0();
    t3 = t1.get$onError(image);
    t2 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(new F.ImageLoader_load_closure0(asset, tracer, completer)), t3._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t2._tryResume$0();
    t1.set$src(image, asset.url);
    return completer.future;
  }
},

ImageLoader_load_closure: {"": "Closure;asset_0,tracer_1,completer_2,image_3",
  call$1: function($event) {
    var t1 = this.completer_2.future;
    if (t1._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    t1._asyncComplete$1(this.image_3);
  },
  $is_args1: true
},

ImageLoader_load_closure0: {"": "Closure;asset_4,tracer_5,completer_6",
  call$1: function($event) {
    var t1 = J.getInterceptor($event);
    H.S(t1.get$runtimeType($event));
    H.S(t1.get$type($event));
    t1 = this.completer_6.future;
    if (t1._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    t1._asyncComplete$1(null);
  },
  $is_args1: true
},

MapLoader: {"": "AssetLoader;_loader",
  load$2: function(_, asset, tracer) {
    var textLoader = new F.TextLoader();
    return textLoader.load$2(textLoader, asset, tracer).then$1(new F.MapLoader_load_closure(this, asset, tracer));
  }
},

MapLoader_load_closure: {"": "Closure;this_0,asset_1,tracer_2",
  call$1: function(map) {
    var parsed, e, exception, t1, t2, loadedMap, futures;
    parsed = null;
    try {
      parsed = C.C_JsonCodec.decode$1(map);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t2.$isFormatException) {
        e = t1;
        J.get$message$x(e);
        this.tracer_2.toString;
        return P._Future$immediate(null, null);
      } else
        throw exception;
    }

    loadedMap = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    futures = [];
    J.forEach$1$ax(parsed, new F.MapLoader_load__closure(this.this_0, this.tracer_2, loadedMap, futures, P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(this.asset_1.url))));
    return P.Future_wait(futures).then$1(new F.MapLoader_load__closure0(loadedMap));
  },
  $is_args1: true
},

MapLoader_load__closure: {"": "Closure;this_3,tracer_4,loadedMap_5,futures_6,baseUri_7",
  call$2: function($name, requestUrl) {
    var t1, url;
    t1 = this.baseUri_7.resolveUri$1(P.Uri$_fromMatch($.get$Uri__splitRe().firstMatch$1(requestUrl)));
    url = t1.toString$0(t1);
    t1 = this.this_3._loader;
    this.futures_6.push(t1.load$2(t1, new F.Asset(null, $name, "", null, null, H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), url, "", null), this.tracer_4).then$1(new F.MapLoader_load___closure(this.loadedMap_5, $name)));
  },
  $is_args2: true
},

MapLoader_load___closure: {"": "Closure;loadedMap_8,name_9",
  call$1: function(payload) {
    var t1 = this.loadedMap_8;
    t1.$indexSet(t1, this.name_9, payload);
  },
  $is_args1: true
},

MapLoader_load__closure0: {"": "Closure;loadedMap_10",
  call$1: function(_) {
    return this.loadedMap_10;
  },
  $is_args1: true
},

TextLoader: {"": "AssetLoader;",
  load$2: function(_, asset, tracer) {
    return F.AssetLoader_httpLoad(asset, "text", new F.TextLoader_load_closure(), tracer);
  }
},

TextLoader_load_closure: {"": "Closure;",
  call$1: function(x) {
    return J.get$responseText$x(x);
  },
  $is_args1: true
}}],
["asset_pack_file", "package:asset_pack/asset_pack_file.dart", , Z, {
AssetPackFileAsset: {"": "Object;name>,url>,type*,loadArguments<,importArguments",
  toJson$0: function() {
    var assetMap, t1;
    assetMap = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    assetMap.$indexSet(assetMap, "url", this.url);
    assetMap.$indexSet(assetMap, "type", this.type);
    t1 = this.loadArguments;
    if (t1 != null && J.get$isEmpty$asx(t1) !== true)
      assetMap.$indexSet(assetMap, "loadArguments", t1);
    t1 = this.importArguments;
    if (t1 != null && J.get$isEmpty$asx(t1) !== true)
      assetMap.$indexSet(assetMap, "importArguments", t1);
    return assetMap;
  },
  $isAssetPackFileAsset: true,
  static: {
AssetPackFileAsset_fromJson: function($name, map) {
  var t1 = J.getInterceptor$asx(map);
  return new Z.AssetPackFileAsset($name, t1.$index(map, "url"), t1.$index(map, "type"), t1.$index(map, "loadArguments"), t1.$index(map, "importArguments"));
}}

},

AssetPackFile: {"": "Object;assets",
  toJson$0: function() {
    var json, t1;
    json = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, P.Map);
    t1 = this.assets;
    t1.forEach$1(t1, new Z.AssetPackFile_toJson_closure(json));
    return json;
  },
  AssetPackFile$fromJson$1: function(json) {
    if (json == null)
      return;
    J.forEach$1$ax(json, new Z.AssetPackFile$fromJson_closure(this));
  },
  static: {
AssetPackFile$fromJson: function(json) {
  var t1 = new Z.AssetPackFile(P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, Z.AssetPackFileAsset));
  t1.AssetPackFile$fromJson$1(json);
  return t1;
}}

},

AssetPackFile_toJson_closure: {"": "Closure;json_0",
  call$2: function($name, asset) {
    var t1 = this.json_0;
    t1.$indexSet(t1, J.get$name$x(asset), asset.toJson$0());
  },
  $is_args2: true
},

AssetPackFile$fromJson_closure: {"": "Closure;this_0",
  call$2: function(k, v) {
    var t1 = this.this_0.assets;
    t1.$indexSet(t1, k, Z.AssetPackFileAsset_fromJson(k, v));
  },
  $is_args2: true
}}],
["coUclient", "main.dart", , B, {
init_audio: function() {
  if ($.get$prevVolume() != null) {
    B.setVolume($.get$prevVolume());
    H.interceptedTypeCast(document.querySelector("#VolumeSlider"), "$isInputElement").value = $.get$prevVolume();
    J.set$innerHtml$x(document.querySelector("#rangevalue"), $.get$prevVolume());
  } else {
    $.prevVolume = "50";
    $.get$localStorage().setItem("prevVolume", "50");
  }
  if ($.get$isMuted() == null) {
    $.isMuted = "0";
    $.get$localStorage().setItem("isMuted", "0");
  }
  $.get$ui()._setMute$1($.get$isMuted());
},

load_audio: function() {
  var t1, c;
  t1 = null;
  c = new P._AsyncCompleter(P._Future$(t1));
  H.setRuntimeTypeInfo(c, [t1]);
  $.get$assets()._root.loadPack$2("sounds", "./assets/sounds.pack").then$1(new B.load_audio_closure(c));
  return c.future;
},

runCommand: function(commandToRun) {
  var t1, t2, syntaxParts, t3, action, commandID;
  for (t1 = $.get$COMMANDS(), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = J.getInterceptor$s(commandToRun); t2.moveNext$0();) {
    syntaxParts = t2._dev$_current;
    t3 = J.getInterceptor$asx(syntaxParts);
    if (t1.startsWith$1(commandToRun, t3.$index(syntaxParts, 0))) {
      action = t3.$index(syntaxParts, 2);
      commandID = t3.$index(syntaxParts, 0);
      t1 = H.stringReplaceAllUnchecked(commandToRun, commandID, "");
      action.call$1(H.stringReplaceAllUnchecked(t1, "\n", ""));
      return;
    }
  }
},

updateConsole: function(line) {
  var container, t1, lineDiv;
  container = document.querySelector("#CommandConsole");
  if (line == null) {
    t1 = J.get$children$x(container);
    t1.clear$0(t1);
    return;
  }
  lineDiv = document.createElement("div", null);
  t1 = J.get$classes$x(lineDiv);
  t1.add$1(t1, "ConsoleEntry");
  lineDiv.textContent = line;
  container.appendChild(lineDiv);
  container.scrollTop = container.scrollHeight;
},

showConsole: function() {
  var t1, t2, container;
  document.querySelector("#DevConsole").hidden = false;
  document.querySelector(".ConsoleInput").focus();
  t1 = document.querySelector(".ConsoleInput");
  t1.toString;
  t1 = C.EventStreamProvider_keyup.forElement$1(t1);
  t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.showConsole_closure()), t1._useCapture);
  H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
  t2._tryResume$0();
  $.consolelistener = t2;
  container = document.querySelector("#CommandConsole");
  container.scrollTop = container.scrollHeight;
},

_runConsoleCommand: function() {
  var input, t1, value;
  input = document.querySelector(".ConsoleInput");
  t1 = J.getInterceptor$x(input);
  value = t1.get$value(input);
  B.updateConsole("> " + H.S(value));
  B.runCommand(value);
  t1.set$value(input, "");
},

hideConsole: function(nothing) {
  document.querySelector("#DevConsole").hidden = true;
  $.consolelistener.cancel$0();
},

printConsole: function(message) {
  B.updateConsole(message);
},

printHelp: function(nothing) {
  var t1, t2, command;
  B.updateConsole("List of Commands:");
  for (t1 = $.get$COMMANDS(), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
    command = t2._dev$_current;
    t1 = J.getInterceptor$asx(command);
    B.updateConsole(J.$add$ns(J.$add$ns(t1.$index(command, 0), " : "), t1.$index(command, 1)));
  }
},

clearConsole: function(nothing) {
  B.updateConsole(null);
},

setEnergy: function(value) {
  var intvalue = H.Primitives_parseInt(value, null, null);
  if (intvalue != null) {
    $.get$ui()._setEnergy$1(intvalue);
    B.updateConsole("Setting energy value to " + H.S(value));
  }
},

setMaxEnergy: function(value) {
  var intvalue = H.Primitives_parseInt(value, null, null);
  if (intvalue != null) {
    $.get$ui()._maxenergy = intvalue;
    $.get$ui()._setEnergy$1($.get$ui()._maxenergy);
    $.get$ui()._maxEnergyText.textContent = value;
    B.updateConsole("Setting the maximum energy value to " + H.S(value));
  }
},

setMood: function(value) {
  var intvalue = H.Primitives_parseInt(value, null, null);
  if (intvalue != null) {
    $.get$ui()._setMood$1(intvalue);
    B.updateConsole("Setting mood value to " + H.S(value));
  }
},

setMaxMood: function(value) {
  var intvalue = H.Primitives_parseInt(value, null, null);
  if (intvalue != null) {
    $.get$ui()._mood = intvalue;
    $.get$ui()._setMood$1($.get$ui()._mood);
    $.get$ui()._maxMoodText.textContent = value;
    B.updateConsole("Setting the maximum mood value to " + H.S(value));
  }
},

setCurrants: function(value) {
  var intvalue, t1, t2;
  intvalue = H.Primitives_parseInt(value, null, null);
  if (intvalue != null) {
    t1 = $.get$ui();
    t2 = t1.currantMeter;
    t1 = t1.commaFormatter;
    t2.textContent = t1.format$1(t1, intvalue);
    B.updateConsole("Setting currants to " + H.S(value));
  }
},

setImg: function(value) {
  var intvalue, t1, t2;
  intvalue = H.Primitives_parseInt(value, null, null);
  if (intvalue != null) {
    t1 = $.get$ui();
    t2 = t1.imgMeter;
    t1 = t1.commaFormatter;
    t2.textContent = t1.format$1(t1, intvalue);
    B.updateConsole("Setting Img to " + H.S(value));
  }
},

setName: function(value) {
  $.get$ui()._setName$1(value);
  B.updateConsole("Setting name to \"" + H.S(value) + "\"");
},

setSong: function(value) {
  var testResult, t1, t2, title, artist;
  testResult = W.AudioElement_AudioElement(null).canPlayType("audio/mp3");
  if (testResult === "") {
    B.updateConsole("SoundCloud: Your browser doesnt like mp3s :(");
    return;
  } else if (testResult === "maybe")
    B.updateConsole("SoundCloud: Your browser may or may not fully support mp3s");
  value = J.replaceAll$2$s(value, " ", "");
  if ($.get$ui().currentSong != null)
    J.pause$0$x($.get$ui().currentSong);
  t1 = $.get$ui();
  t2 = $.get$ui().jukebox;
  t1.currentSong = t2.$index(t2, value);
  J.play$0$x($.get$ui().currentSong);
  J.loop$1$x($.get$ui().currentSong, true);
  title = J.$index$asx($.get$ui().currentSong.get$meta(), "title");
  artist = J.$index$asx(J.$index$asx($.get$ui().currentSong.get$meta(), "user"), "username");
  t2 = $.get$ui();
  t2.titleMeter.textContent = title;
  t2.artistMeter.textContent = artist;
  J.set$href$x(document.querySelector("#SCLink"), J.$index$asx($.get$ui().currentSong.get$meta(), "permalink_url"));
},

setVolume: function(value) {
  var intvalue, volumeSlider;
  intvalue = H.Primitives_parseInt(value, null, null);
  if (intvalue != null) {
    volumeSlider = H.interceptedTypeCast(document.querySelector("#VolumeSlider"), "$isInputElement");
    $.get$localStorage().setItem("prevVolume", volumeSlider.value);
    volumeSlider.value = J.getInterceptor$s(value).trim$0(value);
    H.interceptedTypeCast(document.querySelector("#rangevalue"), "$isOutputElement").value = C.JSString_methods.trim$0(value);
    if ($.get$ui().currentSong != null)
      J.volume$1$x($.get$ui().currentSong, intvalue);
    B.updateConsole("Setting volume to " + value);
  }
},

main: function() {
  var Loading, t1;
  B.init_audio();
  Loading = W.AudioElement_AudioElement("./assets/system/loading.ogg");
  if (J.$gt$n(H.Primitives_parseInt($.get$prevVolume(), null, null), 0) && $.get$isMuted() === "0") {
    t1 = H.Primitives_parseInt($.get$prevVolume(), null, null);
    if (typeof t1 !== "number")
      throw t1.$div();
    Loading.volume = t1 / 100;
    document.querySelector("#LoadingScreen").appendChild(Loading);
    Loading.play();
  }
  B.load_audio().then$1(new B.main_closure()).then$1(new B.main_closure0());
  t1 = $.get$game();
  t1.start$0(t1);
},

loop: function() {
  var t1, t2;
  t1 = $.CurrentCamera;
  t2 = J.getInterceptor(t1);
  if (typeof t1 === "object" && t1 !== null && !!t2.$isCamera)
    t1.update$0();
  t1 = $.CurrentPlayer;
  t2 = J.getInterceptor(t1);
  if (typeof t1 === "object" && t1 !== null && !!t2.$isPlayer)
    t1.update$0();
},

render: function() {
  var t1, t2;
  B.refreshClock();
  t1 = $.CurrentStreet;
  t2 = J.getInterceptor(t1);
  if (typeof t1 === "object" && t1 !== null && !!t2.$isStreet)
    t1.render$0();
  t1 = $.CurrentCamera;
  t2 = J.getInterceptor(t1);
  if (typeof t1 === "object" && t1 !== null && !!t2.$isCamera)
    J.set$width$x($.get$gameCanvas(), J.get$width$x($.get$gameCanvas()));
  t1 = $.CurrentPlayer;
  t2 = J.getInterceptor(t1);
  if (typeof t1 === "object" && t1 !== null && !!t2.$isPlayer)
    t1.render$0();
},

resize: function() {
  var gameScreen, t1;
  gameScreen = document.querySelector("#GameScreen");
  $.gameScreenWidth = gameScreen.clientWidth;
  $.gameScreenHeight = gameScreen.clientHeight;
  t1 = window.innerWidth;
  if (typeof t1 !== "number")
    throw t1.$lt();
  if (t1 >= 1308) {
    t1 = window.innerHeight;
    if (typeof t1 !== "number")
      throw t1.$lt();
    t1 = t1 < 325;
  } else
    t1 = true;
  if (t1)
    document.querySelector("#SizeWarning").hidden = false;
  else
    document.querySelector("#SizeWarning").hidden = true;
},

refreshClock: function() {
  var data = G.getDate();
  J.set$innerHtml$x(document.querySelector("#CurrDay"), data[3]);
  J.set$innerHtml$x(document.querySelector("#CurrTime"), data[4]);
  J.set$innerHtml$x(document.querySelector("#CurrDate"), data[2] + " of " + data[1]);
},

load_audio_closure: {"": "Closure;c_0",
  call$1: function(sounds) {
    var songsToLoad, t1, t2, song, t3, t4, result;
    songsToLoad = P.List_List(null, null);
    for (t1 = J.getInterceptor$asx(sounds), t2 = J.get$iterator$ax(J.get$keys$x(t1.$index(sounds, "music"))); t2.moveNext$0();) {
      song = t2.get$current();
      t3 = $.get$ui().sc;
      t3 = t3.load$1(t3, J.$index$asx(J.$index$asx(t1.$index(sounds, "music"), song), "scid"));
      t4 = $.Zone__current;
      t4.toString;
      result = new P._Future(0, t4, null, null, new B.load_audio__closure(song), null, P._registerErrorHandler(null, t4), null);
      result.$builtinTypeInfo = [null];
      t3._addListener$1(result);
      songsToLoad.push(result);
    }
    t1 = P.Future_wait(songsToLoad);
    t2 = this.c_0.future;
    if (t2._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    t2._asyncComplete$1(t1);
  },
  $is_args1: true
},

load_audio__closure: {"": "Closure;song_1",
  call$1: function(s) {
    var t1 = $.get$ui().jukebox;
    t1.$indexSet(t1, this.song_1, s);
    return s;
  },
  $is_args1: true
},

Chat: {"": "Object;_showJoinMessages,_playMentionSound,tabContentMap",
  init$0: function() {
    var chatMenu, t1, t2;
    chatMenu = document.querySelector("#ChatSettingsMenu");
    t1 = document.querySelector("#ChatSettingsIcon");
    t1.toString;
    t1 = C.EventStreamProvider_click.forElement$1(t1);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.Chat_init_closure(chatMenu)), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    C.EventStreamProvider_change._forElementList$1(W._FrozenElementList$_wrap(document.querySelectorAll(".ChatSettingsCheckbox"), null)).listen$1(new B.Chat_init_closure0(this));
    if ($.get$localStorage().getItem("showJoinMessages") != null) {
      if ($.get$localStorage().getItem("showJoinMessages") === "true") {
        this._showJoinMessages = true;
        $.get$localStorage().setItem("showJoinMessages", C.JSBool_methods.toString$0(true));
      } else {
        this._showJoinMessages = false;
        $.get$localStorage().setItem("showJoinMessages", C.JSBool_methods.toString$0(false));
      }
      J.set$checked$x(H.interceptedTypeCast(document.querySelector("#ShowJoinMessages"), "$isCheckboxInputElement"), this._showJoinMessages);
    }
    if ($.get$localStorage().getItem("playMentionSound") != null) {
      if ($.get$localStorage().getItem("playMentionSound") === "true") {
        this._playMentionSound = true;
        $.get$localStorage().setItem("playMentionSound", C.JSBool_methods.toString$0(true));
      } else {
        this._playMentionSound = false;
        $.get$localStorage().setItem("playMentionSound", C.JSBool_methods.toString$0(false));
      }
      J.set$checked$x(H.interceptedTypeCast(document.querySelector("#PlayMentionSound"), "$isCheckboxInputElement"), this._playMentionSound);
    }
    this.addChatTab$2("Global Chat", true);
    this.addChatTab$2("Other Chat", false);
    t1 = J.get$children$x(document.querySelector("#ChatPane"));
    t1.add$1(t1, B.TabContent$("Local Chat", true).getDiv$0());
  },
  addChatTab$2: function(channelName, checked) {
    var tabContent, $content, tab, radioButton, t1, t2, label;
    tabContent = B.TabContent$(channelName, false);
    $content = tabContent.getDiv$0();
    $content.className = "content";
    tab = document.createElement("div", null);
    tab.className = "tab";
    radioButton = W.InputElement_InputElement("radio");
    radioButton.id = "tab-" + H.stringReplaceAllUnchecked(channelName, " ", "_");
    t1 = J.getInterceptor$x(radioButton);
    t1.set$name(radioButton, "tabgroup");
    t1.set$checked(radioButton, checked);
    t1 = C.EventStreamProvider_click.forElement$1(radioButton);
    t2 = tabContent.get$resetMessages();
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    label = document.createElement("label", null);
    label.toString;
    new W._ElementAttributeMap(label)._element.setAttribute("for", "tab-" + H.stringReplaceAllUnchecked(channelName, " ", "_"));
    label.id = "label-" + H.stringReplaceAllUnchecked(channelName, " ", "_");
    label.textContent = channelName;
    J.set$cursor$x(label.style, "pointer");
    t1 = J.get$children$x(tab);
    t1.add$1(t1, radioButton);
    t1.add$1(t1, label);
    t1.add$1(t1, $content);
    t1 = J.get$children$x(document.querySelector("#ChatTabs"));
    t1.add$1(t1, tab);
  }
},

Chat_init_closure: {"": "Closure;chatMenu_0",
  call$1: function(click) {
    var t1 = this.chatMenu_0;
    if (t1.hidden === true)
      t1.hidden = false;
    else
      t1.hidden = true;
  },
  $is_args1: true
},

Chat_init_closure0: {"": "Closure;this_1",
  call$1: function($event) {
    var checkbox, t1;
    checkbox = H.interceptedTypeCast(J.get$target$x($event), "$isCheckboxInputElement");
    if (J.get$id$x(checkbox) === "ShowJoinMessages") {
      t1 = checkbox.checked;
      this.this_1._showJoinMessages = t1;
      $.get$localStorage().setItem("showJoinMessages", J.toString$0(t1));
    }
    if (checkbox.id === "PlayMentionSound") {
      t1 = checkbox.checked;
      this.this_1._playMentionSound = t1;
      $.get$localStorage().setItem("playMentionSound", J.toString$0(t1));
    }
  },
  $is_args1: true
},

TabContent: {"": "Object;connectedUsers,_username,channelName,lastWord,useSpanForTitle,tabInserted,webSocket,chatDiv,chatHistory,unreadMessages,tabSearchIndex,numMessages,_chatServerUrl",
  resetMessages$1: function($event) {
    var t1, selector;
    this.unreadMessages = 0;
    t1 = this.channelName;
    selector = "#label-" + H.stringReplaceAllUnchecked(t1, " ", "_");
    document.querySelector(selector).textContent = t1;
  },
  get$resetMessages: function() {
    return new H.BoundClosure$1(this, B.TabContent.prototype.resetMessages$1, null, "resetMessages$1");
  },
  getDiv$0: function() {
    var t1, span, t2, input, t3, map;
    t1 = document.createElement("div", null);
    t1.className = "ChatWindow";
    this.chatDiv = t1;
    span = document.createElement("span", null);
    t1 = this.channelName;
    span.textContent = t1;
    t2 = document.createElement("div", null);
    t2.className = "ChatHistory";
    this.chatHistory = t2;
    input = W.InputElement_InputElement("text");
    t2 = J.getInterceptor$x(input);
    t3 = t2.get$classes(input);
    t3.add$1(t3, "ChatInput");
    t2 = t2.get$classes(input);
    t2.add$1(t2, "Typing");
    if (this.useSpanForTitle) {
      t2 = J.get$children$x(this.chatDiv);
      t2.add$1(t2, span);
    }
    t2 = J.get$children$x(this.chatDiv);
    t2.add$1(t2, this.chatHistory);
    t2.add$1(t2, input);
    if (t1 === "Local Chat") {
      map = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      map.$indexSet(map, "statusMessage", "hint");
      map.$indexSet(map, "message", "Hint :\nYou can set your chat name by typing '/setname [name]'<br><br>You can get a list of people in this chat room by typing '/list'");
      this._addmessage$1(map);
    }
    this.setupWebSocket$2(this.chatHistory, t1);
    this.processInput$1(input);
    return this.chatDiv;
  },
  processInput$2: function(input, sendButton) {
    var t1, t2;
    input.toString;
    t1 = C.EventStreamProvider_keydown.forElement$1(input);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.TabContent_processInput_closure(this, input)), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = C.EventStreamProvider_keyup.forElement$1(input);
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new B.TabContent_processInput_closure0(this, input)), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
    if (sendButton != null) {
      sendButton.toString;
      t1 = C.EventStreamProvider_click.forElement$1(sendButton);
      t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.TabContent_processInput_closure1(this, input)), t1._useCapture);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
      t2._tryResume$0();
    }
  },
  processInput$1: function(input) {
    return this.processInput$2(input, null);
  },
  parseInput$1: function(input) {
    var map, t1, t2;
    map = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = J.getInterceptor$s(input).split$1(input, " ");
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    if (J.$eq(t1[0], "/setname")) {
      map.$indexSet(map, "statusMessage", "changeName");
      map.$indexSet(map, "username", this._username);
      map.$indexSet(map, "newUsername", C.JSString_methods.substring$1(input, 9));
      map.$indexSet(map, "channel", this.channelName);
    } else {
      t1 = this._username;
      t2 = this.channelName;
      if (input === "/list") {
        map.$indexSet(map, "username", t1);
        map.$indexSet(map, "statusMessage", "list");
        map.$indexSet(map, "channel", t2);
      } else {
        map.$indexSet(map, "username", t1);
        map.$indexSet(map, "message", input);
        map.$indexSet(map, "channel", t2);
        if (t2 === "Local Chat")
          map.$indexSet(map, "street", $.CurrentStreet.label);
        this._addmessage$1(map);
      }
    }
    this.webSocket.send(C.C_JsonCodec.encode$1(map));
  },
  setupWebSocket$2: function(chatHistory, channelName) {
    var t1;
    this.webSocket = W.WebSocket_WebSocket(this._chatServerUrl, null);
    t1 = this.webSocket;
    t1.toString;
    C.EventStreamProvider_open.forTarget$1(t1).listen$1(new B.TabContent_setupWebSocket_closure(this, channelName));
    t1 = this.webSocket;
    t1.toString;
    C.EventStreamProvider_message.forTarget$1(t1).listen$1(new B.TabContent_setupWebSocket_closure0(this, channelName));
    t1 = this.webSocket;
    t1.toString;
    C.EventStreamProvider_close.forTarget$1(t1).listen$1(new B.TabContent_setupWebSocket_closure1(this, chatHistory, channelName));
  },
  _addmessage$1: function(map) {
    var t1, validator, mentionSound, userElement, text, chatString, t2, oldUsername, newUsername, rowSpacer, chatLine, chatRow;
    t1 = [];
    H.setRuntimeTypeInfo(t1, [W.NodeValidator]);
    validator = new W.NodeValidatorBuilder(t1);
    validator._validators.push(W._Html5NodeValidator$(null));
    validator.allowCustomElement$4$attributes$uriAttributes$uriPolicy("a", ["href", "class"], null, null);
    validator.allowCustomElement$4$attributes$uriAttributes$uriPolicy("span", null, null, null);
    this.numMessages = this.numMessages + 1;
    if (this.numMessages > 100) {
      t1 = J.get$children$x(this.chatHistory);
      t1.removeAt$1(t1, 0);
      t1 = J.get$children$x(this.chatHistory);
      if (J.get$className$x(t1.get$first(t1)) === "RowSpacer") {
        t1 = J.get$children$x(this.chatHistory);
        t1.removeAt$1(t1, 0);
      }
    }
    this.chatHistory.scrollHeight;
    if ($.get$chat()._playMentionSound === true && C.JSString_methods.contains$1(J.toLowerCase$0$s(J.$index$asx(map, "message")), J.toLowerCase$0$s(this._username)) && J.$gt$n(H.Primitives_parseInt($.get$prevVolume(), null, null), 0) && $.get$isMuted() === "0") {
      mentionSound = W.AudioElement_AudioElement("./assets/system/mention.ogg");
      t1 = H.Primitives_parseInt($.get$prevVolume(), null, null);
      if (typeof t1 !== "number")
        throw t1.$div();
      mentionSound.volume = t1 / 100;
      mentionSound.play();
    }
    userElement = document.createElement("span", null);
    text = document.createElement("span", null);
    t1 = J.getInterceptor$asx(map);
    J.setInnerHtml$2$validator$x(text, this._parseForUrls$1(t1.$index(map, "message")), validator);
    text.className = "MessageBody";
    chatString = document.createElement("div", null);
    if (t1.$index(map, "statusMessage") == null || J.$eq(t1.$index(map, "message"), " joined.")) {
      userElement.textContent = J.$add$ns(t1.$index(map, "username"), ": ");
      J.set$color$x(userElement.style, this._getColor$1(t1.$index(map, "username")));
      t2 = J.get$children$x(chatString);
      t2.add$1(t2, userElement);
      t2.add$1(t2, text);
    }
    if (J.$eq(t1.$index(map, "statusMessage"), "hint")) {
      t2 = J.get$children$x(chatString);
      t2.add$1(t2, text);
    }
    if (J.$eq(t1.$index(map, "statusMessage"), "changeName")) {
      J.set$paddingRight$x(text.style, "4px");
      t2 = J.getInterceptor$x(chatString);
      if (J.$eq(t1.$index(map, "success"), "true")) {
        oldUsername = document.createElement("span", null);
        oldUsername.textContent = t1.$index(map, "username");
        J.set$color$x(oldUsername.style, this._getColor$1(t1.$index(map, "username")));
        J.set$paddingRight$x(oldUsername.style, "4px");
        newUsername = document.createElement("span", null);
        newUsername.textContent = t1.$index(map, "newUsername");
        J.set$color$x(newUsername.style, this._getColor$1(t1.$index(map, "newUsername")));
        t2 = t2.get$children(chatString);
        t2.add$1(t2, oldUsername);
        t2.add$1(t2, text);
        t2.add$1(t2, newUsername);
        if (J.$eq(t1.$index(map, "username"), this._username)) {
          this._username = t1.$index(map, "newUsername");
          $.get$localStorage().setItem("username", this._username);
        }
        J.remove$1$ax(this.connectedUsers, t1.$index(map, "username"));
        J.add$1$ax(this.connectedUsers, t1.$index(map, "newUsername"));
      } else {
        t2 = t2.get$children(chatString);
        t2.add$1(t2, text);
      }
    }
    if (J.$eq(t1.$index(map, "statusMessage"), "list")) {
      if (J.$eq(t1.$index(map, "hide"), "true")) {
        this.connectedUsers = t1.$index(map, "users");
        return;
      }
      J.set$paddingRight$x(text.style, "4px");
      t2 = J.get$children$x(chatString);
      t2.add$1(t2, text);
      J.forEach$1$ax(t1.$index(map, "users"), new B.TabContent__addmessage_closure(this, chatString));
    }
    rowSpacer = document.createElement("div", null);
    rowSpacer.className = "RowSpacer";
    J.set$paddingRight$x(chatString.style, "2px");
    t1 = J.get$children$x(this.chatHistory);
    t1.add$1(t1, chatString);
    t1 = J.get$children$x(this.chatHistory);
    t1.add$1(t1, rowSpacer);
    t1 = this.chatHistory;
    t1.scrollTop = t1.scrollHeight;
    chatLine = document.createElement("div", null);
    chatLine.className = "bubble";
    t1 = J.getInterceptor$x(chatLine);
    t1.setInnerHtml$2$treeSanitizer(chatLine, J.get$innerHtml$x(chatString), new B.NullTreeSanitizer());
    if (J.startsWith$1$s(chatString.textContent, this._username)) {
      t1 = t1.get$classes(chatLine);
      t1.add$1(t1, "me");
    } else {
      t1 = t1.get$classes(chatLine);
      t1.add$1(t1, "you");
    }
    chatRow = document.createElement("div", null);
    chatRow.className = "bubbleRow";
    t1 = J.get$children$x(chatRow);
    t1.add$1(t1, chatLine);
    t1 = "#conversation-" + H.stringReplaceAllUnchecked(this.channelName, " ", "_");
    t1 = J.get$children$x(document.querySelector(t1));
    t1.add$1(t1, chatRow);
  },
  _parseForUrls$1: function(message) {
    var t1 = {};
    t1.returnString_0 = "";
    J.splitMapJoin$3$onMatch$onNonMatch$s(message, new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("((https?:\\/\\/)?[\\w-]+(\\.[\\w-]+)+\\.?(:\\d+)?(\\/\\S*)?)", false, true, false), null, null), new B.TabContent__parseForUrls_closure(t1), new B.TabContent__parseForUrls_closure0(t1));
    return t1.returnString_0;
  },
  _getColor$1: function(username) {
    var t1, index, i, t2;
    t1 = J.getInterceptor$asx(username);
    index = 0;
    i = 0;
    while (true) {
      t2 = t1.get$length(username);
      if (typeof t2 !== "number")
        throw H.iae(t2);
      if (!(i < t2))
        break;
      index += t1.codeUnitAt$1(username, i);
      ++i;
    }
    t1 = $.get$TabContent__COLORS();
    $.get$TabContent__COLORS();
    t2 = C.JSInt_methods.$mod(index, 12);
    if (t2 < 0 || t2 >= 13)
      throw H.ioore(t1, t2);
    return t1[t2];
  },
  TabContent$2: function(channelName, useSpanForTitle) {
    var t1, t2, conversationStack, conversation, channelList, channel;
    t1 = $.get$chat().tabContentMap;
    t2 = this.channelName;
    t1.$indexSet(t1, t2, this);
    if ($.get$localStorage().getItem("username") != null)
      this._username = $.get$localStorage().getItem("username");
    else
      this._username = J.$add$ns(this._username, C.JSInt_methods.toString$0(C.C__Random.nextInt$1(10000)));
    conversationStack = document.querySelector("#ConversationStack");
    conversation = document.createElement("div", null);
    conversation.className = "Conversation";
    conversation.id = "conversation-" + H.stringReplaceAllUnchecked(t2, " ", "_");
    t1 = J.get$children$x(conversationStack);
    t1.add$1(t1, conversation);
    channelList = document.querySelector("#ChannelList");
    channel = document.createElement("div", null);
    channel.className = "ChannelName";
    channel.textContent = t2;
    t2 = J.get$children$x(channelList);
    t2.add$1(t2, channel);
  },
  static: {
"": "TabContent__COLORS",
TabContent$: function(channelName, useSpanForTitle) {
  var t1 = new B.TabContent(P.List_List(null, null), "testUser", channelName, "", useSpanForTitle, false, null, null, null, 0, 0, 0, "ws://couchatserver.herokuapp.com");
  t1.TabContent$2(channelName, useSpanForTitle);
  return t1;
}}

},

TabContent_processInput_closure: {"": "Closure;this_0,input_1",
  call$1: function(key) {
    var t1, t2, startIndex, t3, t4, t5, username, index;
    if (J.get$keyCode$x(key) === 9) {
      key.preventDefault();
      t1 = this.input_1;
      t2 = J.getInterceptor$x(t1);
      startIndex = J.lastIndexOf$1$asx(t2.get$value(t1), " ") === -1 ? 0 : J.lastIndexOf$1$asx(t2.get$value(t1), " ") + 1;
      t3 = this.this_0;
      if (!t3.tabInserted)
        t3.lastWord = J.substring$1$s(t2.get$value(t1), startIndex);
      while (true) {
        t4 = t3.tabSearchIndex;
        t5 = J.get$length$asx(t3.connectedUsers);
        if (typeof t5 !== "number")
          throw H.iae(t5);
        if (!(t4 < t5))
          break;
        username = J.elementAt$1$ax(t3.connectedUsers, t3.tabSearchIndex);
        if (C.JSString_methods.startsWith$1(J.toLowerCase$0$s(username), t3.lastWord.toLowerCase())) {
          t4 = t2.get$value(t1);
          t2.set$value(t1, C.JSString_methods.substring$2(t4, 0, J.getInterceptor$asx(t4).lastIndexOf$1(t4, " ") + 1) + username);
          t3.tabInserted = true;
          t3.tabSearchIndex = t3.tabSearchIndex + 1;
          break;
        }
        t3.tabSearchIndex = t3.tabSearchIndex + 1;
      }
      if (!t3.tabInserted)
        for (index = 0; index < t3.tabSearchIndex; ++index) {
          username = J.elementAt$1$ax(t3.connectedUsers, index);
          if (C.JSString_methods.startsWith$1(J.toLowerCase$0$s(username), t3.lastWord.toLowerCase())) {
            t4 = t2.get$value(t1);
            t2.set$value(t1, C.JSString_methods.substring$2(t4, 0, J.getInterceptor$asx(t4).lastIndexOf$1(t4, " ") + 1) + username);
            t3.tabInserted = true;
            t3.tabSearchIndex = index + 1;
            break;
          }
        }
      if (t3.tabSearchIndex === J.get$length$asx(t3.connectedUsers))
        t3.tabSearchIndex = 0;
      return;
    }
  },
  $is_args1: true
},

TabContent_processInput_closure0: {"": "Closure;this_2,input_3",
  call$1: function(key) {
    var t1, t2;
    if (J.get$keyCode$x(key) !== 9)
      this.this_2.tabInserted = false;
    if (key.keyCode !== 13)
      return;
    t1 = this.input_3;
    t2 = J.getInterceptor$x(t1);
    if (J.trim$0$s(t2.get$value(t1)).length === 0)
      return;
    this.this_2.parseInput$1(t2.get$value(t1));
    t2.set$value(t1, "");
  },
  $is_args1: true
},

TabContent_processInput_closure1: {"": "Closure;this_4,input_5",
  call$1: function(_) {
    var t1, t2;
    t1 = this.input_5;
    t2 = J.getInterceptor$x(t1);
    if (J.trim$0$s(t2.get$value(t1)).length === 0)
      return;
    this.this_4.parseInput$1(t2.get$value(t1));
    t2.set$value(t1, "");
  },
  $is_args1: true
},

TabContent_setupWebSocket_closure: {"": "Closure;this_0,channelName_1",
  call$1: function(_) {
    var map, t1, t2;
    document.querySelector("#ChatDisconnected").hidden = true;
    map = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = this.this_0;
    map.$indexSet(map, "message", C.JSString_methods.$add("userName=", t1._username));
    t2 = this.channelName_1;
    map.$indexSet(map, "channel", t2);
    if (t2 === "Local Chat")
      map.$indexSet(map, "street", $.CurrentStreet.label);
    t1.webSocket.send(C.C_JsonCodec.encode$1(map));
    map = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    map.$indexSet(map, "hide", "true");
    map.$indexSet(map, "username", t1._username);
    map.$indexSet(map, "statusMessage", "list");
    map.$indexSet(map, "channel", t2);
    t1.webSocket.send(C.C_JsonCodec.encode$1(map));
  },
  $is_args1: true
},

TabContent_setupWebSocket_closure0: {"": "Closure;this_2,channelName_3",
  call$1: function(messageEvent) {
    var map, t1, t2, selector, t3;
    map = C.C_JsonCodec.decode$1(J.get$data$x(messageEvent));
    t1 = J.getInterceptor$asx(map);
    if (J.$eq(t1.$index(map, "message"), "ping"))
      return;
    if (J.$eq(t1.$index(map, "message"), " joined.")) {
      t2 = this.this_2;
      if (J.contains$1$asx(t2.connectedUsers, t1.$index(map, "username")) !== true)
        J.add$1$ax(t2.connectedUsers, t1.$index(map, "username"));
      if ($.get$chat()._showJoinMessages !== true)
        return;
    }
    if (J.$eq(t1.$index(map, "message"), " left.")) {
      J.remove$1$ax(this.this_2.connectedUsers, t1.$index(map, "username"));
      if ($.get$chat()._showJoinMessages !== true)
        return;
    }
    if (J.$eq(t1.$index(map, "channel"), "all"))
      this.this_2._addmessage$1(map);
    else if (J.$eq(t1.$index(map, "channel"), "Local Chat") && J.$eq(t1.$index(map, "channel"), this.channelName_3))
      if (t1.$index(map, "statusMessage") != null)
        this.this_2._addmessage$1(map);
      else {
        t2 = this.this_2;
        if (!J.$eq(t1.$index(map, "username"), t2._username) && J.$eq(t1.$index(map, "street"), $.CurrentStreet.label))
          t2._addmessage$1(map);
      }
    else {
      t2 = this.channelName_3;
      if (J.$eq(t1.$index(map, "channel"), t2))
        if (t1.$index(map, "statusMessage") == null) {
          selector = "#tab-" + H.stringReplaceAllUnchecked(t2, " ", "_");
          t3 = "#tab-" + t2;
          H.interceptedTypeCast(document.querySelector(t3), "$isRadioButtonInputElement");
          if (J.get$checked$x(H.interceptedTypeCast(document.querySelector(selector), "$isRadioButtonInputElement")) !== true) {
            t3 = this.this_2;
            t3.unreadMessages = t3.unreadMessages + 1;
            selector = "#label-" + H.stringReplaceAllUnchecked(t2, " ", "_");
            J.set$innerHtml$x(document.querySelector(selector), "<span class=\"Counter\">" + C.JSInt_methods.toString$0(t3.unreadMessages) + "</span>" + " " + t2);
          }
          t2 = this.this_2;
          if (!J.$eq(t1.$index(map, "username"), t2._username))
            t2._addmessage$1(map);
        } else
          this.this_2._addmessage$1(map);
    }
  },
  $is_args1: true
},

TabContent_setupWebSocket_closure1: {"": "Closure;this_4,chatHistory_5,channelName_6",
  call$1: function(_) {
    var t1 = document.querySelector("#ChatDisconnected");
    t1.hidden = false;
    t1.textContent = "Disconnected from Chat, attempting to reconnect...";
    P.Timer_Timer(P.Duration$(0, 0, 0, 0, 0, 5), new B.TabContent_setupWebSocket__closure(this.this_4, this.chatHistory_5, this.channelName_6));
  },
  $is_args1: true
},

TabContent_setupWebSocket__closure: {"": "Closure;this_7,chatHistory_8,channelName_9",
  call$0: function() {
    this.this_7.setupWebSocket$2(this.chatHistory_8, this.channelName_9);
  },
  $is_void_: true
},

TabContent__addmessage_closure: {"": "Closure;this_0,chatString_1",
  call$1: function(username) {
    var user, t1;
    user = document.createElement("span", null);
    user.textContent = username;
    J.set$color$x(user.style, this.this_0._getColor$1(username));
    J.set$paddingRight$x(user.style, "4px");
    J.set$display$x(user.style, "inline-block");
    t1 = J.get$children$x(this.chatString_1);
    t1.add$1(t1, user);
  },
  $is_args1: true
},

TabContent__parseForUrls_closure: {"": "Closure;box_0",
  call$1: function(m) {
    var t1, url, t2;
    t1 = J.getInterceptor$asx(m);
    url = t1.$index(m, 0);
    if (J.contains$1$asx(url, "http://") !== true)
      url = C.JSString_methods.$add("http://", url);
    t2 = this.box_0;
    t2.returnString_0 = t2.returnString_0 + ("<a href=\"" + H.S(url) + "\" target=\"_blank\" class=\"MessageLink\">" + H.S(t1.$index(m, 0)) + "</a>");
  },
  $is_args1: true
},

TabContent__parseForUrls_closure0: {"": "Closure;box_0",
  call$1: function(s) {
    var t1, returnString;
    t1 = this.box_0;
    returnString = C.JSString_methods.$add(t1.returnString_0, s);
    t1.returnString_0 = returnString;
    return returnString;
  },
  $is_args1: true
},

NullTreeSanitizer: {"": "Object;",
  sanitizeTree$1: function(node) {
  }
},

showConsole_closure: {"": "Closure;",
  call$1: function(key) {
    if (J.get$keyCode$x(key) === 13)
      B._runConsoleCommand();
  },
  $is_args1: true
},

main_closure: {"": "Closure;",
  call$1: function(_) {
    return $.get$assets()._root.loadPack$2("streets", "./assets/streets.pack");
  },
  $is_args1: true
},

main_closure0: {"": "Closure;",
  call$1: function(_) {
    var t1, doneLoading, t2;
    J.set$opacity$x(document.querySelector("#LoadingScreen").style, "0.0");
    P.Timer_Timer(P.Duration$(0, 0, 0, 0, 0, 1), J.get$remove$ax(document.querySelector("#LoadingScreen")));
    $.get$ui().init$0();
    B.updateConsole("System: Initializing..");
    t1 = B.Input$();
    t1.init$0();
    $.playerInput = t1;
    B.updateConsole("System: Initialization Finished.");
    B.updateConsole("");
    B.updateConsole("COU DEVELOPMENT CONSOLE");
    B.updateConsole("For a list of commands type \"help\"");
    doneLoading = W.AudioElement_AudioElement("./assets/system/game_loaded.ogg");
    if (J.$gt$n(H.Primitives_parseInt($.get$prevVolume(), null, null), 0) && $.get$isMuted() === "0") {
      t1 = H.Primitives_parseInt($.get$prevVolume(), null, null);
      if (typeof t1 !== "number")
        throw t1.$div();
      doneLoading.volume = t1 / 100;
      document.body.appendChild(doneLoading);
      doneLoading.play();
      t1 = C.EventStreamProvider_ended.forElement$1(doneLoading);
      t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.main__closure(doneLoading)), t1._useCapture);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
      t2._tryResume$0();
    }
    t1 = B.Street$("streets.street");
    t1.load$0(t1);
    t1 = document.body;
    new W._ChildrenElementList(t1, t1.children)._element.appendChild($.get$gameCanvas());
    $.get$gameScreen().appendChild($.get$gameCanvas());
    J.set$zIndex$x($.get$gameCanvas().style, "0");
    J.set$width$x($.get$gameCanvas(), $.CurrentStreet.width);
    J.set$height$x($.get$gameCanvas(), $.CurrentStreet.height);
    J.set$position$x($.get$gameCanvas().style, "absolute");
    J.set$left$x($.get$gameCanvas().style, "0 px");
    J.set$top$x($.get$gameCanvas().style, "0 px");
    B.Player$();
    $.CurrentCamera = B.Camera$();
  },
  $is_args1: true
},

main__closure: {"": "Closure;doneLoading_0",
  call$1: function(_) {
    return C.AudioElement_methods.remove$0(this.doneLoading_0);
  },
  $is_args1: true
},

Input: {"": "Object;leftKey,rightKey,upKey,downKey,spaceKey,ignoreKeys",
  init$0: function() {
    var t1, t2, volumeSlider, chatInputs, joystick;
    $.get$game()._pointerLock.lockOnClick = false;
    t1 = document.querySelector("#ConsoleGlyph");
    t1.toString;
    t1 = C.EventStreamProvider_click.forElement$1(t1);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.Input_init_closure()), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = document.querySelector("#CloseConsole");
    t2.toString;
    t2 = C.EventStreamProvider_click.forElement$1(t2);
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new B.Input_init_closure0()), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
    t1 = document.querySelector("#FullscreenGlyph");
    t1.toString;
    t1 = C.EventStreamProvider_click.forElement$1(t1);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.Input_init_closure1()), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = document.querySelector("#FullscreenResetGlyph");
    t2.toString;
    t2 = C.EventStreamProvider_click.forElement$1(t2);
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new B.Input_init_closure2()), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
    C.EventStreamProvider_webkitfullscreenchange.forTarget$1(document).listen$1(new B.Input_init_closure3());
    t1 = document.querySelector("#AudioGlyph");
    t1.toString;
    t1 = C.EventStreamProvider_click.forElement$1(t1);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.Input_init_closure4()), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    volumeSlider = document.querySelector("#VolumeSlider");
    volumeSlider.toString;
    t2 = C.EventStreamProvider_change.forElement$1(volumeSlider);
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new B.Input_init_closure5(volumeSlider)), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
    chatInputs = W._FrozenElementList$_wrap(document.querySelectorAll(".Typing"), null);
    C.EventStreamProvider_focus._forElementList$1(chatInputs).listen$1(new B.Input_init_closure6(this));
    C.EventStreamProvider_blur._forElementList$1(chatInputs).listen$1(new B.Input_init_closure7(this));
    C.EventStreamProvider_keydown.forTarget$1(document).listen$1(new B.Input_init_closure8(this));
    C.EventStreamProvider_keyup.forTarget$1(document).listen$1(new B.Input_init_closure9(this));
    joystick = B.Joystick$(document.querySelector("#Joystick"), document.querySelector("#Knob"));
    t1 = joystick._moveController;
    t2 = new P._BroadcastStream(t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_BroadcastStreamController", 0)]);
    t2.listen$1(new B.Input_init_closure10(this, joystick));
    t2 = joystick._releaseController;
    t1 = new P._BroadcastStream(t2);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_BroadcastStreamController", 0)]);
    t1.listen$1(new B.Input_init_closure11(this));
    t1 = document.querySelector("#AButton");
    t1.toString;
    t1 = C.EventStreamProvider_touchstart.forElement$1(t1);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.Input_init_closure12(this)), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = document.querySelector("#AButton");
    t2.toString;
    t2 = C.EventStreamProvider_touchend.forElement$1(t2);
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new B.Input_init_closure13(this)), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
    t1 = document.querySelector("#ChatBubble");
    t1.toString;
    t1 = C.EventStreamProvider_click.forElement$1(t1);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.Input_init_closure14()), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = document.querySelector("#BackFromChannelSelector");
    t2.toString;
    t2 = C.EventStreamProvider_click.forElement$1(t2);
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new B.Input_init_closure15()), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
    t1 = document.querySelector("#BackFromChat");
    t1.toString;
    t1 = C.EventStreamProvider_click.forElement$1(t1);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.Input_init_closure16()), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = W._FrozenElementList$_wrap(document.querySelectorAll(".ChannelName"), null);
    t2.forEach$1(t2, new B.Input_init_closure17());
    t2 = document.body;
    t2.toString;
    t2 = C.EventStreamProvider_contextmenu.forElement$1(t2);
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new B.Input_init_closure18(this)), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
    $.playerInput = this;
  },
  hideClickMenu$0: function() {
    if (document.querySelector("#RightClickMenu") != null)
      J.remove$0$ax(document.querySelector("#RightClickMenu"));
  },
  showClickMenu$4: function(Click, title, description, options) {
    var t, t1, t2, t3, y, x, newOptions, option, menuitem, $arguments;
    this.hideClickMenu$0();
    t = document.querySelector("#RC_Template");
    document.body.appendChild(J.clone$1$x(J.get$content$x(t), true));
    t1 = J.getInterceptor$x(Click);
    t2 = J.get$y$x(t1.get$page(Click));
    t3 = window.innerHeight;
    if (typeof t3 !== "number")
      throw t3.$div();
    if (typeof t2 !== "number")
      throw t2.$gt();
    if (t2 > t3 / 2) {
      t2 = J.get$y$x(t1.get$page(Click));
      if (typeof t2 !== "number")
        throw t2.$sub();
      y = t2 - 55 - 0;
    } else {
      t2 = J.get$y$x(t1.get$page(Click));
      if (typeof t2 !== "number")
        throw t2.$sub();
      y = t2 - 10;
    }
    t2 = J.get$x$x(t1.get$page(Click));
    t3 = window.innerWidth;
    if (typeof t3 !== "number")
      throw t3.$div();
    if (typeof t2 !== "number")
      throw t2.$gt();
    if (t2 > t3 / 2) {
      t1 = J.get$x$x(t1.get$page(Click));
      if (typeof t1 !== "number")
        throw t1.$sub();
      x = t1 - 120;
    } else {
      t1 = J.get$x$x(t1.get$page(Click));
      if (typeof t1 !== "number")
        throw t1.$sub();
      x = t1 - 10;
    }
    document.querySelector("#ClickTitle").textContent = title;
    document.querySelector("#ClickDesc").textContent = description;
    newOptions = P.List_List(null, null);
    for (t1 = new H.ListIterator(options, 0, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(options, "JSArray", 0)]); t1.moveNext$0();) {
      option = t1._dev$_current;
      menuitem = document.createElement("div", null);
      t2 = J.get$classes$x(menuitem);
      t2.add$1(t2, "RCItem");
      menuitem.textContent = J.$index$asx(option, 0);
      t2 = C.EventStreamProvider_click.forElement$1(menuitem);
      $arguments = H.substitute(t2.$as_EventStream, H.getRuntimeTypeInfo(t2));
      t3 = $arguments == null ? null : $arguments[0];
      t2 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new B.Input_showClickMenu_closure(option)), t2._useCapture);
      t2.$builtinTypeInfo = [t3];
      t3 = t2._onData;
      if (t3 != null && t2._pauseCount <= 0)
        J.addEventListener$3$x(t2._target, t2._eventType, t3, t2._useCapture);
      newOptions.push(menuitem);
    }
    t1 = J.get$children$x(document.querySelector("#RCActionList"));
    t1.addAll$1(t1, newOptions);
    t1 = document.querySelector("#RightClickMenu").style;
    J.getInterceptor$x(t1).set$opacity(t1, "1.0");
    C.CssStyleDeclaration_methods.set$position(t1, "absolute");
    C.CssStyleDeclaration_methods.set$top(t1, H.S(y) + "px");
    C.CssStyleDeclaration_methods.set$left(t1, H.S(x) + "px");
    B.updateConsole("Spawned rc window called \"" + title + "\".");
    C.EventStreamProvider_click.forTarget$1(document).listen$1(new B.Input_showClickMenu_closure0(this));
  },
  Input$0: function() {
    this.leftKey = false;
    this.rightKey = false;
    this.upKey = false;
    this.downKey = false;
    this.spaceKey = false;
  },
  static: {
Input$: function() {
  var t1 = new B.Input(null, null, null, null, null, false);
  t1.Input$0();
  return t1;
}}

},

Input_init_closure: {"": "Closure;",
  call$1: function(a) {
    if (document.querySelector("#DevConsole").hidden === true)
      B.showConsole();
    else {
      document.querySelector("#DevConsole").hidden = true;
      $.consolelistener.cancel$0();
    }
  },
  $is_args1: true
},

Input_init_closure0: {"": "Closure;",
  call$1: function(_) {
    document.querySelector("#DevConsole").hidden = true;
    $.consolelistener.cancel$0();
  },
  $is_args1: true
},

Input_init_closure1: {"": "Closure;",
  call$1: function(a) {
    document.documentElement.webkitRequestFullscreen();
  },
  $is_args1: true
},

Input_init_closure2: {"": "Closure;",
  call$1: function(a) {
    document.webkitExitFullscreen();
  },
  $is_args1: true
},

Input_init_closure3: {"": "Closure;",
  call$1: function(_) {
    if (document.webkitFullscreenElement != null) {
      B.updateConsole("System: FullScreen = true");
      J.set$display$x(document.querySelector("#FullscreenGlyph").style, "none");
      J.set$display$x(document.querySelector("#FullscreenResetGlyph").style, "inline");
    } else {
      B.updateConsole("System: FullScreen = false");
      J.set$display$x(document.querySelector("#FullscreenGlyph").style, "inline");
      J.set$display$x(document.querySelector("#FullscreenResetGlyph").style, "none");
    }
  },
  $is_args1: true
},

Input_init_closure4: {"": "Closure;",
  call$1: function(_) {
    var mute = $.get$localStorage().getItem("isMuted") === "0" ? "1" : "0";
    $.get$ui()._setMute$1(mute);
  },
  $is_args1: true
},

Input_init_closure5: {"": "Closure;volumeSlider_0",
  call$1: function(_) {
    B.setVolume(J.get$value$x(this.volumeSlider_0));
  },
  $is_args1: true
},

Input_init_closure6: {"": "Closure;this_1",
  call$1: function(_) {
    this.this_1.ignoreKeys = true;
  },
  $is_args1: true
},

Input_init_closure7: {"": "Closure;this_2",
  call$1: function(_) {
    this.this_2.ignoreKeys = false;
  },
  $is_args1: true
},

Input_init_closure8: {"": "Closure;this_3",
  call$1: function(k) {
    var t1;
    if ((J.get$keyCode$x(k) === 38 || k.keyCode === 87) && !this.this_3.ignoreKeys)
      this.this_3.upKey = true;
    t1 = k.keyCode;
    if ((t1 === 40 || t1 === 83) && !this.this_3.ignoreKeys)
      this.this_3.downKey = true;
    t1 = k.keyCode;
    if ((t1 === 37 || t1 === 65) && !this.this_3.ignoreKeys)
      this.this_3.leftKey = true;
    t1 = k.keyCode;
    if ((t1 === 39 || t1 === 68) && !this.this_3.ignoreKeys)
      this.this_3.rightKey = true;
    if (k.keyCode === 32 && !this.this_3.ignoreKeys)
      this.this_3.spaceKey = true;
  },
  $is_args1: true
},

Input_init_closure9: {"": "Closure;this_4",
  call$1: function(k) {
    var t1;
    if ((J.get$keyCode$x(k) === 38 || k.keyCode === 87) && !this.this_4.ignoreKeys)
      this.this_4.upKey = false;
    t1 = k.keyCode;
    if ((t1 === 40 || t1 === 83) && !this.this_4.ignoreKeys)
      this.this_4.downKey = false;
    t1 = k.keyCode;
    if ((t1 === 37 || t1 === 65) && !this.this_4.ignoreKeys)
      this.this_4.leftKey = false;
    t1 = k.keyCode;
    if ((t1 === 39 || t1 === 68) && !this.this_4.ignoreKeys)
      this.this_4.rightKey = false;
    if (k.keyCode === 32 && !this.this_4.ignoreKeys)
      this.this_4.spaceKey = false;
  },
  $is_args1: true
},

Input_init_closure10: {"": "Closure;this_5,joystick_6",
  call$1: function(_) {
    var t1, t2;
    t1 = this.joystick_6;
    t2 = this.this_5;
    if (t1.UP)
      t2.upKey = true;
    else
      t2.upKey = false;
    t2 = this.this_5;
    if (t1.DOWN)
      t2.downKey = true;
    else
      t2.downKey = false;
    t2 = this.this_5;
    if (t1.LEFT)
      t2.leftKey = true;
    else
      t2.leftKey = false;
    t2 = this.this_5;
    if (t1.RIGHT)
      t2.rightKey = true;
    else
      t2.rightKey = false;
  },
  $is_args1: true
},

Input_init_closure11: {"": "Closure;this_7",
  call$1: function(_) {
    var t1 = this.this_7;
    t1.upKey = false;
    t1.downKey = false;
    t1.rightKey = false;
    t1.leftKey = false;
  },
  $is_args1: true
},

Input_init_closure12: {"": "Closure;this_8",
  call$1: function(_) {
    this.this_8.spaceKey = true;
  },
  $is_args1: true
},

Input_init_closure13: {"": "Closure;this_9",
  call$1: function(_) {
    this.this_9.spaceKey = false;
  },
  $is_args1: true
},

Input_init_closure14: {"": "Closure;",
  call$1: function(_) {
    document.querySelector("#ChannelSelectorScreen").hidden = false;
    document.querySelector("#MainScreen").hidden = true;
  },
  $is_args1: true
},

Input_init_closure15: {"": "Closure;",
  call$1: function(_) {
    document.querySelector("#ChannelSelectorScreen").hidden = true;
    document.querySelector("#MainScreen").hidden = false;
  },
  $is_args1: true
},

Input_init_closure16: {"": "Closure;",
  call$1: function(_) {
    document.querySelector("#ChatScreen").hidden = true;
    document.querySelector("#ChannelSelectorScreen").hidden = false;
  },
  $is_args1: true
},

Input_init_closure17: {"": "Closure;",
  call$1: function(element) {
    J.get$onClick$x(element).listen$1(new B.Input_init__closure(element));
  },
  $is_args1: true
},

Input_init__closure: {"": "Closure;element_10",
  call$1: function(_) {
    var channelName, t1, input, sendButton;
    document.querySelector("#ChatScreen").hidden = false;
    document.querySelector("#ChannelSelectorScreen").hidden = true;
    channelName = J.get$text$x(this.element_10);
    document.querySelector("#ChatChannelTitle").textContent = channelName;
    t1 = W._CssStyleDeclarationSet$(W._FrozenElementList$_wrap(document.querySelectorAll(".Conversation"), null)._elementList);
    t1.set$zIndex(t1, "0");
    channelName.toString;
    t1 = "#conversation-" + H.stringReplaceAllUnchecked(channelName, " ", "_");
    J.set$zIndex$x(document.querySelector(t1).style, "1");
    input = H.interceptedTypeCast(document.querySelector("#MobileChatInput"), "$isTextInputElement");
    sendButton = H.interceptedTypeCast(document.querySelector("#SendButton"), "$isDivElement");
    t1 = $.get$chat().tabContentMap;
    t1.$index(t1, channelName).processInput$2(input, sendButton);
  },
  $is_args1: true
},

Input_init_closure18: {"": "Closure;this_11",
  call$1: function(e) {
    return this.this_11.showClickMenu$4(e, "Testing Right Click", "this is a demo", []);
  },
  $is_args1: true
},

Input_showClickMenu_closure: {"": "Closure;option_0",
  call$1: function(_) {
    B.runCommand(J.$index$asx(this.option_0, 2));
  },
  $is_args1: true
},

Input_showClickMenu_closure0: {"": "Closure;this_1",
  call$1: function(_) {
    this.this_1.hideClickMenu$0();
  },
  $is_args1: true
},

Joystick: {"": "Object;_joystick,_knob,_neutralX,_neutralY,_initialTouchX,_initialTouchY,UP,DOWN,LEFT,RIGHT,_moveController,_releaseController",
  inCircle$5: function(center_x, center_y, radius, x, y) {
    var t1, t2;
    if (typeof center_x !== "number")
      throw center_x.$sub();
    t1 = Math.pow(center_x - x, 2);
    if (typeof center_y !== "number")
      throw center_y.$sub();
    t2 = Math.pow(center_y - y, 2);
    return t1 + t2 <= Math.pow(radius, 2);
  },
  Joystick$2: function(_joystick, _knob) {
    var t1, t2, t3;
    t1 = this._knob;
    this._neutralX = t1.offsetLeft;
    this._neutralY = t1.offsetTop;
    t1.toString;
    t2 = C.EventStreamProvider_touchstart.forElement$1(t1);
    t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new B.Joystick_closure(this)), t2._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t3._tryResume$0();
    t3 = C.EventStreamProvider_touchmove.forElement$1(t1);
    t2 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(new B.Joystick_closure0(this)), t3._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t2._tryResume$0();
    t1 = C.EventStreamProvider_touchend.forElement$1(t1);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.Joystick_closure1(this)), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
  },
  static: {
Joystick$: function(_joystick, _knob) {
  var t1 = new B.Joystick(_joystick, _knob, null, null, null, null, false, false, false, false, P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null));
  t1.Joystick$2(_joystick, _knob);
  return t1;
}}

},

Joystick_closure: {"": "Closure;this_0",
  call$1: function($event) {
    var t1, t2;
    t1 = this.this_0;
    t2 = J.get$first$ax(J.get$touches$x($event));
    t2 = new P.Point(t2.clientX, t2.clientY);
    H.setRuntimeTypeInfo(t2, [null]);
    t1._initialTouchX = t2.x;
    t2 = J.get$first$ax($event.touches);
    t2 = new P.Point(t2.clientX, t2.clientY);
    H.setRuntimeTypeInfo(t2, [null]);
    t1._initialTouchY = t2.y;
    t1 = t1._moveController;
    if (t1._state >= 4)
      H.throwExpression(t1._addEventError$0());
    t1._sendData$1(new B.JoystickEvent());
  },
  $is_args1: true
},

Joystick_closure0: {"": "Closure;this_1",
  call$1: function($event) {
    var t1, t2, t3, t4, x, y, angle, yOnCircle, xOnCircle;
    t1 = J.getInterceptor$x($event);
    t1.preventDefault$0($event);
    t2 = this.this_1;
    t3 = t2._neutralX;
    t1 = J.get$first$ax(t1.get$touches($event));
    t1 = new P.Point(t1.clientX, t1.clientY);
    H.setRuntimeTypeInfo(t1, [null]);
    t1 = t1.x;
    t4 = t2._initialTouchX;
    if (typeof t1 !== "number")
      throw t1.$sub();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    if (typeof t3 !== "number")
      throw t3.$add();
    x = t3 + (t1 - t4);
    t4 = t2._neutralY;
    t1 = J.get$first$ax($event.touches);
    t1 = new P.Point(t1.clientX, t1.clientY);
    H.setRuntimeTypeInfo(t1, [null]);
    t1 = t1.y;
    t3 = t2._initialTouchY;
    if (typeof t1 !== "number")
      throw t1.$sub();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    if (typeof t4 !== "number")
      throw t4.$add();
    y = t4 + (t1 - t3);
    t3 = t2._joystick.clientWidth;
    if (typeof t3 !== "number")
      throw t3.$tdiv();
    t3 = C.JSInt_methods.$tdiv(t3, 2);
    if (!t2.inCircle$5(t2._neutralX, t2._neutralY, t3, x, y)) {
      t1 = t2._neutralY;
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t4 = t2._neutralX;
      if (typeof t4 !== "number")
        throw H.iae(t4);
      angle = Math.atan((y - t1) / (x - t4));
      t1 = t2._neutralX;
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (x - t1 < 0)
        angle += 3.141592653589793;
      t1 = t2._neutralY;
      t4 = C.JSNumber_methods.toInt$0(Math.floor(Math.sin(angle) * t3));
      if (typeof t1 !== "number")
        throw t1.$add();
      yOnCircle = t1 + t4;
      t4 = t2._neutralX;
      t1 = C.JSNumber_methods.toInt$0(Math.floor(Math.cos(angle) * t3));
      if (typeof t4 !== "number")
        throw t4.$add();
      xOnCircle = t4 + t1;
      y = yOnCircle;
      x = xOnCircle;
    }
    t1 = t2._neutralX;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (x < t1)
      t2.LEFT = true;
    else
      t2.LEFT = false;
    t1 = t2._neutralX;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (x > t1)
      t2.RIGHT = true;
    else
      t2.RIGHT = false;
    t1 = t2._neutralY;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (y > t1)
      t2.DOWN = true;
    else
      t2.DOWN = false;
    t1 = t2._neutralY;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (y < t1)
      t2.UP = true;
    else
      t2.UP = false;
    t1 = t2._knob;
    J.set$left$x(t1.style, C.JSNumber_methods.toString$0(x) + "px");
    J.set$top$x(t1.style, C.JSNumber_methods.toString$0(y) + "px");
    t2 = t2._moveController;
    if (t2._state >= 4)
      H.throwExpression(t2._addEventError$0());
    t2._sendData$1(new B.JoystickEvent());
  },
  $is_args1: true
},

Joystick_closure1: {"": "Closure;this_2",
  call$1: function($event) {
    var t1, t2;
    t1 = this.this_2;
    t2 = t1._knob;
    J.set$left$x(t2.style, J.toString$0(t1._neutralX) + "px");
    J.set$top$x(t2.style, J.toString$0(t1._neutralY) + "px");
    t1.UP = false;
    t1.DOWN = false;
    t1.LEFT = false;
    t1.RIGHT = false;
    t1 = t1._releaseController;
    if (t1._state >= 4)
      H.throwExpression(t1._addEventError$0());
    t1._sendData$1(new B.JoystickEvent());
  },
  $is_args1: true
},

JoystickEvent: {"": "Object;"},

Camera: {"": "Object;x>,y>",
  update$0: function() {
    var t1, t2, t3;
    t1 = $.CurrentPlayer.posX;
    t2 = $.get$gameScreen().clientWidth;
    if (typeof t2 !== "number")
      throw t2.$tdiv();
    this.x = t1 - C.JSInt_methods.$tdiv(t2, 2);
    t2 = $.CurrentPlayer.posY;
    t1 = $.get$gameScreen().clientHeight;
    if (typeof t1 !== "number")
      throw t1.$tdiv();
    this.y = t2 - C.JSInt_methods.$tdiv(t1, 2);
    if (this.x < 0)
      this.x = 0;
    t1 = this.x;
    t2 = $.CurrentStreet.width;
    t3 = $.get$gameScreen().clientWidth;
    if (typeof t2 !== "number")
      throw t2.$sub();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    if (t1 > t2 - t3) {
      t1 = $.CurrentStreet.width;
      t2 = $.get$gameScreen().clientWidth;
      if (typeof t1 !== "number")
        throw t1.$sub();
      if (typeof t2 !== "number")
        throw H.iae(t2);
      this.x = t1 - t2;
    }
    if (this.y < 0)
      this.y = 0;
    t1 = this.y;
    t2 = $.CurrentStreet.height;
    t3 = $.get$gameScreen().clientHeight;
    if (typeof t2 !== "number")
      throw t2.$sub();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    if (t1 > t2 - t3) {
      t1 = $.CurrentStreet.height;
      t2 = $.get$gameScreen().clientHeight;
      if (typeof t1 !== "number")
        throw t1.$sub();
      if (typeof t2 !== "number")
        throw H.iae(t2);
      this.y = t1 - t2;
    }
  },
  Camera$0: function() {
    var t1, t2;
    t1 = $.CurrentPlayer.posX;
    t2 = $.get$gameScreen().clientWidth;
    if (typeof t2 !== "number")
      throw t2.$tdiv();
    this.x = t1 - C.JSInt_methods.$tdiv(t2, 2);
    t2 = $.CurrentPlayer.posY;
    t1 = $.get$gameScreen().clientHeight;
    if (typeof t1 !== "number")
      throw t1.$tdiv();
    this.y = t2 - C.JSInt_methods.$tdiv(t1, 2);
  },
  $isCamera: true,
  static: {
Camera$: function() {
  var t1 = new B.Camera(null, null);
  t1.Camera$0();
  return t1;
}}

},

UserInterface: {"": "Object;commaFormatter,nameMeter,currantMeter,imgMeter,titleMeter,artistMeter,sc,jukebox,currentSong,_energymeterImage,_energymeterImageLow,_currEnergyText,_maxEnergyText,_energy,_maxenergy,_emptyAngle,_angleRange,_moodmeterImageLow,_moodmeterImageEmpty,_mood,_maxmood,_currMoodText,_maxMoodText,_moodPercent",
  init$0: function() {
    C._BeforeUnloadEventStreamProvider_beforeunload.forTarget$1(window).listen$1(new B.UserInterface_init_closure());
    B.resize();
    C.EventStreamProvider_resize.forTarget$1(window).listen$1(new B.UserInterface_init_closure0());
    B.setCurrants("0");
    B.setEnergy("100");
    B.setMaxEnergy("100");
    B.setMood("100");
    B.setMaxMood("100");
    $.get$chat().init$0();
  },
  _setEnergy$1: function(newValue) {
    var t1, t2, t3, angle;
    this._energy = newValue;
    t1 = this._currEnergyText;
    J.get$classes$x(t1.parentElement.parentElement).toggle$2("changed", true);
    P.Timer_Timer(P.Duration$(0, 0, 0, 0, 0, 1), new B.UserInterface__setEnergy_closure(this));
    t1.textContent = J.toString$0(this._energy);
    t1 = this._angleRange;
    t2 = this._energy;
    t3 = this._maxenergy;
    if (typeof t2 !== "number")
      throw t2.$div();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    angle = C.JSInt_methods.toString$0(C.JSNumber_methods.toInt$0(t1 - t2 / t3 * t1));
    J.set$transform$x(this._energymeterImage.style, "rotate(" + angle + "deg)");
    t1 = this._energymeterImageLow;
    J.set$transform$x(t1.style, "rotate(" + angle + "deg)");
    t1 = t1.style;
    t3 = this._energy;
    t2 = this._maxenergy;
    if (typeof t3 !== "number")
      throw t3.$div();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    J.set$opacity$x(t1, C.JSNumber_methods.toString$0(1 - t3 / t2));
  },
  _setMood$1: function(newValue) {
    var t1, t2, t3;
    this._mood = newValue;
    t1 = this._currMoodText;
    J.get$classes$x(t1.parentElement).toggle$2("changed", true);
    P.Timer_Timer(P.Duration$(0, 0, 0, 0, 0, 1), new B.UserInterface__setMood_closure(this));
    t1.textContent = J.toString$0(this._mood);
    t1 = this._mood;
    t2 = this._maxmood;
    if (typeof t1 !== "number")
      throw t1.$div();
    this._moodPercent.textContent = C.JSInt_methods.toString$0(C.JSNumber_methods.toInt$0(100 * (t1 / t2)));
    t1 = this._moodmeterImageLow.style;
    t3 = this._mood;
    if (typeof t3 !== "number")
      throw t3.$div();
    J.set$opacity$x(t1, C.JSDouble_methods.toString$0(0.7 - t3 / t2));
    t1 = this._moodmeterImageEmpty;
    if (J.$le$n(this._mood, 0))
      J.set$opacity$x(t1.style, C.JSInt_methods.toString$0(1));
    else
      J.set$opacity$x(t1.style, C.JSInt_methods.toString$0(0));
  },
  _setName$1: function(newValue) {
    var t1 = J.getInterceptor$asx(newValue);
    if (J.$ge$n(t1.get$length(newValue), 17))
      newValue = t1.substring$2(newValue, 0, 15) + "...";
    this.nameMeter.textContent = newValue;
  },
  _setMute$1: function(isMuted) {
    var audioGlyph, t1, t2;
    audioGlyph = document.querySelector("#AudioGlyph");
    t1 = isMuted != null && isMuted === "1";
    t2 = J.getInterceptor$x(audioGlyph);
    if (t1) {
      H.interceptedTypeCast(document.querySelector("#VolumeSlider"), "$isInputElement").disabled = true;
      t2.set$innerHtml(audioGlyph, "<img src=\"./assets/system/mute.png\" class=\"centered-icon glyph\">");
      B.setVolume("0");
      $.get$localStorage().setItem("isMuted", "1");
    } else {
      H.interceptedTypeCast(document.querySelector("#VolumeSlider"), "$isInputElement").disabled = false;
      t2.set$innerHtml(audioGlyph, "<i id=\"VolumeGlyph\" class=\"icon-volume-up glyph icon-large\"></i>");
      B.setVolume($.get$localStorage().getItem("prevVolume"));
      $.get$localStorage().setItem("isMuted", "0");
    }
  }
},

UserInterface_init_closure: {"": "Closure;",
  call$1: function(_) {
    document.querySelector("#YouWon").hidden = false;
  },
  $is_args1: true
},

UserInterface_init_closure0: {"": "Closure;",
  call$1: function(_) {
    return B.resize();
  },
  $is_args1: true
},

UserInterface__setEnergy_closure: {"": "Closure;this_0",
  call$0: function() {
    return J.get$classes$x(this.this_0._currEnergyText.parentElement.parentElement).toggle$1("changed");
  },
  $is_void_: true
},

UserInterface__setMood_closure: {"": "Closure;this_0",
  call$0: function() {
    return J.get$classes$x(this.this_0._currMoodText.parentElement).toggle$1("changed");
  },
  $is_void_: true
},

Player: {"": "Object;posX,posY,width>,height>,avatar,doPhysicsApply,playerCanvas",
  update$0: function() {
    var t1, t2, t3, t4;
    t1 = $.playerInput;
    if (t1.rightKey)
      this.posX = this.posX + 5;
    if (t1.leftKey)
      this.posX = this.posX - 5;
    if (t1.spaceKey)
      this.posY = this.posY - 10;
    t2 = this.doPhysicsApply;
    if (!t2) {
      if (t1.downKey)
        this.posY = this.posY + 5;
      if (t1.upKey)
        this.posY = this.posY - 5;
    }
    if (t2) {
      t1 = this.posY;
      if (t1 < 400)
        this.posY = t1 + 3;
    }
    if (this.posX < 0)
      this.posX = 0;
    t1 = this.posX;
    t2 = $.CurrentStreet;
    t3 = t2.width;
    t4 = this.width;
    if (typeof t3 !== "number")
      throw t3.$sub();
    t4 = t3 - t4;
    if (t1 > t4)
      this.posX = t4;
    if (this.posY < 0)
      this.posY = 0;
    t1 = this.posY;
    t2 = t2.height;
    t3 = this.height;
    if (typeof t2 !== "number")
      throw t2.$add();
    t3 = t2 + t3;
    if (t1 > t3)
      this.posY = t3;
    $.CurrentPlayer = this;
  },
  render$0: function() {
    J.get$context2D$x($.get$gameCanvas()).drawImage(this.avatar, this.posX, this.posY, this.width, this.height);
  },
  Player$0: function() {
    this.avatar = W.ImageElement_ImageElement(null, "assets/sprites/avatar.png", null);
    this.posX = 0;
    this.posY = 550;
    this.width = 100;
    this.height = 172;
    $.CurrentPlayer = this;
  },
  $isPlayer: true,
  static: {
Player$: function() {
  var t1 = new B.Player(null, null, null, null, null, true, null);
  t1.Player$0();
  return t1;
}}

},

Street: {"": "Object;ID,_data,label,width>,height>,top,bottom,left,right,gradientTop,gradientBottom,currentPercentX,currentPercentY",
  load$0: function(_) {
    var gradientCanvas, t1, g, layersOrdered, e, decos, t2, width, height, zIndex, id, e0, $arguments, t3, deco, t4, x, y, w, h, z, source;
    gradientCanvas = W.CanvasElement_CanvasElement(null, null);
    gradientCanvas.id = "gradient";
    $.get$gameScreen().appendChild(gradientCanvas);
    J.set$zIndex$x(gradientCanvas.style, C.JSInt_methods.toString$0(-100));
    t1 = J.getInterceptor$x(gradientCanvas);
    t1.set$width(gradientCanvas, this.width);
    t1.set$height(gradientCanvas, this.height);
    J.set$position$x(gradientCanvas.style, "absolute");
    J.set$left$x(gradientCanvas.style, "0 px");
    J.set$top$x(gradientCanvas.style, "0 px");
    g = t1.get$context2D(gradientCanvas).createLinearGradient(0, 0, 0, this.height);
    g.addColorStop(0, this.gradientTop);
    g.addColorStop(1, this.gradientBottom);
    gradientCanvas.getContext("2d").fillStyle = g;
    gradientCanvas.getContext("2d").fillRect(0, 0, this.width, this.height);
    layersOrdered = [];
    J.forEach$1$ax(J.$index$asx(J.$index$asx(this._data, "dynamic"), "layers"), new B.Street_load_closure(layersOrdered));
    H.IterableMixinWorkaround_sortList(layersOrdered, new B.Street_load_closure0(this));
    for (e = 0; e < 6; ++e) {
      decos = [];
      t1 = J.$index$asx(J.$index$asx(this._data, "dynamic"), "layers");
      if (e >= layersOrdered.length)
        throw H.ioore(layersOrdered, e);
      t1 = J.get$iterator$ax(J.$index$asx(J.$index$asx(t1, layersOrdered[e]), "decos"));
      for (; t1.moveNext$0();)
        decos.push(t1.get$current());
      t1 = new B.Street_load_closure1();
      t2 = decos.length - 1;
      if (t2 - 0 <= 32)
        H.Sort__insertionSort(decos, 0, t2, t1);
      else
        H.Sort__dualPivotQuicksort(decos, 0, t2, t1);
      t1 = J.$index$asx(J.$index$asx(this._data, "dynamic"), "layers");
      if (e >= layersOrdered.length)
        throw H.ioore(layersOrdered, e);
      width = J.$index$asx(J.$index$asx(t1, layersOrdered[e]), "w");
      t1 = J.$index$asx(J.$index$asx(this._data, "dynamic"), "layers");
      if (e >= layersOrdered.length)
        throw H.ioore(layersOrdered, e);
      height = J.$index$asx(J.$index$asx(t1, layersOrdered[e]), "h");
      t1 = J.$index$asx(J.$index$asx(this._data, "dynamic"), "layers");
      if (e >= layersOrdered.length)
        throw H.ioore(layersOrdered, e);
      zIndex = J.$index$asx(J.$index$asx(t1, layersOrdered[e]), "z");
      t1 = J.$index$asx(J.$index$asx(this._data, "dynamic"), "layers");
      if (e >= layersOrdered.length)
        throw H.ioore(layersOrdered, e);
      id = J.$index$asx(J.$index$asx(t1, layersOrdered[e]), "name");
      e0 = document.createElement("canvas", null);
      e0.id = id;
      $.get$gameScreen().appendChild(e0);
      J.set$zIndex$x(e0.style, J.toString$0(zIndex));
      t1 = J.getInterceptor$x(e0);
      t1.set$width(e0, width);
      t1.set$height(e0, height);
      J.set$position$x(e0.style, "absolute");
      J.set$left$x(e0.style, "0 px");
      J.set$top$x(e0.style, "0 px");
      $arguments = H.substitute(decos.$asJSArray, H.getRuntimeTypeInfo(decos));
      t2 = $arguments == null ? null : $arguments[0];
      t3 = new H.ListIterator(decos, decos.length, 0, null);
      t3.$builtinTypeInfo = [t2];
      t2 = J.getInterceptor$n(width);
      for (; t3.moveNext$0();) {
        deco = t3._dev$_current;
        t4 = J.getInterceptor$asx(deco);
        x = J.$add$ns(t4.$index(deco, "x"), t2.$tdiv(width, $.gameScreenWidth));
        y = J.$add$ns(J.$sub$n(t4.$index(deco, "y"), t4.$index(deco, "h")), J.$index$asx(J.$index$asx(this._data, "dynamic"), "ground_y"));
        w = t4.$index(deco, "w");
        h = t4.$index(deco, "h");
        z = t4.$index(deco, "z");
        t1.get$context2D(e0).imageSmoothingEnabled = false;
        source = W.ImageElement_ImageElement(null, null, null);
        J.set$src$x(source, C.JSString_methods.$add("http://revdancatt.github.io/CAT422-glitch-location-viewer/img/scenery/", t4.$index(deco, "filename")) + ".png");
        J.set$position$x(source.style, "absolute");
        J.set$left$x(source.style, "-9999999px");
        J.set$zIndex$x(source.style, J.toString$0(z));
        e0.getContext("2d").drawImage(source, x, y, w, h);
      }
    }
    $.CurrentStreet = this;
  },
  render$0: function() {
    var t1, t2, t3, t4, temp, t5, t6, t7, t8;
    t1 = $.CurrentCamera;
    t2 = t1.x;
    t3 = this.width;
    t4 = $.gameScreenWidth;
    if (typeof t3 !== "number")
      throw t3.$sub();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    this.currentPercentX = t2 / (t3 - t4);
    t1 = t1.y;
    t4 = this.height;
    t3 = $.gameScreenHeight;
    if (typeof t4 !== "number")
      throw t4.$sub();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    this.currentPercentY = t1 / (t4 - t3);
    for (t1 = J.get$children$x($.get$gameScreen()), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
      temp = t1._dev$_current;
      t2 = J.getInterceptor$x(temp);
      if (t2.get$id(temp) === "gradient") {
        t3 = t2.get$style(temp);
        t2 = t2.get$height(temp);
        t4 = $.gameScreenHeight;
        if (typeof t2 !== "number")
          throw t2.$sub();
        if (typeof t4 !== "number")
          throw H.iae(t4);
        t5 = this.currentPercentY;
        if (typeof t5 !== "number")
          throw t5.$negate();
        J.set$top$x(t3, C.JSNumber_methods.toString$0((t2 - t4) * -t5) + "px");
      } else {
        t3 = t2.get$width(temp);
        t4 = $.gameScreenWidth;
        if (typeof t3 !== "number")
          throw t3.$sub();
        if (typeof t4 !== "number")
          throw H.iae(t4);
        t5 = this.currentPercentX;
        if (typeof t5 !== "number")
          throw t5.$negate();
        t6 = t2.get$height(temp);
        t7 = $.gameScreenHeight;
        if (typeof t6 !== "number")
          throw t6.$sub();
        if (typeof t7 !== "number")
          throw H.iae(t7);
        t8 = this.currentPercentY;
        if (typeof t8 !== "number")
          throw t8.$negate();
        J.set$position$x(t2.get$style(temp), "absolute");
        J.set$left$x(t2.get$style(temp), C.JSNumber_methods.toString$0((t3 - t4) * -t5) + "px");
        J.set$top$x(t2.get$style(temp), C.JSNumber_methods.toString$0((t6 - t7) * -t8) + "px");
      }
    }
  },
  Street$1: function(ID) {
    var t1 = this.ID;
    if ($.get$assets()._root.getImportedAtPath$1(t1) == null)
      throw H.wrapException("Error: Asset not loaded!");
    else {
      this._data = $.get$assets()._root.getImportedAtPath$1(t1);
      this.label = J.$index$asx(this._data, "label");
      this.gradientTop = C.JSString_methods.$add("#", J.$index$asx(J.$index$asx(this._data, "gradient"), "top"));
      this.gradientBottom = C.JSString_methods.$add("#", J.$index$asx(J.$index$asx(this._data, "gradient"), "bottom"));
      this.top = J.$index$asx(J.$index$asx(this._data, "dynamic"), "t");
      this.bottom = J.$index$asx(J.$index$asx(this._data, "dynamic"), "b");
      this.left = J.$index$asx(J.$index$asx(this._data, "dynamic"), "l");
      this.right = J.$index$asx(J.$index$asx(this._data, "dynamic"), "r");
      this.width = J.abs$0$n(J.$index$asx(J.$index$asx(this._data, "dynamic"), "l")) + J.abs$0$n(J.$index$asx(J.$index$asx(this._data, "dynamic"), "r"));
      this.height = J.abs$0$n(J.$index$asx(J.$index$asx(this._data, "dynamic"), "t"));
    }
  },
  $isStreet: true,
  static: {
Street$: function(ID) {
  var t1 = new B.Street(ID, null, null, null, null, null, null, null, null, null, null, null, null);
  t1.Street$1(ID);
  return t1;
}}

},

Street_load_closure: {"": "Closure;layersOrdered_0",
  call$2: function(p, y) {
    return this.layersOrdered_0.push(J.toString$0(p));
  },
  $is_args2: true
},

Street_load_closure0: {"": "Closure;this_1",
  call$2: function(x, y) {
    var t1 = this.this_1;
    return J.compareTo$1$ns(J.$index$asx(J.$index$asx(J.$index$asx(J.$index$asx(t1._data, "dynamic"), "layers"), x), "z"), J.$index$asx(J.$index$asx(J.$index$asx(J.$index$asx(t1._data, "dynamic"), "layers"), y), "z"));
  },
  $is_args2: true
},

Street_load_closure1: {"": "Closure;",
  call$2: function(x, y) {
    return J.compareTo$1$ns(J.$index$asx(x, "z"), J.$index$asx(y, "z"));
  },
  $is_args2: true
},

closure: {"": "Closure;",
  call$1: function(gameLoop) {
    B.loop();
  },
  $is_args1: true
},

closure0: {"": "Closure;",
  call$1: function(gameLoop) {
    B.render();
  },
  $is_args1: true
}},
1],
["dart._collection.dev", "dart:_collection-dev", , H, {
Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
  else
    for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
},

Arrays_indexOf: function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw H.ioore(a, i);
    if (J.$eq(a[i], element))
      return i;
  }
  return -1;
},

Arrays_lastIndexOf: function(a, element, startIndex) {
  var t1, i;
  if (typeof startIndex !== "number")
    throw startIndex.$lt();
  if (startIndex < 0)
    return -1;
  t1 = a.length;
  if (startIndex >= t1)
    startIndex = t1 - 1;
  for (i = startIndex; i >= 0; --i) {
    if (i >= a.length)
      throw H.ioore(a, i);
    if (J.$eq(a[i], element))
      return i;
  }
  return -1;
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(iterable, "JSArray", 0)]); t1.moveNext$0();)
    f.call$1(t1._dev$_current);
},

IterableMixinWorkaround_any: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(iterable, "JSArray", 0)]); t1.moveNext$0();)
    if (f.call$1(t1._dev$_current) === true)
      return true;
  return false;
},

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw H.ioore(t1, i);
    if (t1[i] === iterable)
      return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
  }
  result = P.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

IterableMixinWorkaround_sortList: function(list, compare) {
  H.Sort__doSort(list, 0, list.length - 1, compare);
},

IterableMixinWorkaround_lastIndexOfList: function(list, element, start) {
  return H.Arrays_lastIndexOf(list, element, list.length - 1);
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  if (start < 0 || start > list.length)
    throw H.wrapException(P.RangeError$range(start, 0, list.length));
  if (end < start || end > list.length)
    throw H.wrapException(P.RangeError$range(end, start, list.length));
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length;
  H.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw H.wrapException(new P.ArgumentError(skipCount));
  if (skipCount + $length > from.length)
    throw H.wrapException(P.StateError$("Not enough elements"));
  H.Arrays_copy(from, skipCount, list, start, $length);
},

printToConsole: function(line) {
  if (typeof dartPrint == "function") {
    dartPrint(line);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(line);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(line);
    return;
  }
  throw "Unable to print message: " + String(line);
},

Sort__doSort: function(a, left, right, compare) {
  if (right - left <= 32)
    H.Sort__insertionSort(a, left, right, compare);
  else
    H.Sort__dualPivotQuicksort(a, left, right, compare);
},

Sort__insertionSort: function(a, left, right, compare) {
  var i, t1, el, j, j0;
  for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
        break;
      j0 = j - 1;
      t1.$indexSet(a, j, t1.$index(a, j0));
      j = j0;
    }
    t1.$indexSet(a, j, el);
  }
},

Sort__dualPivotQuicksort: function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
  sixth = C.JSInt_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = C.JSInt_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = J.getInterceptor$asx(a);
  el1 = t1.$index(a, index1);
  el2 = t1.$index(a, index2);
  el3 = t1.$index(a, index3);
  el4 = t1.$index(a, index4);
  el5 = t1.$index(a, index5);
  if (J.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1.$indexSet(a, index1, el1);
  t1.$indexSet(a, index3, el3);
  t1.$indexSet(a, index5, el5);
  t1.$indexSet(a, index2, t1.$index(a, left));
  t1.$indexSet(a, index4, t1.$index(a, right));
  less = left + 1;
  great = right - 1;
  if (J.$eq(compare.call$2(el2, el4), 0)) {
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      comp = compare.call$2(ak, el2);
      t2 = J.getInterceptor(comp);
      if (t2.$eq(comp, 0))
        continue;
      if (t2.$lt(comp, 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          comp = compare.call$2(t1.$index(a, great), el2);
          t2 = J.getInterceptor$n(comp);
          if (t2.$gt(comp, 0)) {
            --great;
            continue;
          } else {
            great0 = great - 1;
            if (t2.$lt(comp, 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
    pivots_are_equal = true;
  } else {
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if (J.$lt$n(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if (J.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;)
          if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    pivots_are_equal = false;
  }
  t2 = less - 1;
  t1.$indexSet(a, left, t1.$index(a, t2));
  t1.$indexSet(a, t2, el2);
  t2 = great + 1;
  t1.$indexSet(a, right, t1.$index(a, t2));
  t1.$indexSet(a, t2, el4);
  H.Sort__doSort(a, left, less - 2, compare);
  H.Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
      ++less;
    for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
      --great;
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if (J.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if (J.$eq(compare.call$2(ak, el4), 0))
        for (; true;)
          if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    H.Sort__doSort(a, less, great, compare);
  } else
    H.Sort__doSort(a, less, great, compare);
},

Symbol_getName: function(symbol) {
  return symbol.get$_name();
},

ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    var t1 = new H.ListIterator(this, this.get$length(this), 0, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
    return t1;
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  get$last: function(_) {
    if (this.get$length(this) === 0)
      throw H.wrapException(new P.StateError("No elements"));
    return this.elementAt$1(this, this.get$length(this) - 1);
  },
  contains$1: function(_, element) {
    var $length, i;
    $length = this.get$length(this);
    for (i = 0; i < $length; ++i) {
      if (J.$eq(this.elementAt$1(this, i), element))
        return true;
      if ($length !== this.get$length(this))
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
    return false;
  },
  map$1: function(_, f) {
    var t1 = new H.MappedListIterable(this, f);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(this, "ListIterable", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = P.List_List(this.get$length(this), H.getRuntimeTypeArgument(this, "ListIterable", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
    }
    for (i = 0; i < this.get$length(this); ++i) {
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

ListIterator: {"": "Object;_iterable,_dev$_length,_index,_dev$_current",
  get$current: function() {
    return this._dev$_current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = J.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (this._dev$_length !== $length)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    t3 = this._index;
    if (t3 >= $length) {
      this._dev$_current = null;
      return false;
    }
    this._dev$_current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t1 = new H.MappedIterator(null, t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "MappedIterable", 0), H.getRuntimeTypeArgument(this, "MappedIterable", 1)]);
    return t1;
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  },
  get$last: function(_) {
    var t1 = this._iterable;
    return this._f$1(t1.get$last(t1));
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._f$1(t1.elementAt$1(t1, index));
  },
  $asIterableBase: function($S, $T) {
    return [$T];
  },
  static: {
MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
  var t1;
  if (!!iterable.$isEfficientLength) {
    t1 = new H.EfficientLengthMappedIterable(iterable, $function);
    H.setRuntimeTypeInfo(t1, [$S, $T]);
    return t1;
  }
  t1 = new H.MappedIterable(iterable, $function);
  H.setRuntimeTypeInfo(t1, [$S, $T]);
  return t1;
}}

},

EfficientLengthMappedIterable: {"": "MappedIterable;_iterable,_f", $asMappedIterable: null, $isEfficientLength: true},

MappedIterator: {"": "Iterator;_dev$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0()) {
      this._dev$_current = this._f$1(t1.get$current());
      return true;
    }
    this._dev$_current = null;
    return false;
  },
  get$current: function() {
    return this._dev$_current;
  },
  $asIterator: function($S, $T) {
    return [$T];
  }
},

MappedListIterable: {"": "ListIterable;_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return J.get$length$asx(this._source);
  },
  elementAt$1: function(_, index) {
    return this._f$1(J.elementAt$1$ax(this._source, index));
  },
  $asListIterable: function($S, $T) {
    return [$T];
  },
  $isEfficientLength: true
},

WhereIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = J.get$iterator$ax(this._iterable);
    t1 = new H.WhereIterator(t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "WhereIterable", 0)]);
    return t1;
  },
  $asIterableBase: null
},

WhereIterator: {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0();)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  $asIterator: null
},

ExpandIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = J.get$iterator$ax(this._iterable);
    t1 = new H.ExpandIterator(t1, this._f, C.C_EmptyIterator, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "ExpandIterable", 0), H.getRuntimeTypeArgument(this, "ExpandIterable", 1)]);
    return t1;
  },
  $asIterableBase: function($S, $T) {
    return [$T];
  }
},

ExpandIterator: {"": "Object;_iterator,_f,_currentExpansion,_dev$_current",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$current: function() {
    return this._dev$_current;
  },
  moveNext$0: function() {
    if (this._currentExpansion == null)
      return false;
    for (var t1 = this._iterator; !this._currentExpansion.moveNext$0();) {
      this._dev$_current = null;
      if (t1.moveNext$0()) {
        this._currentExpansion = null;
        this._currentExpansion = J.get$iterator$ax(this._f$1(t1.get$current()));
      } else
        return false;
    }
    this._dev$_current = this._currentExpansion.get$current();
    return true;
  }
},

EmptyIterator: {"": "Object;",
  moveNext$0: function() {
    return false;
  },
  get$current: function() {
    return;
  }
},

FixedLengthListMixin: {"": "Object;",
  set$length: function(receiver, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
  },
  add$1: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
  },
  addAll$1: function(receiver, iterable) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
  },
  remove$1: function(receiver, element) {
    throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
  }
},

UnmodifiableListMixin: {"": "Object;",
  $indexSet: function(_, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  set$length: function(_, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
  },
  add$1: function(_, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  addAll$1: function(_, iterable) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  remove$1: function(_, element) {
    throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

UnmodifiableListBase: {"": "ListBase+UnmodifiableListMixin;", $asListBase: null, $asList: null, $isList: true, $isEfficientLength: true}}],
["dart._js_names", "dart:_js_names", , H, {
unmangleGlobalNameIfPreservedAnyways: function($name) {
  return init.mangledGlobalNames[$name];
}}],
["dart.async", "dart:async", , P, {
_invokeErrorHandler: function(errorHandler, error, stackTrace) {
  var t1 = J.getInterceptor(errorHandler);
  if (!!t1.$is_args2)
    return errorHandler.call$2(error, stackTrace);
  else
    return errorHandler.call$1(error);
},

_registerErrorHandler: function(errorHandler, zone) {
  var t1 = J.getInterceptor(errorHandler);
  zone.toString;
  if (!!t1.$is_args2)
    return errorHandler;
  else
    return errorHandler;
},

Future_wait: function(futures) {
  var t1, t2, t3, future, pos, t4, t5, result, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new P.Future_wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = new H.ListIterator(futures, futures.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(futures, "JSArray", 0)]); t3.moveNext$0();) {
    future = t3._dev$_current;
    pos = t1.remaining_2;
    t1.remaining_2 = pos + 1;
    t4 = future.catchError$1(t2);
    t5 = $.Zone__current;
    t5.toString;
    result = new P._Future(0, t5, null, null, new P.Future_wait_closure(t1, pos), null, P._registerErrorHandler(null, t5), null);
    result.$builtinTypeInfo = [null];
    t4._addListener$1(result);
  }
  t2 = t1.remaining_2;
  if (t2 === 0)
    return P._Future$immediate(C.List_empty, null);
  t1.values_1 = P.List_List(t2, null);
  t2 = J.JSArray;
  completer = new P._AsyncCompleter(P._Future$(t2));
  H.setRuntimeTypeInfo(completer, [t2]);
  t1.completer_0 = completer;
  return t1.completer_0.future;
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      H.unwrapException(exception);
      milliseconds = C.JSNumber_methods.$tdiv(C.Duration_0._duration, 1000);
      H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  $.get$_asyncCallbacks()._add$1(callback);
  if (!$._callbacksAreEnqueued) {
    P._createTimer(C.Duration_0, P._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

scheduleMicrotask: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    P._scheduleAsyncCallback(callback);
    return;
  }
  P._scheduleAsyncCallback(t1.bindCallback$2$runGuarded(callback, true));
},

StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
  var t1;
  if (onCancel == null)
    return sync ? new P._NoCallbackSyncStreamController(null, 0, null) : new P._NoCallbackAsyncStreamController(null, 0, null);
  if (sync) {
    t1 = new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  } else {
    t1 = new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  }
  return t1;
},

StreamController_StreamController$broadcast: function(onCancel, onListen, sync, $T) {
  var t1;
  if (sync) {
    t1 = new P._SyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$T]);
    t1._async$_previous = t1;
    t1._async$_next = t1;
  } else {
    t1 = new P._AsyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$T]);
    t1._async$_previous = t1;
    t1._async$_next = t1;
  }
  return t1;
},

_runGuarded: function(notificationHandler) {
  var result, e, s, t1, t2, exception;
  if (notificationHandler == null)
    return;
  try {
    result = notificationHandler.call$0();
    t1 = result;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isFuture)
      return result;
    return;
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, e, s);
  }

},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error, stackTrace) {
  var t1 = $.Zone__current;
  t1.toString;
  P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
},

_nullDoneHandler: function() {
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    onError.call$2(e, s);
  }

},

_cancelAndError: function(subscription, future, error, stackTrace) {
  var cancelFuture, t1;
  cancelFuture = subscription.cancel$0();
  t1 = J.getInterceptor(cancelFuture);
  if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
    cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
  else
    future._completeError$2(error, stackTrace);
},

_cancelAndErrorClosure: function(subscription, future) {
  return new P._cancelAndErrorClosure_closure(subscription, future);
},

_cancelAndValue: function(subscription, future, value) {
  var cancelFuture, t1;
  cancelFuture = subscription.cancel$0();
  t1 = J.getInterceptor(cancelFuture);
  if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
    cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
  else
    future._complete$1(value);
},

Timer_Timer: function(duration, callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    return P._createTimer(duration, callback);
  }
  return P._createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
},

_createTimer: function(duration, callback) {
  var milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
  return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

_rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
  P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
},

_rootRun: function($self, $parent, zone, f) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$0();
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$0();
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunUnary: function($self, $parent, zone, f, arg) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$1(arg);
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$1(arg);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$2(arg1, arg2);
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$2(arg1, arg2);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_AsyncError: {"": "Object;error>,stackTrace<", $isError: true},

_BroadcastStream: {"": "_ControllerStream;_controller", $as_ControllerStream: null, $asStream: null},

_BroadcastSubscription: {"": "_ControllerSubscription;_eventState,_async$_next@,_async$_previous?,_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  get$_controller: function() {
    return this._controller;
  },
  _expectsEvent$1: function(eventId) {
    var t1 = this._eventState;
    if (typeof t1 !== "number")
      throw t1.$and();
    return (t1 & 1) === eventId;
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._BroadcastSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._BroadcastSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_ControllerSubscription: null,
  $asStreamSubscription: null,
  static: {
"": "_BroadcastSubscription__STATE_EVENT_ID,_BroadcastSubscription__STATE_FIRING,_BroadcastSubscription__STATE_REMOVE_AFTER_FIRING",
}

},

_BroadcastStreamController: {"": "Object;_async$_next?,_async$_previous?",
  _ensureDoneFuture$0: function() {
    var t1 = this._doneFuture;
    if (t1 != null)
      return t1;
    t1 = P._Future$(null);
    this._doneFuture = t1;
    return t1;
  },
  _addListener$1: function(subscription) {
    subscription._async$_previous = this._async$_previous;
    subscription._async$_next = this;
    this._async$_previous.set$_async$_next(subscription);
    this._async$_previous = subscription;
    subscription._eventState = this._state & 1;
  },
  _removeListener$1: function(subscription) {
    var previous, next;
    previous = subscription._async$_previous;
    next = subscription._async$_next;
    previous.set$_async$_next(next);
    next.set$_async$_previous(previous);
    subscription._async$_previous = subscription;
    subscription._async$_next = subscription;
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, t3, subscription;
    if ((this._state & 4) !== 0)
      throw H.wrapException(new P.StateError("Subscribing to closed stream"));
    t1 = H.getRuntimeTypeArgument(this, "_BroadcastStreamController", 0);
    t2 = $.Zone__current;
    t3 = cancelOnError ? 1 : 0;
    subscription = new P._BroadcastSubscription(null, null, null, this, null, null, null, t2, t3, null, null);
    H.setRuntimeTypeInfo(subscription, [t1]);
    subscription._async$_previous = subscription;
    subscription._async$_next = subscription;
    this._addListener$1(subscription);
    t1 = this._async$_next;
    t2 = this._async$_previous;
    if (t1 == null ? t2 == null : t1 === t2)
      P._runGuarded(this._onListen);
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    var t1;
    if (subscription.get$_async$_next() === subscription)
      return;
    t1 = subscription._eventState;
    if (typeof t1 !== "number")
      throw t1.$and();
    if ((t1 & 2) !== 0)
      subscription._eventState = (t1 | 4) >>> 0;
    else {
      this._removeListener$1(subscription);
      if ((this._state & 2) === 0 && this._async$_next === this)
        this._callOnCancel$0();
    }
  },
  _recordPause$1: function(subscription) {
  },
  _recordResume$1: function(subscription) {
  },
  _addEventError$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add new events after calling close");
    return new P.StateError("Cannot add new events while doing an addStream");
  },
  add$1: function(_, data) {
    if (this._state >= 4)
      throw H.wrapException(this._addEventError$0());
    this._sendData$1(data);
  },
  get$add: function(_receiver) {
    return new F.BoundClosure$i1(this, P._BroadcastStreamController.prototype.add$1, _receiver, "add$1");
  },
  addError$2: function(error, stackTrace) {
    if (this._state >= 4)
      throw H.wrapException(this._addEventError$0());
    this._sendError$2(error, stackTrace);
  },
  get$addError: function() {
    return new P.BoundClosure$2(this, P._BroadcastStreamController.prototype.addError$2, null, "addError$2");
  },
  close$0: function(_) {
    var t1, doneFuture;
    t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._addEventError$0());
    this._state = (t1 | 4) >>> 0;
    doneFuture = this._ensureDoneFuture$0();
    this._sendDone$0();
    return doneFuture;
  },
  _async$_add$1: function(data) {
    this._sendData$1(data);
  },
  _addError$2: function(error, stackTrace) {
    this._sendError$2(error, stackTrace);
  },
  _close$0: function() {
    var addState = this._addStreamState;
    this._addStreamState = null;
    this._state = (this._state & 4294967287) >>> 0;
    C.JSNull_methods.complete$0(addState);
  },
  _forEachListener$1: function(action) {
    var t1, id, link, link0;
    t1 = this._state;
    if ((t1 & 2) !== 0)
      throw H.wrapException(new P.StateError("Cannot fire new event. Controller is already firing an event"));
    if (this._async$_next === this)
      return;
    id = t1 & 1;
    this._state = (t1 ^ 3) >>> 0;
    link = this._async$_next;
    for (; link !== this;)
      if (link._expectsEvent$1(id)) {
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$or();
        link._eventState = (t1 | 2) >>> 0;
        action.call$1(link);
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$xor();
        link._eventState = (t1 ^ 1) >>> 0;
        link0 = link._async$_next;
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$and();
        if ((t1 & 4) !== 0)
          this._removeListener$1(link);
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$and();
        link._eventState = (t1 & 4294967293) >>> 0;
        link = link0;
      } else
        link = link._async$_next;
    this._state = (this._state & 4294967293) >>> 0;
    if (this._async$_next === this)
      this._callOnCancel$0();
  },
  _callOnCancel$0: function() {
    if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
      this._doneFuture._asyncComplete$1(null);
    P._runGuarded(this._onCancel);
  }
},

_SyncBroadcastStreamController: {"": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
  _sendData$1: function(data) {
    if (this._async$_next === this)
      return;
    this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
  },
  _sendError$2: function(error, stackTrace) {
    if (this._async$_next === this)
      return;
    this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
  },
  _sendDone$0: function() {
    if (this._async$_next !== this)
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
    else
      this._doneFuture._asyncComplete$1(null);
  },
  $as_BroadcastStreamController: null
},

_SyncBroadcastStreamController__sendData_closure: {"": "Closure;this_0,data_1",
  call$1: function(subscription) {
    subscription._async$_add$1(this.data_1);
  },
  $is_args1: true
},

_SyncBroadcastStreamController__sendError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$1: function(subscription) {
    subscription._addError$2(this.error_1, this.stackTrace_2);
  },
  $is_args1: true
},

_SyncBroadcastStreamController__sendDone_closure: {"": "Closure;this_0",
  call$1: function(subscription) {
    subscription._close$0();
  },
  $is_args1: true
},

_AsyncBroadcastStreamController: {"": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
  _sendData$1: function(data) {
    var link, t1;
    for (link = this._async$_next; link !== this; link = link._async$_next) {
      t1 = new P._DelayedData(data, null);
      t1.$builtinTypeInfo = [null];
      link._addPending$1(t1);
    }
  },
  _sendError$2: function(error, stackTrace) {
    var link;
    for (link = this._async$_next; link !== this; link = link._async$_next)
      link._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _sendDone$0: function() {
    var link = this._async$_next;
    if (link !== this)
      for (; link !== this; link = link._async$_next)
        link._addPending$1(C.C__DelayedDone);
    else
      this._doneFuture._asyncComplete$1(null);
  },
  $as_BroadcastStreamController: null
},

Future: {"": "Object;", $isFuture: true},

Future_wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
    return;
  },
  $is_args1: true
},

Future_wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    t2[t3] = value;
    t1.remaining_2 = t1.remaining_2 - 1;
    if (t1.remaining_2 === 0) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2 = t2.future;
      if (t2._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t2._asyncComplete$1(t1);
    }
  },
  $is_args1: true
},

_Completer: {"": "Object;"},

_AsyncCompleter: {"": "_Completer;future",
  completeError$2: function(error, stackTrace) {
    var t1;
    if (error == null)
      throw H.wrapException(new P.ArgumentError("Error must not be null"));
    t1 = this.future;
    if (t1._state !== 0)
      throw H.wrapException(P.StateError$("Future already completed"));
    t1._asyncCompleteError$2(error, stackTrace);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  },
  get$completeError: function() {
    return new P.BoundClosure$2(this, P._AsyncCompleter.prototype.completeError$2, null, "completeError$2");
  },
  $as_Completer: null
},

_Future: {"": "Object;_state,_zone<,_resultOrListeners,_nextListener<,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
  get$_isComplete: function() {
    return this._state >= 4;
  },
  get$_hasError: function() {
    return this._state === 8;
  },
  set$_isChained: function(value) {
    if (value)
      this._state = 2;
    else
      this._state = 0;
  },
  get$_onValue: function() {
    return this._state === 2 ? null : this._onValueCallback;
  },
  _onValue$1: function(arg0) {
    return this.get$_onValue().call$1(arg0);
  },
  get$_whenCompleteAction: function() {
    return this._state === 2 ? null : this._whenCompleteActionCallback;
  },
  _whenCompleteAction$0: function() {
    return this.get$_whenCompleteAction().call$0();
  },
  then$2$onError: function(f, onError) {
    var result = P._Future$_then(f, onError, null);
    this._addListener$1(result);
    return result;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(onError, test) {
    var result = P._Future$_catchError(onError, test, null);
    this._addListener$1(result);
    return result;
  },
  catchError$1: function(onError) {
    return this.catchError$2$test(onError, null);
  },
  whenComplete$1: function(action) {
    var result = P._Future$_whenComplete(action, H.getRuntimeTypeArgument(this, "_Future", 0));
    this._addListener$1(result);
    return result;
  },
  get$_value: function() {
    return this._resultOrListeners;
  },
  get$_error: function() {
    return this._resultOrListeners;
  },
  _setValue$1: function(value) {
    this._state = 4;
    this._resultOrListeners = value;
  },
  _setError$2: function(error, stackTrace) {
    this._state = 8;
    this._resultOrListeners = new P._AsyncError(error, stackTrace);
  },
  _addListener$1: function(listener) {
    if (this._state >= 4) {
      this._zone.toString;
      P._scheduleAsyncCallback(new P._Future__addListener_closure(this, listener));
    } else {
      listener._nextListener = this._resultOrListeners;
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current._nextListener = prev;
    }
    return prev;
  },
  _complete$1: function(value) {
    var t1, listeners;
    t1 = J.getInterceptor(value);
    if (typeof value === "object" && value !== null && !!t1.$isFuture) {
      P._Future__chainFutures(value, this);
      return;
    }
    listeners = this._removeListeners$0();
    this._setValue$1(value);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$2: function(error, stackTrace) {
    var listeners = this._removeListeners$0();
    this._setError$2(error, stackTrace);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$1: function(error) {
    return this._completeError$2(error, null);
  },
  get$_completeError: function() {
    return new P.BoundClosure$2(this, P._Future.prototype._completeError$2, null, "_completeError$2");
  },
  _asyncComplete$1: function(value) {
    var t1, t2;
    t1 = J.getInterceptor(value);
    t2 = typeof value === "object" && value !== null && !!t1.$isFuture;
    if (t2)
      ;
    if (t2)
      t1 = typeof value !== "object" || value === null || !t1.$is_Future || value._state < 4;
    else
      t1 = false;
    if (t1) {
      this._complete$1(value);
      return;
    }
    if (this._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncComplete_closure(this, value));
  },
  _asyncCompleteError$2: function(error, stackTrace) {
    if (this._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
  },
  _async$_Future$immediate$1: function(value, $T) {
    this._asyncComplete$1(value);
  },
  $is_Future: true,
  $isFuture: true,
  static: {
"": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR",
_Future$: function($T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$immediate: function(value, $T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._async$_Future$immediate$1(value, $T);
  return t1;
},

_Future$_then: function(onValueCallback, onErrorCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, onValueCallback, null, P._registerErrorHandler(onErrorCallback, t1), null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$_catchError: function(onErrorCallback, errorTestCallback, $T) {
  var t1, t2;
  t1 = $.Zone__current;
  t2 = P._registerErrorHandler(onErrorCallback, t1);
  t1.toString;
  t2 = new P._Future(0, t1, null, null, null, errorTestCallback, t2, null);
  H.setRuntimeTypeInfo(t2, [$T]);
  return t2;
},

_Future$_whenComplete: function(whenCompleteActionCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, null, null, null, whenCompleteActionCallback);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future__chainFutures: function(source, target) {
  var t1;
  target._state = 2;
  t1 = J.getInterceptor(source);
  if (typeof source === "object" && source !== null && !!t1.$is_Future)
    if (source._state >= 4)
      P._Future__propagateToListeners(source, target);
    else
      source._addListener$1(target);
  else
    source.then$2$onError(new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
},

_Future__propagateMultipleListeners: function(source, listeners) {
  var listeners0;
  do {
    listeners0 = listeners.get$_nextListener();
    listeners._nextListener = null;
    P._Future__propagateToListeners(source, listeners);
    if (listeners0 != null) {
      listeners = listeners0;
      continue;
    } else
      break;
  } while (true);
},

_Future__propagateToListeners: function(source, listeners) {
  var t1, t2, hasError, asyncError, t3, t4, t5, chainSource, listeners0;
  t1 = {};
  t1.source_4 = source;
  for (; true;) {
    t2 = {};
    if (!t1.source_4.get$_isComplete())
      return;
    hasError = t1.source_4.get$_hasError();
    if (hasError && listeners == null) {
      t2 = t1.source_4;
      asyncError = t2.get$_error();
      t2 = t2._zone;
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    if (listeners == null)
      return;
    if (listeners._nextListener != null) {
      P._Future__propagateMultipleListeners(t1.source_4, listeners);
      return;
    }
    if (hasError) {
      t3 = t1.source_4.get$_zone();
      t4 = listeners._zone;
      t3.toString;
      t4.toString;
      t3 = t4 == null ? t3 != null : t4 !== t3;
    } else
      t3 = false;
    if (t3) {
      t2 = t1.source_4;
      asyncError = t2.get$_error();
      t2 = t2._zone;
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    t3 = $.Zone__current;
    t4 = listeners._zone;
    if (t3 == null ? t4 != null : t3 !== t4) {
      t4.toString;
      P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure(t1, listeners));
      return;
    }
    t2.listenerHasValue_1 = null;
    t2.listenerValueOrError_2 = null;
    t2.isPropagationAborted_3 = false;
    t4.toString;
    P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure0(t1, t2, hasError, listeners));
    if (t2.isPropagationAborted_3)
      return;
    t3 = t2.listenerHasValue_1 === true;
    if (t3) {
      t4 = t2.listenerValueOrError_2;
      t5 = J.getInterceptor(t4);
      t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
      t4 = t5;
    } else
      t4 = false;
    if (t4) {
      chainSource = t2.listenerValueOrError_2;
      t2 = J.getInterceptor(chainSource);
      if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
        listeners._state = 2;
        t1.source_4 = chainSource;
        continue;
      }
      P._Future__chainFutures(chainSource, listeners);
      return;
    }
    if (t3) {
      listeners0 = listeners._removeListeners$0();
      t2 = t2.listenerValueOrError_2;
      listeners._state = 4;
      listeners._resultOrListeners = t2;
    } else {
      listeners0 = listeners._removeListeners$0();
      asyncError = t2.listenerValueOrError_2;
      t2 = J.get$error$x(asyncError);
      t3 = asyncError.get$stackTrace();
      listeners._state = 8;
      listeners._resultOrListeners = new P._AsyncError(t2, t3);
    }
    t1.source_4 = listeners;
    listeners = listeners0;
  }
}}

},

_Future__addListener_closure: {"": "Closure;this_0,listener_1",
  call$0: function() {
    P._Future__propagateToListeners(this.this_0, this.listener_1);
  },
  $is_void_: true
},

_Future__chainFutures_closure: {"": "Closure;target_0",
  call$1: function(value) {
    this.target_0._complete$1(value);
  },
  $is_args1: true
},

_Future__chainFutures_closure0: {"": "Closure;target_1",
  call$2: function(error, stackTrace) {
    this.target_1._completeError$2(error, stackTrace);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  $is_args2: true,
  $is_args1: true
},

_Future__asyncComplete_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._complete$1(this.value_1);
  },
  $is_void_: true
},

_Future__asyncCompleteError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    this.this_0._completeError$2(this.error_1, this.stackTrace_2);
  },
  $is_void_: true
},

_Future__propagateToListeners_closure: {"": "Closure;box_2,listener_3",
  call$0: function() {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
  },
  $is_void_: true
},

_Future__propagateToListeners_closure0: {"": "Closure;box_2,box_1,hasError_4,listener_5",
  call$0: function() {
    var t1, value, asyncError, test, matchesTest, errorCallback, e, s, t2, t3, t4, exception;
    t1 = {};
    try {
      t2 = this.box_2;
      if (!this.hasError_4) {
        value = t2.source_4.get$_value();
        t2 = this.listener_5;
        t3 = t2._state === 2 ? null : t2._onValueCallback;
        t4 = this.box_1;
        if (t3 != null) {
          t4.listenerValueOrError_2 = t2._onValue$1(value);
          t4.listenerHasValue_1 = true;
        } else {
          t4.listenerValueOrError_2 = value;
          t4.listenerHasValue_1 = true;
        }
      } else {
        asyncError = t2.source_4.get$_error();
        t2 = this.listener_5;
        test = t2._state === 2 ? null : t2._errorTestCallback;
        matchesTest = true;
        if (test != null)
          matchesTest = test.call$1(J.get$error$x(asyncError));
        if (matchesTest === true)
          t3 = (t2._state === 2 ? null : t2._onErrorCallback) != null;
        else
          t3 = false;
        if (t3) {
          errorCallback = t2._state === 2 ? null : t2._onErrorCallback;
          t2 = this.box_1;
          t2.listenerValueOrError_2 = P._invokeErrorHandler(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          t2.listenerHasValue_1 = true;
        } else {
          t2 = this.box_1;
          t2.listenerValueOrError_2 = asyncError;
          t2.listenerHasValue_1 = false;
        }
      }
      t2 = this.listener_5;
      if ((t2._state === 2 ? null : t2._whenCompleteActionCallback) != null) {
        t1.completeResult_0 = t2._whenCompleteAction$0();
        t3 = t1.completeResult_0;
        t4 = J.getInterceptor(t3);
        if (typeof t3 === "object" && t3 !== null && !!t4.$isFuture) {
          t2.set$_isChained(true);
          t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners__closure(this.box_2, t2), new P._Future__propagateToListeners__closure0(t1, t2));
          this.box_1.isPropagationAborted_3 = true;
        }
      }
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      if (this.hasError_4) {
        t1 = J.get$error$x(this.box_2.source_4.get$_error());
        t2 = e;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      t2 = this.box_1;
      if (t1)
        t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
      else
        t2.listenerValueOrError_2 = new P._AsyncError(e, s);
      this.box_1.listenerHasValue_1 = false;
    }

  },
  $is_void_: true
},

_Future__propagateToListeners__closure: {"": "Closure;box_2,listener_6",
  call$1: function(ignored) {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
  },
  $is_args1: true
},

_Future__propagateToListeners__closure0: {"": "Closure;box_0,listener_7",
  call$2: function(error, stackTrace) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.completeResult_0;
    t3 = J.getInterceptor(t2);
    if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
      t1.completeResult_0 = P._Future$(null);
      t1.completeResult_0._setError$2(error, stackTrace);
    }
    P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  $is_args2: true,
  $is_args1: true
},

Stream: {"": "Object;",
  map$1: function(_, convert) {
    var t1 = new P._MapStream(convert, this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
    return t1;
  },
  contains$1: function(_, needle) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSBool);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
    return future;
  },
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = P._Future$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSInt);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
    return future;
  },
  get$isEmpty: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSBool);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
    return future;
  },
  toList$0: function(_) {
    var result, future;
    result = [];
    H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
    future = P._Future$([J.JSArray, H.getRuntimeTypeArgument(this, "Stream", 0)]);
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
    return future;
  },
  get$last: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
    t1.result_0 = null;
    t1.foundResult_1 = false;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_last_closure(t1, this), true, new P.Stream_last_closure0(t1, future), future.get$_completeError());
    return future;
  },
  elementAt$1: function(_, index) {
    var t1, future;
    t1 = {};
    t1.index_0 = index;
    if (t1.index_0 < 0)
      throw H.wrapException(new P.ArgumentError(t1.index_0));
    future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
    t1.subscription_1 = null;
    t1.subscription_1 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_elementAt_closure(t1, this, future), true, new P.Stream_elementAt_closure0(t1, future), future.get$_completeError());
    return future;
  },
  $isStream: true
},

Stream_contains_closure: {"": "Closure;box_0,this_1,needle_2,future_3",
  call$1: function(element) {
    var t1, t2;
    t1 = this.box_0;
    t2 = this.future_3;
    P._runUserCode(new P.Stream_contains__closure(this.needle_2, element), new P.Stream_contains__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription_0, t2));
  },
  $is_args1: true
},

Stream_contains__closure: {"": "Closure;needle_4,element_5",
  call$0: function() {
    return J.$eq(this.element_5, this.needle_4);
  },
  $is_void_: true
},

Stream_contains__closure0: {"": "Closure;box_0,future_6",
  call$1: function(isMatch) {
    if (isMatch === true)
      P._cancelAndValue(this.box_0.subscription_0, this.future_6, true);
  },
  $is_args1: true
},

Stream_contains_closure0: {"": "Closure;future_7",
  call$0: function() {
    this.future_7._complete$1(false);
  },
  $is_void_: true
},

Stream_forEach_closure: {"": "Closure;box_0,this_1,action_2,future_3",
  call$1: function(element) {
    P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
  },
  $is_args1: true
},

Stream_forEach__closure: {"": "Closure;action_4,element_5",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  },
  $is_void_: true
},

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  },
  $is_args1: true
},

Stream_forEach_closure0: {"": "Closure;future_6",
  call$0: function() {
    this.future_6._complete$1(null);
  },
  $is_void_: true
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = t1.count_0 + 1;
  },
  $is_args1: true
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._complete$1(this.box_0.count_0);
  },
  $is_void_: true
},

Stream_isEmpty_closure: {"": "Closure;box_0,future_1",
  call$1: function(_) {
    P._cancelAndValue(this.box_0.subscription_0, this.future_1, false);
  },
  $is_args1: true
},

Stream_isEmpty_closure0: {"": "Closure;future_2",
  call$0: function() {
    this.future_2._complete$1(true);
  },
  $is_void_: true
},

Stream_toList_closure: {"": "Closure;this_0,result_1",
  call$1: function(data) {
    this.result_1.push(data);
  },
  $is_args1: true
},

Stream_toList_closure0: {"": "Closure;result_2,future_3",
  call$0: function() {
    this.future_3._complete$1(this.result_2);
  },
  $is_void_: true
},

Stream_last_closure: {"": "Closure;box_0,this_1",
  call$1: function(value) {
    var t1 = this.box_0;
    t1.foundResult_1 = true;
    t1.result_0 = value;
  },
  $is_args1: true
},

Stream_last_closure0: {"": "Closure;box_0,future_2",
  call$0: function() {
    var t1 = this.box_0;
    if (t1.foundResult_1) {
      this.future_2._complete$1(t1.result_0);
      return;
    }
    this.future_2._completeError$1(new P.StateError("No elements"));
  },
  $is_void_: true
},

Stream_elementAt_closure: {"": "Closure;box_0,this_1,future_2",
  call$1: function(value) {
    var t1, t2;
    t1 = this.box_0;
    t2 = t1.index_0;
    if (t2 === 0) {
      P._cancelAndValue(t1.subscription_1, this.future_2, value);
      return;
    }
    t1.index_0 = t2 - 1;
  },
  $is_args1: true
},

Stream_elementAt_closure0: {"": "Closure;box_0,future_3",
  call$0: function() {
    this.future_3._completeError$1(new P.RangeError("value " + this.box_0.index_0));
  },
  $is_void_: true
},

StreamSubscription: {"": "Object;", $isStreamSubscription: true},

_StreamController: {"": "Object;",
  get$_pendingEvents: function() {
    if ((this._state & 8) === 0)
      return this._varData;
    return this._varData.get$varData();
  },
  _ensurePendingEvents$0: function() {
    if ((this._state & 8) === 0) {
      if (this._varData == null)
        this._varData = new P._StreamImplEvents(null, null, 0);
      return this._varData;
    }
    var t1 = this._varData.get$varData();
    return t1;
  },
  get$_subscription: function() {
    if ((this._state & 8) !== 0)
      return this._varData.get$varData();
    return this._varData;
  },
  _badEventState$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add event after closing");
    return new P.StateError("Cannot add event while adding a stream");
  },
  _ensureDoneFuture$0: function() {
    if (this._doneFuture == null) {
      this._doneFuture = P._Future$(null);
      if ((this._state & 2) !== 0)
        this._doneFuture._complete$1(null);
    }
    return this._doneFuture;
  },
  add$1: function(_, value) {
    if (this._state >= 4)
      throw H.wrapException(this._badEventState$0());
    this._async$_add$1(value);
  },
  close$0: function(_) {
    var t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._badEventState$0());
    this._state = (t1 | 4) >>> 0;
    this._ensureDoneFuture$0();
    t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendDone$0();
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, C.C__DelayedDone);
    }
    return this._doneFuture;
  },
  _async$_add$1: function(value) {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendData$1(value);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t2 = new P._DelayedData(value, null);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "_StreamController", 0)]);
      t1.add$1(t1, t2);
    }
  },
  _addError$2: function(error, stackTrace) {
    var t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendError$2(error, stackTrace);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, new P._DelayedError(error, stackTrace, null));
    }
  },
  _close$0: function() {
    var addState = this._varData;
    this._varData = addState.get$varData();
    this._state = (this._state & 4294967287) >>> 0;
    addState.complete$0(addState);
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, subscription, pendingEvents, addState;
    if ((this._state & 3) !== 0)
      throw H.wrapException(new P.StateError("Stream has already been listened to."));
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    subscription = new P._ControllerSubscription(this, null, null, null, t1, t2, null, null);
    H.setRuntimeTypeInfo(subscription, [null]);
    pendingEvents = this.get$_pendingEvents();
    this._state = (this._state | 1) >>> 0;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.set$varData(subscription);
      addState.resume$0();
    } else
      this._varData = subscription;
    subscription._setPendingEvents$1(pendingEvents);
    subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    var t1, future;
    if ((this._state & 8) !== 0)
      this._varData.cancel$0();
    this._varData = null;
    this._state = (this._state & 4294967286 | 2) >>> 0;
    t1 = new P._StreamController__recordCancel_complete(this);
    future = P._runGuarded(this.get$_onCancel());
    if (future != null)
      future = future.whenComplete$1(t1);
    else
      t1.call$0();
    return future;
  },
  _recordPause$1: function(subscription) {
    var addState;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.pause$0(addState);
    }
    P._runGuarded(this.get$_onPause());
  },
  _recordResume$1: function(subscription) {
    if ((this._state & 8) !== 0)
      this._varData.resume$0();
    P._runGuarded(this.get$_onResume());
  }
},

_StreamController__subscribe_closure: {"": "Closure;this_0",
  call$0: function() {
    P._runGuarded(this.this_0.get$_onListen());
  },
  $is_void_: true
},

_StreamController__recordCancel_complete: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0._doneFuture;
    if (t1 != null && t1._state === 0)
      t1._asyncComplete$1(null);
  },
  $is_void_: true
},

_SyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    this.get$_subscription()._async$_add$1(data);
  },
  _sendError$2: function(error, stackTrace) {
    this.get$_subscription()._addError$2(error, stackTrace);
  },
  _sendDone$0: function() {
    this.get$_subscription()._close$0();
  }
},

_AsyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    var t1, t2;
    t1 = this.get$_subscription();
    t2 = new P._DelayedData(data, null);
    H.setRuntimeTypeInfo(t2, [null]);
    t1._addPending$1(t2);
  },
  _sendError$2: function(error, stackTrace) {
    this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _sendDone$0: function() {
    this.get$_subscription()._addPending$1(C.C__DelayedDone);
  }
},

_AsyncStreamController: {"": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__AsyncStreamControllerDispatch: {"": "_StreamController+_AsyncStreamControllerDispatch;", $as_StreamController: null},

_SyncStreamController: {"": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__SyncStreamControllerDispatch: {"": "_StreamController+_SyncStreamControllerDispatch;", $as_StreamController: null},

_NoCallbacks: {"": "Object;",
  get$_onListen: function() {
    return;
  },
  get$_onPause: function() {
    return;
  },
  get$_onResume: function() {
    return;
  },
  get$_onCancel: function() {
    return;
  }
},

_NoCallbackAsyncStreamController: {"": "_StreamController__AsyncStreamControllerDispatch0+_NoCallbacks;_varData,_state,_doneFuture"},

_StreamController__AsyncStreamControllerDispatch0: {"": "_StreamController+_AsyncStreamControllerDispatch;", $as_StreamController: null},

_NoCallbackSyncStreamController: {"": "_StreamController__SyncStreamControllerDispatch0+_NoCallbacks;_varData,_state,_doneFuture"},

_StreamController__SyncStreamControllerDispatch0: {"": "_StreamController+_SyncStreamControllerDispatch;", $as_StreamController: null},

_ControllerStream: {"": "_StreamImpl;_controller",
  _createSubscription$1: function(cancelOnError) {
    return this._controller._subscribe$1(cancelOnError);
  },
  get$hashCode: function(_) {
    return (H.Primitives_objectHashCode(this._controller) ^ 892482866) >>> 0;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$is_ControllerStream)
      return false;
    return other._controller === this._controller;
  },
  $is_ControllerStream: true,
  $as_StreamImpl: null,
  $asStream: null
},

_ControllerSubscription: {"": "_BufferingStreamSubscription;_controller<,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  _onCancel$0: function() {
    return this.get$_controller()._recordCancel$1(this);
  },
  _onPause$0: function() {
    this.get$_controller()._recordPause$1(this);
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    this.get$_controller()._recordResume$1(this);
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_BufferingStreamSubscription: null,
  $asStreamSubscription: null
},

_EventSink: {"": "Object;"},

_BufferingStreamSubscription: {"": "Object;_async$_onData,_onError,_onDone,_zone<,_state,_cancelFuture,_pending",
  _setPendingEvents$1: function(pendingEvents) {
    if (pendingEvents == null)
      return;
    this._pending = pendingEvents;
    if (!pendingEvents.get$isEmpty(pendingEvents)) {
      this._state = (this._state | 64) >>> 0;
      this._pending.schedule$1(this);
    }
  },
  onData$1: function(handleData) {
    if (handleData == null)
      handleData = P._nullDataHandler$closure;
    $.Zone__current.toString;
    this._async$_onData = handleData;
  },
  onError$1: function(_, handleError) {
    if (handleError == null)
      handleError = P._nullErrorHandler$closure;
    this._onError = P._registerErrorHandler(handleError, $.Zone__current);
  },
  onDone$1: function(handleDone) {
    if (handleDone == null)
      handleDone = P._nullDoneHandler$closure;
    $.Zone__current.toString;
    this._onDone = handleDone;
  },
  pause$1: function(_, resumeSignal) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 + 128 | 4) >>> 0;
    if (t1 < 128 && this._pending != null)
      this._pending.cancelSchedule$0();
    if ((t1 & 4) === 0 && (this._state & 32) === 0)
      this._guardCallback$1(this.get$_onPause());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 >= 128) {
      this._state = t1 - 128;
      t1 = this._state;
      if (t1 < 128) {
        if ((t1 & 64) !== 0) {
          t2 = this._pending;
          t2 = !t2.get$isEmpty(t2);
        } else
          t2 = false;
        if (t2)
          this._pending.schedule$1(this);
        else {
          this._state = (t1 & 4294967291) >>> 0;
          if ((this._state & 32) === 0)
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  cancel$0: function() {
    this._state = (this._state & 4294967279) >>> 0;
    if ((this._state & 8) !== 0)
      return this._cancelFuture;
    this._cancel$0();
    return this._cancelFuture;
  },
  get$_mayResumeInput: function() {
    if (this._state < 128) {
      var t1 = this._pending;
      t1 = t1 == null || t1.get$isEmpty(t1);
    } else
      t1 = false;
    return t1;
  },
  _cancel$0: function() {
    this._state = (this._state | 8) >>> 0;
    if ((this._state & 64) !== 0)
      this._pending.cancelSchedule$0();
    if ((this._state & 32) === 0)
      this._pending = null;
    this._cancelFuture = this._onCancel$0();
  },
  _async$_add$1: function(data) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendData$1(data);
    else {
      t1 = new P._DelayedData(data, null);
      H.setRuntimeTypeInfo(t1, [null]);
      this._addPending$1(t1);
    }
  },
  _addError$2: function(error, stackTrace) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendError$2(error, stackTrace);
    else
      this._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _close$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 | 2) >>> 0;
    if (this._state < 32)
      this._sendDone$0();
    else
      this._addPending$1(C.C__DelayedDone);
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
  },
  _addPending$1: function($event) {
    var pending, t1;
    pending = this._pending;
    if (pending == null) {
      pending = new P._StreamImplEvents(null, null, 0);
      this._pending = pending;
    }
    pending.add$1(pending, $event);
    t1 = this._state;
    if ((t1 & 64) === 0) {
      this._state = (t1 | 64) >>> 0;
      if (this._state < 128)
        this._pending.schedule$1(this);
    }
  },
  _sendData$1: function(data) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    this._zone.runUnaryGuarded$2(this._async$_onData, data);
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendError$2: function(error, stackTrace) {
    var t1, t2, t3;
    t1 = this._state;
    t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
    if ((t1 & 1) !== 0) {
      this._state = (t1 | 16) >>> 0;
      this._cancel$0();
      t1 = this._cancelFuture;
      t3 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t3.$isFuture)
        t1.whenComplete$1(t2);
      else
        t2.call$0();
    } else {
      t2.call$0();
      this._checkState$1((t1 & 4) !== 0);
    }
  },
  _sendDone$0: function() {
    var t1, t2, t3;
    t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
    this._cancel$0();
    this._state = (this._state | 16) >>> 0;
    t2 = this._cancelFuture;
    t3 = J.getInterceptor(t2);
    if (typeof t2 === "object" && t2 !== null && !!t3.$isFuture)
      t2.whenComplete$1(t1);
    else
      t1.call$0();
  },
  _guardCallback$1: function(callback) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _checkState$1: function(wasInputPaused) {
    var t1, t2, isInputPaused;
    t1 = this._state;
    if ((t1 & 64) !== 0) {
      t2 = this._pending;
      t2 = t2.get$isEmpty(t2);
    } else
      t2 = false;
    if (t2) {
      this._state = (t1 & 4294967231) >>> 0;
      if ((this._state & 4) !== 0 && this.get$_mayResumeInput())
        this._state = (this._state & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 32) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967263) >>> 0;
    }
    t1 = this._state;
    if ((t1 & 64) !== 0 && t1 < 128)
      this._pending.schedule$1(this);
  },
  $isStreamSubscription: true,
  static: {
"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT",
}

},

_BufferingStreamSubscription__sendError_sendError: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    var t1, t2, t3, t4, t5;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 8) !== 0 && (t2 & 16) === 0)
      return;
    t1._state = (t2 | 32) >>> 0;
    t2 = t1._zone;
    t3 = $.Zone__current;
    t2.toString;
    t3.toString;
    if (t3 == null ? t2 != null : t3 !== t2)
      P._rootHandleUncaughtError(t3, null, t3, this.error_1, this.stackTrace_2);
    else {
      t3 = t1._onError;
      t4 = J.getInterceptor(t3);
      t5 = this.error_1;
      if (!!t4.$is_args2)
        t2.runBinaryGuarded$3(t3, t5, this.stackTrace_2);
      else
        t2.runUnaryGuarded$2(t3, t5);
    }
    t1._state = (t1._state & 4294967263) >>> 0;
  },
  $is_void_: true
},

_BufferingStreamSubscription__sendDone_sendDone: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 16) === 0)
      return;
    t1._state = (t2 | 42) >>> 0;
    t1._zone.runGuarded$1(t1._onDone);
    t1._state = (t1._state & 4294967263) >>> 0;
  },
  $is_void_: true
},

_StreamImpl: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var subscription = this._createSubscription$1(true === cancelOnError);
    subscription.onData$1(onData);
    subscription.onError$1(subscription, onError);
    subscription.onDone$1(onDone);
    return subscription;
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _createSubscription$1: function(cancelOnError) {
    var t1, t2, t3;
    t1 = H.getRuntimeTypeArgument(this, "_StreamImpl", 0);
    t2 = $.Zone__current;
    t3 = cancelOnError ? 1 : 0;
    t3 = new P._BufferingStreamSubscription(null, null, null, t2, t3, null, null);
    H.setRuntimeTypeInfo(t3, [t1]);
    return t3;
  },
  $asStream: null
},

_DelayedEvent: {"": "Object;next@"},

_DelayedData: {"": "_DelayedEvent;value,next",
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  }
},

_DelayedError: {"": "_DelayedEvent;error>,stackTrace<,next",
  perform$1: function(dispatch) {
    dispatch._sendError$2(this.error, this.stackTrace);
  }
},

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw H.wrapException(new P.StateError("No events after a done."));
  }
},

_PendingEvents: {"": "Object;",
  schedule$1: function(dispatch) {
    var t1 = this._state;
    if (t1 === 1)
      return;
    if (t1 >= 1) {
      this._state = 1;
      return;
    }
    P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  },
  cancelSchedule$0: function() {
    if (this._state === 1)
      this._state = 3;
  }
},

_PendingEvents_schedule_closure: {"": "Closure;this_0,dispatch_1",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1._state;
    t1._state = 0;
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  },
  $is_void_: true
},

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  }
},

_cancelAndError_closure: {"": "Closure;future_0,error_1,stackTrace_2",
  call$0: function() {
    return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
  },
  $is_void_: true
},

_cancelAndErrorClosure_closure: {"": "Closure;subscription_0,future_1",
  call$2: function(error, stackTrace) {
    return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
  },
  $is_args2: true
},

_cancelAndValue_closure: {"": "Closure;future_0,value_1",
  call$0: function() {
    return this.future_0._complete$1(this.value_1);
  },
  $is_void_: true
},

_ForwardingStream: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var result = P._ForwardingStreamSubscription$(this, true === cancelOnError, H.getRuntimeTypeArgument(this, "_ForwardingStream", 0), H.getRuntimeTypeArgument(this, "_ForwardingStream", 1));
    result.onData$1(onData);
    result.onError$1(result, onError);
    result.onDone$1(onDone);
    return result;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _handleData$2: function(data, sink) {
    sink._async$_add$1(data);
  },
  $asStream: function($S, $T) {
    return [$T];
  }
},

_ForwardingStreamSubscription: {"": "_BufferingStreamSubscription;_stream,_subscription,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  _async$_add$1: function(data) {
    if ((this._state & 2) !== 0)
      return;
    P._BufferingStreamSubscription.prototype._async$_add$1.call(this, data);
  },
  _addError$2: function(error, stackTrace) {
    if ((this._state & 2) !== 0)
      return;
    P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
  },
  _onPause$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.pause$0(t1);
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.resume$0();
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      this._subscription = null;
      t1.cancel$0();
    }
    return;
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new H.BoundClosure$1(this, P._ForwardingStreamSubscription.prototype._handleData$1, null, "_handleData$1");
  },
  _handleError$2: function(error, stackTrace) {
    this._addError$2(error, stackTrace);
  },
  get$_handleError: function() {
    return new P.BoundClosure$20(this, P._ForwardingStreamSubscription.prototype._handleError$2, null, "_handleError$2");
  },
  _handleDone$0: function() {
    this._close$0();
  },
  get$_handleDone: function() {
    return new P.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._handleDone$0, null, "_handleDone$0");
  },
  _ForwardingStreamSubscription$2: function(_stream, cancelOnError, $S, $T) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._subscription = this._stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  },
  $as_BufferingStreamSubscription: function($S, $T) {
    return [$T];
  },
  $asStreamSubscription: function($S, $T) {
    return [$T];
  },
  static: {
_ForwardingStreamSubscription$: function(_stream, cancelOnError, $S, $T) {
  var t1, t2;
  t1 = $.Zone__current;
  t2 = cancelOnError ? 1 : 0;
  t2 = new P._ForwardingStreamSubscription(_stream, null, null, null, null, t1, t2, null, null);
  H.setRuntimeTypeInfo(t2, [$S, $T]);
  t2._ForwardingStreamSubscription$2(_stream, cancelOnError, $S, $T);
  return t2;
}}

},

_MapStream: {"": "_ForwardingStream;_transform,_async$_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      sink._addError$2(e, s);
      return;
    }

    sink._async$_add$1(outputEvent);
  },
  $as_ForwardingStream: null,
  $asStream: function($S, $T) {
    return [$T];
  }
},

_BaseZone: {"": "Object;",
  runGuarded$1: function(f) {
    var e, s, t1, exception;
    try {
      t1 = this.run$1(f);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runUnaryGuarded$2: function(f, arg) {
    var e, s, t1, exception;
    try {
      t1 = this.runUnary$2(f, arg);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runBinaryGuarded$3: function(f, arg1, arg2) {
    var e, s, t1, exception;
    try {
      t1 = this.runBinary$3(f, arg1, arg2);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  bindCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindCallback_closure(this, registered);
    else
      return new P._BaseZone_bindCallback_closure0(this, registered);
  },
  bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerUnaryCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindUnaryCallback_closure(this, registered);
    else
      return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
  }
},

_BaseZone_bindCallback_closure: {"": "Closure;this_0,registered_1",
  call$0: function() {
    return this.this_0.runGuarded$1(this.registered_1);
  },
  $is_void_: true
},

_BaseZone_bindCallback_closure0: {"": "Closure;this_2,registered_3",
  call$0: function() {
    return this.this_2.run$1(this.registered_3);
  },
  $is_void_: true
},

_BaseZone_bindUnaryCallback_closure: {"": "Closure;this_0,registered_1",
  call$1: function(arg) {
    return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
  },
  $is_args1: true
},

_BaseZone_bindUnaryCallback_closure0: {"": "Closure;this_2,registered_3",
  call$1: function(arg) {
    return this.this_2.runUnary$2(this.registered_3, arg);
  },
  $is_args1: true
},

_rootHandleUncaughtError_closure: {"": "Closure;error_0,stackTrace_1",
  call$0: function() {
    P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
  },
  $is_void_: true
},

_rootHandleUncaughtError__closure: {"": "Closure;error_2,stackTrace_3",
  call$0: function() {
    var t1, trace, t2;
    t1 = this.error_2;
    P.print("Uncaught Error: " + H.S(t1));
    trace = this.stackTrace_3;
    if (trace == null) {
      t2 = J.getInterceptor(t1);
      t2 = typeof t1 === "object" && t1 !== null && !!t2.$isError;
    } else
      t2 = false;
    if (t2)
      trace = t1.get$stackTrace();
    if (trace != null)
      P.print("Stack Trace: \n" + H.S(trace) + "\n");
    throw H.wrapException(t1);
  },
  $is_void_: true
},

_RootZone: {"": "_BaseZone;",
  $index: function(_, key) {
    return;
  },
  handleUncaughtError$2: function(error, stackTrace) {
    return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
  },
  run$1: function(f) {
    return P._rootRun(this, null, this, f);
  },
  runUnary$2: function(f, arg) {
    return P._rootRunUnary(this, null, this, f, arg);
  },
  runBinary$3: function(f, arg1, arg2) {
    return P._rootRunBinary(this, null, this, f, arg1, arg2);
  },
  registerCallback$1: function(f) {
    return f;
  },
  registerUnaryCallback$1: function(f) {
    return f;
  }
}}],
["dart.collection", "dart:collection", , P, {
_defaultEquals: function(a, b) {
  return J.$eq(a, b);
},

_defaultHashCode: function(a) {
  return J.get$hashCode$(a);
},

HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._HashMap(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

HashSet_HashSet$identity: function($E) {
  var t1 = new P._IdentityHashSet(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

_iterableToString: function(iterable) {
  var parts, t1;
  t1 = $.get$_toStringVisiting();
  if (t1.contains$1(t1, iterable))
    return "(...)";
  t1 = $.get$_toStringVisiting();
  t1.add$1(t1, iterable);
  parts = [];
  try {
    P._iterablePartsToStrings(iterable, parts);
  } finally {
    t1 = $.get$_toStringVisiting();
    t1.remove$1(t1, iterable);
  }
  t1 = P.StringBuffer$("(");
  t1.writeAll$2(parts, ", ");
  t1.write$1(")");
  return t1._contents;
},

_iterablePartsToStrings: function(iterable, parts) {
  var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
  it = iterable.get$iterator(iterable);
  $length = 0;
  count = 0;
  while (true) {
    if (!($length < 80 || count < 3))
      break;
    if (!it.moveNext$0())
      return;
    next = H.S(it.get$current());
    parts.push(next);
    $length += next.length + 2;
    ++count;
  }
  if (!it.moveNext$0()) {
    if (count <= 5)
      return;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    ultimateString = parts.pop();
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    penultimateString = parts.pop();
  } else {
    penultimate = it.get$current();
    ++count;
    if (!it.moveNext$0()) {
      if (count <= 4) {
        parts.push(H.S(penultimate));
        return;
      }
      ultimateString = H.S(penultimate);
      if (0 >= parts.length)
        throw H.ioore(parts, 0);
      penultimateString = parts.pop();
      $length += ultimateString.length + 2;
    } else {
      ultimate = it.get$current();
      ++count;
      for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
        ultimate0 = it.get$current();
        ++count;
        if (count > 100) {
          while (true) {
            if (!($length > 75 && count > 3))
              break;
            if (0 >= parts.length)
              throw H.ioore(parts, 0);
            $length -= parts.pop().length + 2;
            --count;
          }
          parts.push("...");
          return;
        }
      }
      penultimateString = H.S(penultimate);
      ultimateString = H.S(ultimate);
      $length += ultimateString.length + penultimateString.length + 4;
    }
  }
  if (count > parts.length + 2) {
    $length += 5;
    elision = "...";
  } else
    elision = null;
  while (true) {
    if (!($length > 80 && parts.length > 3))
      break;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    $length -= parts.pop().length + 2;
    if (elision == null) {
      $length += 5;
      elision = "...";
    }
  }
  if (elision != null)
    parts.push(elision);
  parts.push(penultimateString);
  parts.push(ultimateString);
},

LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1;
  if (hashCode == null) {
    if (equals == null) {
      t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
      H.setRuntimeTypeInfo(t1, [$K, $V]);
      return t1;
    }
    hashCode = P._defaultHashCode$closure;
  } else {
    if (P.identityHashCode$closure === hashCode && P.identical$closure === equals) {
      t1 = new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0);
      H.setRuntimeTypeInfo(t1, [$K, $V]);
      return t1;
    }
    if (equals == null)
      equals = P._defaultEquals$closure;
  }
  return P._LinkedCustomHashMap$(equals, hashCode, isValidKey, $K, $V);
},

LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
  var t1 = new P._LinkedHashSet(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw H.ioore(t2, i);
    if (t2[i] === m)
      return "{...}";
  }
  result = P.StringBuffer$("");
  try {
    $.get$Maps__toStringList().push(m);
    result.write$1("{");
    t1.first_0 = true;
    J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
    result.write$1("}");
  } finally {
    t1 = $.get$Maps__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

_HashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_collection$_keys",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  get$isNotEmpty: function(_) {
    return this._collection$_length !== 0;
  },
  get$keys: function(_) {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._HashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  containsKey$1: function(_, key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._HashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._HashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        this._collection$_length = this._collection$_length + 1;
        this._collection$_keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._collection$_length = this._collection$_length + 1;
          this._collection$_keys = null;
        }
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      this._collection$_length = this._collection$_length - 1;
      this._collection$_keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._collection$_keys)
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._collection$_keys;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._collection$_keys = result;
    return result;
  },
  _addHashTableEntry$3: function(table, key, value) {
    if (table[key] == null) {
      this._collection$_length = this._collection$_length + 1;
      this._collection$_keys = null;
    }
    P._HashMap__setTableEntry(table, key, value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var value;
    if (table != null && table[key] != null) {
      value = P._HashMap__getTableEntry(table, key);
      delete table[key];
      this._collection$_length = this._collection$_length - 1;
      this._collection$_keys = null;
      return value;
    } else
      return;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if (J.$eq(bucket[i], key))
        return i;
    return -1;
  },
  $isMap: true,
  $asMap: null,
  static: {
_HashMap__getTableEntry: function(table, key) {
  var entry = table[key];
  return entry === table ? null : entry;
},

_HashMap__setTableEntry: function(table, key, value) {
  if (value == null)
    table[key] = table;
  else
    table[key] = value;
},

_HashMap__newHashTable: function() {
  var table = Object.create(null);
  P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
  delete table["<non-identifier-key>"];
  return table;
}}

},

_HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $is_args1: true
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$isEmpty: function(_) {
    return this._map._collection$_length === 0;
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._map;
    t2 = t1._computeKeys$0();
    t2 = new P.HashMapKeyIterator(t1, t2, 0, null);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "HashMapKeyIterable", 0)]);
    return t2;
  },
  contains$1: function(_, element) {
    var t1 = this._map;
    return t1.containsKey$1(t1, element);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._collection$_keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

HashMapKeyIterator: {"": "Object;_map,_collection$_keys,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._collection$_keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._collection$_keys)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  get$isNotEmpty: function(_) {
    return this._collection$_length !== 0;
  },
  get$keys: function(_) {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._LinkedHashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  containsKey$1: function(_, key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_collection$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_collection$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_collection$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._LinkedHashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._LinkedHashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_collection$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_collection$_value();
    }
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
      this._modifications = this._modifications + 1 & 67108863;
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(cell), cell._collection$_value);
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell._next;
    }
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_collection$_value(value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_collection$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new P.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._collection$_length = this._collection$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(J.get$_key$x(bucket[i]), key))
        return i;
    return -1;
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  $isMap: true,
  $asMap: null,
  static: {
_LinkedHashMap__newHashTable: function() {
  var table = Object.create(null);
  table["<non-identifier-key>"] = table;
  delete table["<non-identifier-key>"];
  return table;
}}

},

_LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $is_args1: true
},

_LinkedIdentityHashMap: {"": "_LinkedHashMap;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  _computeHashCode$1: function(key) {
    return H.objectHashCode(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i, t1;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i) {
      t1 = J.get$_key$x(bucket[i]);
      if (t1 == null ? key == null : t1 === key)
        return i;
    }
    return -1;
  },
  $as_LinkedHashMap: null,
  $asMap: null
},

_LinkedCustomHashMap: {"": "_LinkedHashMap;_equals,_hashCode,_validKey,_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  _equals$2: function(arg0, arg1) {
    return this._equals.call$2(arg0, arg1);
  },
  _hashCode$1: function(arg0) {
    return this._hashCode.call$1(arg0);
  },
  _validKey$1: function(arg0) {
    return this._validKey.call$1(arg0);
  },
  $index: function(_, key) {
    if (this._validKey$1(key) !== true)
      return;
    return P._LinkedHashMap.prototype.$index.call(this, this, key);
  },
  containsKey$1: function(_, key) {
    if (this._validKey$1(key) !== true)
      return false;
    return P._LinkedHashMap.prototype.containsKey$1.call(this, this, key);
  },
  remove$1: function(_, key) {
    if (this._validKey$1(key) !== true)
      return;
    return P._LinkedHashMap.prototype.remove$1.call(this, this, key);
  },
  _computeHashCode$1: function(key) {
    return this._hashCode$1(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (this._equals$2(J.get$_key$x(bucket[i]), key) === true)
        return i;
    return -1;
  },
  $as_LinkedHashMap: null,
  $asMap: null,
  static: {
_LinkedCustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
  var t1 = new P._LinkedCustomHashMap_closure($K);
  t1 = new P._LinkedCustomHashMap(_equals, _hashCode, t1, 0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
}}

},

_LinkedCustomHashMap_closure: {"": "Closure;K_0",
  call$1: function(v) {
    var t1 = H.checkSubtypeOfRuntimeType(v, this.K_0);
    return t1;
  },
  $is_args1: true
},

LinkedHashMapCell: {"": "Object;_key>,_collection$_value@,_next@,_previous@"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$isEmpty: function(_) {
    return this._map._collection$_length === 0;
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._map;
    t2 = t1._modifications;
    t2 = new P.LinkedHashMapKeyIterator(t1, t2, null, null);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "LinkedHashMapKeyIterable", 0)]);
    t2._cell = t2._map._first;
    return t2;
  },
  contains$1: function(_, element) {
    var t1 = this._map;
    return t1.containsKey$1(t1, element);
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell.get$_key(cell));
      if (modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = cell._next;
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1.get$_key(t1);
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  }
},

_HashSet: {"": "_HashSetBase;",
  get$iterator: function(_) {
    var t1 = this._computeElements$0();
    t1 = new P.HashSetIterator(this, t1, 0, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashSet", 0)]);
    return t1;
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  get$isNotEmpty: function(_) {
    return this._collection$_length !== 0;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      return nums == null ? false : nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    rest = this._rest;
    if (rest == null)
      return;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return;
    return J.$index$asx(bucket, index);
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      return this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      return this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      this._collection$_length = this._collection$_length + 1;
      this._elements = null;
      return true;
    }
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (typeof object === "string" && object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else if (typeof object === "number" && (object & 0x3ffffff) === object)
      return this._removeHashTableEntry$2(this._nums, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._collection$_length = this._collection$_length - 1;
      this._elements = null;
      bucket.splice(index, 1);
      return true;
    }
  },
  _computeElements$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._elements;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; ++i0) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._elements = result;
    return result;
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return false;
    table[element] = 0;
    this._collection$_length = this._collection$_length + 1;
    this._elements = null;
    return true;
  },
  _removeHashTableEntry$2: function(table, element) {
    if (table != null && table[element] != null) {
      delete table[element];
      this._collection$_length = this._collection$_length - 1;
      this._elements = null;
      return true;
    } else
      return false;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i], element))
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $isEfficientLength: true
},

_IdentityHashSet: {"": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
  _computeHashCode$1: function(key) {
    return H.objectHashCode(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i, t1;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i) {
      t1 = bucket[i];
      if (t1 == null ? element == null : t1 === element)
        return i;
    }
    return -1;
  },
  $as_HashSet: null
},

HashSetIterator: {"": "Object;_set,_elements,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var elements, offset, t1;
    elements = this._elements;
    offset = this._offset;
    t1 = this._set;
    if (elements !== t1._elements)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= elements.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = elements[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashSet: {"": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$iterator: function(_) {
    var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
    H.setRuntimeTypeInfo(t1, [null]);
    t1._cell = t1._set._first;
    return t1;
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  get$isNotEmpty: function(_) {
    return this._collection$_length !== 0;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_collection$_element();
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$1(cell.get$_collection$_element());
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell._next;
    }
  },
  get$last: function(_) {
    var t1 = this._last;
    if (t1 == null)
      throw H.wrapException(new P.StateError("No elements"));
    return t1.get$_collection$_element();
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      return this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      return this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    }
  },
  addAll$1: function(_, objects) {
    var t1;
    for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
      this.add$1(this, t1.get$current());
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (typeof object === "string" && object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else if (typeof object === "number" && (object & 0x3ffffff) === object)
      return this._removeHashTableEntry$2(this._nums, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    }
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return false;
    table[element] = this._newLinkedCell$1(element);
    return true;
  },
  _removeHashTableEntry$2: function(table, element) {
    var cell;
    if (table == null)
      return false;
    cell = table[element];
    if (cell == null)
      return false;
    this._unlinkCell$1(cell);
    delete table[element];
    return true;
  },
  _newLinkedCell$1: function(element) {
    var cell, last;
    cell = new P.LinkedHashSetCell(element, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._collection$_length = this._collection$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_collection$_element(), element))
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $isEfficientLength: true
},

LinkedHashSetCell: {"": "Object;_collection$_element<,_next@,_previous@"},

LinkedHashSetIterator: {"": "Object;_set,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1 = this._set;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1.get$_collection$_element();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  }
},

_HashSetBase: {"": "IterableBase;",
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

IterableBase: {"": "Object;",
  map$1: function(_, f) {
    return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "IterableBase", 0), null);
  },
  contains$1: function(_, element) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      if (J.$eq(t1.get$current(), element))
        return true;
    return false;
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  join$1: function(_, separator) {
    var iterator, buffer, t1;
    iterator = this.get$iterator(this);
    if (!iterator.moveNext$0())
      return "";
    buffer = P.StringBuffer$("");
    if (separator === "")
      do {
        t1 = H.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      } while (iterator.moveNext$0());
    else {
      buffer.write$1(H.S(iterator.get$current()));
      for (; iterator.moveNext$0();) {
        buffer._contents = buffer._contents + separator;
        t1 = H.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      }
    }
    return buffer._contents;
  },
  toList$1$growable: function(_, growable) {
    return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  },
  get$isEmpty: function(_) {
    return !this.get$iterator(this).moveNext$0();
  },
  get$isNotEmpty: function(_) {
    return !this.get$isEmpty(this);
  },
  get$last: function(_) {
    var it, result;
    it = this.get$iterator(this);
    if (!it.moveNext$0())
      throw H.wrapException(P.StateError$("No elements"));
    do
      result = it.get$current();
    while (it.moveNext$0());
    return result;
  },
  get$single: function(_) {
    var it, result;
    it = this.get$iterator(this);
    if (!it.moveNext$0())
      throw H.wrapException(P.StateError$("No elements"));
    result = it.get$current();
    if (it.moveNext$0())
      throw H.wrapException(P.StateError$("More than one element"));
    return result;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw H.wrapException(P.RangeError$value(index));
  },
  toString$0: function(_) {
    return P._iterableToString(this);
  }
},

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    var t1 = new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    return t1;
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $length = this.get$length(receiver);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  get$isNotEmpty: function(receiver) {
    return !this.get$isEmpty(receiver);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) === 0)
      throw H.wrapException(new P.StateError("No elements"));
    return this.$index(receiver, 0);
  },
  get$last: function(receiver) {
    if (this.get$length(receiver) === 0)
      throw H.wrapException(P.StateError$("No elements"));
    return this.$index(receiver, this.get$length(receiver) - 1);
  },
  contains$1: function(receiver, element) {
    var $length, i;
    $length = this.get$length(receiver);
    for (i = 0; i < $length; ++i) {
      if (J.$eq(this.$index(receiver, i), element))
        return true;
      if ($length !== this.get$length(receiver))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
    return false;
  },
  where$1: function(receiver, test) {
    var t1 = new H.WhereIterable(receiver, test);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    return t1;
  },
  map$1: function(receiver, f) {
    var t1 = new H.MappedListIterable(receiver, f);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  toList$1$growable: function(receiver, growable) {
    var result, i, t1;
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(receiver));
    } else {
      result = P.List_List(this.get$length(receiver), H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    }
    for (i = 0; i < this.get$length(receiver); ++i) {
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    this.set$length(receiver, t1 + 1);
    this.$indexSet(receiver, t1, element);
  },
  addAll$1: function(receiver, iterable) {
    var t1, element, t2;
    for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();) {
      element = t1.get$current();
      t2 = this.get$length(receiver);
      this.set$length(receiver, t2 + 1);
      this.$indexSet(receiver, t2, element);
    }
  },
  remove$1: function(receiver, element) {
    var i;
    for (i = 0; i < this.get$length(receiver); ++i)
      if (J.$eq(this.$index(receiver, i), element)) {
        this.setRange$4(receiver, i, this.get$length(receiver) - 1, receiver, i + 1);
        this.set$length(receiver, this.get$length(receiver) - 1);
        return true;
      }
    return false;
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    var $length, t1, i;
    if (start < 0 || start > this.get$length(receiver))
      H.throwExpression(P.RangeError$range(start, 0, this.get$length(receiver)));
    if (end < start || end > this.get$length(receiver))
      H.throwExpression(P.RangeError$range(end, start, this.get$length(receiver)));
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw H.wrapException(new P.ArgumentError(skipCount));
    t1 = J.getInterceptor$asx(iterable);
    if (skipCount + $length > t1.get$length(iterable))
      throw H.wrapException(new P.StateError("Not enough elements"));
    if (skipCount < start)
      for (i = $length - 1; i >= 0; --i)
        this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
    else
      for (i = 0; i < $length; ++i)
        this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
  },
  indexOf$2: function(receiver, element, startIndex) {
    var i;
    if (startIndex >= this.get$length(receiver))
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    for (i = startIndex; i < this.get$length(receiver); ++i)
      if (J.$eq(this.$index(receiver, i), element))
        return i;
    return -1;
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  lastIndexOf$2: function(receiver, element, startIndex) {
    var i;
    startIndex = this.get$length(receiver) - 1;
    for (i = startIndex; i >= 0; --i)
      if (J.$eq(this.$index(receiver, i), element))
        return i;
    return -1;
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  toString$0: function(receiver) {
    var result, t1;
    t1 = $.get$_toStringVisiting();
    if (t1.contains$1(t1, receiver))
      return "[...]";
    result = P.StringBuffer$("");
    try {
      t1 = $.get$_toStringVisiting();
      t1.add$1(t1, receiver);
      result.write$1("[");
      result.writeAll$2(receiver, ", ");
      result.write$1("]");
    } finally {
      t1 = $.get$_toStringVisiting();
      t1.remove$1(t1, receiver);
    }
    return result.get$_contents();
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

Maps_mapToString_closure: {"": "Closure;box_0,result_1",
  call$2: function(k, v) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(k);
    t1.write$1(": ");
    t1.write$1(v);
  },
  $is_args2: true
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return P._ListQueueIterator$(this, H.getRuntimeTypeArgument(this, "ListQueue", 0));
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  get$last: function(_) {
    var t1, t2, t3;
    t1 = this._head;
    t2 = this._tail;
    if (t1 === t2)
      throw H.wrapException(P.StateError$("No elements"));
    t1 = this._table;
    t3 = t1.length;
    t2 = (t2 - 1 & t3 - 1) >>> 0;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    return t1[t2];
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    if (index < 0 || index > this.get$length(this))
      throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
    t1 = this._table;
    t2 = t1.length;
    t3 = (this._head + index & t2 - 1) >>> 0;
    if (t3 < 0 || t3 >= t2)
      throw H.ioore(t1, t3);
    return t1[t3];
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  remove$1: function(_, object) {
    var i, t1;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      if (J.$eq(t1[i], object)) {
        this._remove$1(i);
        this._modificationCount = this._modificationCount + 1;
        return true;
      }
    }
    return false;
  },
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw H.wrapException(P.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _remove$1: function(offset) {
    var t1, t2, mask, t3, t4, i, prevOffset, nextOffset;
    t1 = this._table;
    t2 = t1.length;
    mask = t2 - 1;
    t3 = this._head;
    t4 = this._tail;
    if ((offset - t3 & mask) >>> 0 < (t4 - offset & mask) >>> 0) {
      for (i = offset; i !== t3; i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw H.ioore(t1, prevOffset);
        t4 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw H.ioore(t1, i);
        t1[i] = t4;
      }
      if (t3 < 0 || t3 >= t2)
        throw H.ioore(t1, t3);
      t1[t3] = null;
      this._head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._tail = (t4 - 1 & mask) >>> 0;
      for (t1 = this._tail, t2 = this._table, t3 = t2.length, i = offset; i !== t1; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t3)
          throw H.ioore(t2, nextOffset);
        t4 = t2[nextOffset];
        if (i < 0 || i >= t3)
          throw H.ioore(t2, i);
        t2[i] = t4;
      }
      if (t1 < 0 || t1 >= t3)
        throw H.ioore(t2, t1);
      t2[t1] = null;
      return offset;
    }
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = P.List_List(this._table.length * 2, H.getRuntimeTypeArgument(this, "ListQueue", 0));
    H.setRuntimeTypeInfo(newTable, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  ListQueue$1: function(initialCapacity, $E) {
    var t1 = P.List_List(8, $E);
    H.setRuntimeTypeInfo(t1, [$E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $isEfficientLength: true,
  static: {
"": "ListQueue__INITIAL_CAPACITY",
ListQueue$: function(initialCapacity, $E) {
  var t1 = new P.ListQueue(null, 0, 0, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.ListQueue$1(initialCapacity, $E);
  return t1;
}}

},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      H.throwExpression(P.ConcurrentModificationError$(t1));
    t2 = this._collection$_position;
    if (t2 === this._end) {
      this._collection$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw H.ioore(t3, t2);
    this._collection$_current = t3[t2];
    this._collection$_position = (this._collection$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  static: {
_ListQueueIterator$: function(queue, $E) {
  var t1 = new P._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
}}

}}],
["dart.convert", "dart:convert", , P, {
_convertJsonToDart: function(json, reviver) {
  var revive = new P._convertJsonToDart_closure();
  return revive.call$2(null, new P._convertJsonToDart_walk(revive).call$1(json));
},

_parseJson: function(source, reviver) {
  var parsed, e, t1, exception;
  t1 = source;
  if (typeof t1 !== "string")
    throw H.wrapException(new P.ArgumentError(source));
  parsed = null;
  try {
    parsed = JSON.parse(source);
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    throw H.wrapException(P.FormatException$(String(e)));
  }

  return P._convertJsonToDart(parsed, reviver);
},

_defaultToEncodable: function(object) {
  return object.toJson$0();
},

_convertJsonToDart_closure: {"": "Closure;",
  call$2: function(key, value) {
    return value;
  },
  $is_args2: true
},

_convertJsonToDart_walk: {"": "Closure;revive_0",
  call$1: function(e) {
    var list, t1, i, keys, map, key, proto;
    if (e == null || typeof e != "object")
      return e;
    if (Object.getPrototypeOf(e) === Array.prototype) {
      list = e;
      for (t1 = this.revive_0, i = 0; i < list.length; ++i)
        list[i] = t1.call$2(i, this.call$1(list[i]));
      return list;
    }
    keys = Object.keys(e);
    map = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
      key = keys[i];
      map.$indexSet(map, key, t1.call$2(key, this.call$1(e[key])));
    }
    proto = e.__proto__;
    if (typeof proto !== "undefined" && proto !== Object.prototype)
      map.$indexSet(map, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
    return map;
  },
  $is_args1: true
},

Codec: {"": "Object;"},

Converter: {"": "Object;"},

Encoding: {"": "Codec;",
  $asCodec: function() {
    return [J.JSString, [J.JSArray, J.JSInt]];
  }
},

JsonUnsupportedObjectError: {"": "Error;unsupportedObject,cause",
  toString$0: function(_) {
    if (this.cause != null)
      return "Converting object to an encodable object failed.";
    else
      return "Converting object did not return an encodable object.";
  },
  static: {
JsonUnsupportedObjectError$: function(unsupportedObject, cause) {
  return new P.JsonUnsupportedObjectError(unsupportedObject, cause);
}}

},

JsonCyclicError: {"": "JsonUnsupportedObjectError;unsupportedObject,cause",
  toString$0: function(_) {
    return "Cyclic error in JSON stringify";
  },
  static: {
JsonCyclicError$: function(object) {
  return new P.JsonCyclicError(object, null);
}}

},

JsonCodec: {"": "Codec;",
  decode$2$reviver: function(source, reviver) {
    return P._parseJson(source, C.JsonDecoder_null._reviver);
  },
  decode$1: function(source) {
    return this.decode$2$reviver(source, null);
  },
  encode$2$toEncodable: function(value, toEncodable) {
    return P._JsonStringifier_stringify(value, C.JsonEncoder_null._toEncodableFunction);
  },
  encode$1: function(value) {
    return this.encode$2$toEncodable(value, null);
  },
  $asCodec: function() {
    return [P.Object, J.JSString];
  }
},

JsonEncoder: {"": "Converter;_toEncodableFunction",
  $asConverter: function() {
    return [P.Object, J.JSString];
  }
},

JsonDecoder: {"": "Converter;_reviver",
  $asConverter: function() {
    return [J.JSString, P.Object];
  }
},

_JsonStringifier: {"": "Object;toEncodable,sink,seen",
  toEncodable$1: function(arg0) {
    return this.toEncodable.call$1(arg0);
  },
  checkCycle$1: function(object) {
    var t1 = this.seen;
    if (t1.contains$1(t1, object))
      throw H.wrapException(P.JsonCyclicError$(object));
    t1.add$1(t1, object);
  },
  stringifyValue$1: function(object) {
    var customJson, e, t1, t2, exception;
    if (!this.stringifyJsonValue$1(object)) {
      t1 = object;
      t2 = this.seen;
      if (t2.contains$1(t2, t1))
        H.throwExpression(P.JsonCyclicError$(t1));
      t2.add$1(t2, t1);
      try {
        customJson = this.toEncodable$1(object);
        if (!this.stringifyJsonValue$1(customJson)) {
          t1 = P.JsonUnsupportedObjectError$(object, null);
          throw H.wrapException(t1);
        }
        t2.remove$1(t2, object);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        throw H.wrapException(P.JsonUnsupportedObjectError$(object, e));
      }

    }
  },
  stringifyJsonValue$1: function(object) {
    var t1, t2, i, t3;
    t1 = {};
    if (typeof object === "number") {
      this.sink.write$1(C.JSNumber_methods.toString$0(object));
      return true;
    } else if (object === true) {
      this.sink.write$1("true");
      return true;
    } else if (object === false) {
      this.sink.write$1("false");
      return true;
    } else if (object == null) {
      this.sink.write$1("null");
      return true;
    } else if (typeof object === "string") {
      t1 = this.sink;
      t1.write$1("\"");
      P._JsonStringifier_escape(t1, object);
      t1.write$1("\"");
      return true;
    } else {
      t2 = J.getInterceptor(object);
      if (typeof object === "object" && object !== null && (object.constructor === Array || !!t2.$isList)) {
        this.checkCycle$1(object);
        t1 = this.sink;
        t1.write$1("[");
        if (t2.get$length(object) > 0) {
          this.stringifyValue$1(t2.$index(object, 0));
          for (i = 1; i < t2.get$length(object); ++i) {
            t1._contents = t1._contents + ",";
            this.stringifyValue$1(t2.$index(object, i));
          }
        }
        t1.write$1("]");
        t1 = this.seen;
        t1.remove$1(t1, object);
        return true;
      } else if (typeof object === "object" && object !== null && !!t2.$isMap) {
        this.checkCycle$1(object);
        t3 = this.sink;
        t3.write$1("{");
        t1.first_0 = true;
        t2.forEach$1(object, new P._JsonStringifier_stringifyJsonValue_closure(t1, this));
        t3.write$1("}");
        t3 = this.seen;
        t3.remove$1(t3, object);
        return true;
      } else
        return false;
    }
  },
  static: {
"": "_JsonStringifier_BACKSPACE,_JsonStringifier_TAB,_JsonStringifier_NEWLINE,_JsonStringifier_CARRIAGE_RETURN,_JsonStringifier_FORM_FEED,_JsonStringifier_QUOTE,_JsonStringifier_BACKSLASH,_JsonStringifier_CHAR_b,_JsonStringifier_CHAR_f,_JsonStringifier_CHAR_n,_JsonStringifier_CHAR_r,_JsonStringifier_CHAR_t,_JsonStringifier_CHAR_u",
_JsonStringifier_stringify: function(object, toEncodable) {
  var output;
  toEncodable = P._defaultToEncodable$closure;
  output = P.StringBuffer$("");
  new P._JsonStringifier(toEncodable, output, P.HashSet_HashSet$identity(null)).stringifyValue$1(object);
  return output._contents;
},

_JsonStringifier_escape: function(sb, s) {
  var t1, $length, charCodes, needsEscape, i, charCode, t2;
  t1 = J.getInterceptor$asx(s);
  $length = t1.get$length(s);
  charCodes = P.List_List(null, J.JSInt);
  H.setRuntimeTypeInfo(charCodes, [J.JSInt]);
  if (typeof $length !== "number")
    throw H.iae($length);
  needsEscape = false;
  i = 0;
  for (; i < $length; ++i) {
    charCode = t1.codeUnitAt$1(s, i);
    if (charCode < 32) {
      charCodes.push(92);
      switch (charCode) {
        case 8:
          charCodes.push(98);
          break;
        case 9:
          charCodes.push(116);
          break;
        case 10:
          charCodes.push(110);
          break;
        case 12:
          charCodes.push(102);
          break;
        case 13:
          charCodes.push(114);
          break;
        default:
          charCodes.push(117);
          t2 = C.JSInt_methods.$shr(charCode, 12) & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = C.JSInt_methods.$shr(charCode, 8) & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = C.JSInt_methods.$shr(charCode, 4) & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = charCode & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          break;
      }
      needsEscape = true;
    } else if (charCode === 34 || charCode === 92) {
      charCodes.push(92);
      charCodes.push(charCode);
      needsEscape = true;
    } else
      charCodes.push(charCode);
  }
  sb.write$1(needsEscape ? P.String_String$fromCharCodes(charCodes) : s);
}}

},

_JsonStringifier_stringifyJsonValue_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = this.this_1;
    if (!t1.first_0)
      t2.sink.write$1(",\"");
    else
      t2.sink.write$1("\"");
    t2 = this.this_1;
    t3 = t2.sink;
    P._JsonStringifier_escape(t3, key);
    t3.write$1("\":");
    t2.stringifyValue$1(value);
    t1.first_0 = false;
  },
  $is_args2: true
},

Utf8Codec: {"": "Encoding;_allowMalformed",
  get$name: function(_) {
    return "utf-8";
  },
  get$encoder: function() {
    return new P.Utf8Encoder();
  }
},

Utf8Encoder: {"": "Converter;",
  convert$1: function(string) {
    var t1, t2, encoder;
    t1 = string.length;
    t2 = P.List_List(t1 * 3, J.JSInt);
    H.setRuntimeTypeInfo(t2, [J.JSInt]);
    encoder = new P._Utf8Encoder(0, 0, t2);
    if (encoder._fillBuffer$3(string, 0, t1) !== t1)
      encoder._writeSurrogate$2(C.JSString_methods.codeUnitAt$1(string, t1 - 1), 0);
    return C.JSArray_methods.sublist$2(encoder._buffer, 0, encoder._bufferIndex);
  },
  $asConverter: function() {
    return [J.JSString, [J.JSArray, J.JSInt]];
  }
},

_Utf8Encoder: {"": "Object;_carry,_bufferIndex,_buffer",
  _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
    var t1, t2, rune, t3, t4;
    t1 = this._buffer;
    t2 = this._bufferIndex;
    if ((nextCodeUnit & 64512) === 56320) {
      rune = (65536 + ((leadingSurrogate & 1023) << 10 >>> 0) | nextCodeUnit & 1023) >>> 0;
      this._bufferIndex = t2 + 1;
      t3 = C.JSInt_methods.$shr(rune, 18);
      t4 = t1.length;
      if (t2 < 0 || t2 >= t4)
        throw H.ioore(t1, t2);
      t1[t2] = (240 | t3) >>> 0;
      t3 = this._bufferIndex;
      this._bufferIndex = t3 + 1;
      t2 = C.JSInt_methods.$shr(rune, 12);
      if (t3 < 0 || t3 >= t4)
        throw H.ioore(t1, t3);
      t1[t3] = (128 | t2 & 63) >>> 0;
      t2 = this._bufferIndex;
      this._bufferIndex = t2 + 1;
      t3 = C.JSInt_methods.$shr(rune, 6);
      if (t2 < 0 || t2 >= t4)
        throw H.ioore(t1, t2);
      t1[t2] = (128 | t3 & 63) >>> 0;
      t3 = this._bufferIndex;
      this._bufferIndex = t3 + 1;
      if (t3 < 0 || t3 >= t4)
        throw H.ioore(t1, t3);
      t1[t3] = (128 | rune & 63) >>> 0;
      return true;
    } else {
      this._bufferIndex = t2 + 1;
      t3 = C.JSInt_methods.$shr(leadingSurrogate, 12);
      t4 = t1.length;
      if (t2 < 0 || t2 >= t4)
        throw H.ioore(t1, t2);
      t1[t2] = (224 | t3) >>> 0;
      t3 = this._bufferIndex;
      this._bufferIndex = t3 + 1;
      t2 = C.JSInt_methods.$shr(leadingSurrogate, 6);
      if (t3 < 0 || t3 >= t4)
        throw H.ioore(t1, t3);
      t1[t3] = (128 | t2 & 63) >>> 0;
      t2 = this._bufferIndex;
      this._bufferIndex = t2 + 1;
      if (t2 < 0 || t2 >= t4)
        throw H.ioore(t1, t2);
      t1[t2] = (128 | leadingSurrogate & 63) >>> 0;
      return false;
    }
  },
  _fillBuffer$3: function(str, start, end) {
    var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, t5;
    if (start !== end && (C.JSString_methods.codeUnitAt$1(str, end - 1) & 64512) === 55296)
      --end;
    for (t1 = this._buffer, t2 = t1.length, t3 = str.length, stringIndex = start; stringIndex < end; ++stringIndex) {
      if (stringIndex < 0)
        H.throwExpression(P.RangeError$value(stringIndex));
      if (stringIndex >= t3)
        H.throwExpression(P.RangeError$value(stringIndex));
      codeUnit = str.charCodeAt(stringIndex);
      if (codeUnit <= 127) {
        t4 = this._bufferIndex;
        if (t4 >= t2)
          break;
        this._bufferIndex = t4 + 1;
        if (t4 < 0)
          throw H.ioore(t1, t4);
        t1[t4] = codeUnit;
      } else if ((codeUnit & 64512) === 55296) {
        if (this._bufferIndex + 3 >= t2)
          break;
        stringIndex0 = stringIndex + 1;
        if (stringIndex0 < 0)
          H.throwExpression(P.RangeError$value(stringIndex0));
        if (stringIndex0 >= t3)
          H.throwExpression(P.RangeError$value(stringIndex0));
        if (this._writeSurrogate$2(codeUnit, str.charCodeAt(stringIndex0)))
          stringIndex = stringIndex0;
      } else if (codeUnit <= 2047) {
        t4 = this._bufferIndex;
        t5 = t4 + 1;
        if (t5 >= t2)
          break;
        this._bufferIndex = t5;
        t5 = C.JSInt_methods.$shr(codeUnit, 6);
        if (t4 < 0 || t4 >= t2)
          throw H.ioore(t1, t4);
        t1[t4] = (192 | t5) >>> 0;
        t5 = this._bufferIndex;
        this._bufferIndex = t5 + 1;
        if (t5 < 0 || t5 >= t2)
          throw H.ioore(t1, t5);
        t1[t5] = (128 | codeUnit & 63) >>> 0;
      } else {
        t4 = this._bufferIndex;
        if (t4 + 2 >= t2)
          break;
        this._bufferIndex = t4 + 1;
        t5 = C.JSInt_methods.$shr(codeUnit, 12);
        if (t4 < 0 || t4 >= t2)
          throw H.ioore(t1, t4);
        t1[t4] = (224 | t5) >>> 0;
        t5 = this._bufferIndex;
        this._bufferIndex = t5 + 1;
        t4 = C.JSInt_methods.$shr(codeUnit, 6);
        if (t5 < 0 || t5 >= t2)
          throw H.ioore(t1, t5);
        t1[t5] = (128 | t4 & 63) >>> 0;
        t4 = this._bufferIndex;
        this._bufferIndex = t4 + 1;
        if (t4 < 0 || t4 >= t2)
          throw H.ioore(t1, t4);
        t1[t4] = (128 | codeUnit & 63) >>> 0;
      }
    }
    return stringIndex;
  },
  static: {
"": "_Utf8Encoder__DEFAULT_BYTE_BUFFER_SIZE",
}

}}],
["dart.core", "dart:core", , P, {
_symbolToString: function(symbol) {
  return H.Symbol_getName(symbol);
},

Comparable_compare: function(a, b) {
  return J.compareTo$1$ns(a, b);
},

Error_safeToString: function(object) {
  var buffer, t1, i, codeUnit, t2, charCodes;
  if (typeof object === "number" || typeof object === "boolean" || null == object)
    return J.toString$0(object);
  if (typeof object === "string") {
    buffer = new P.StringBuffer("");
    buffer._contents = "\"";
    for (t1 = object.length, i = 0; i < t1; ++i) {
      codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
      if (codeUnit <= 31)
        if (codeUnit === 10)
          buffer._contents = buffer._contents + "\\n";
        else if (codeUnit === 13)
          buffer._contents = buffer._contents + "\\r";
        else if (codeUnit === 9)
          buffer._contents = buffer._contents + "\\t";
        else {
          buffer._contents = buffer._contents + "\\x";
          if (codeUnit < 16)
            buffer._contents = buffer._contents + "0";
          else {
            buffer._contents = buffer._contents + "1";
            codeUnit -= 16;
          }
          t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
          charCodes = P.List_List$filled(1, t2, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          buffer._contents = buffer._contents + t2;
        }
      else if (codeUnit === 92)
        buffer._contents = buffer._contents + "\\\\";
      else if (codeUnit === 34)
        buffer._contents = buffer._contents + "\\\"";
      else {
        charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t2 = H.Primitives_stringFromCharCodes(charCodes);
        buffer._contents = buffer._contents + t2;
      }
    }
    buffer._contents = buffer._contents + "\"";
    return buffer._contents;
  }
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Exception_Exception: function(message) {
  return new P._ExceptionImplementation(message);
},

identical: function(a, b) {
  return a == null ? b == null : a === b;
},

identityHashCode: function(object) {
  return H.objectHashCode(object);
},

List_List: function($length, $E) {
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + H.S($length) + "."));
  return H.Primitives_newFixedList($length);
},

List_List$filled: function($length, fill, $E) {
  var result, t1, i;
  if ($length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + $length + "."));
  result = H.Primitives_newFixedList($length);
  if ($length !== 0 && true)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

List_List$from: function(other, growable, $E) {
  var list, t1, $length, fixedList, i;
  list = P.List_List(null, $E);
  H.setRuntimeTypeInfo(list, [$E]);
  for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = P.List_List($length, $E);
  H.setRuntimeTypeInfo(fixedList, [$E]);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw H.ioore(list, i);
    fixedList[i] = list[i];
  }
  return fixedList;
},

print: function(object) {
  var line = J.toString$0(object);
  H.printToConsole(line);
},

String_String$fromCharCodes: function(charCodes) {
  return H.Primitives_stringFromCharCodes(charCodes);
},

NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if (t1.i_1 > 0)
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(P._symbolToString(key));
  },
  $is_args2: true
},

Comparable: {"": "Object;"},

DateTime: {"": "Object;millisecondsSinceEpoch<,isUtc",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDateTime)
      return false;
    return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, y, m, d, h, min, sec, ms;
    t1 = new P.DateTime_toString_twoDigits();
    y = new P.DateTime_toString_fourDigits().call$1(H.Primitives_getYear(this));
    m = t1.call$1(H.Primitives_getMonth(this));
    d = t1.call$1(H.Primitives_getDay(this));
    h = t1.call$1(H.Primitives_getHours(this));
    min = t1.call$1(H.Primitives_getMinutes(this));
    sec = t1.call$1(H.Primitives_getSeconds(this));
    ms = new P.DateTime_toString_threeDigits().call$1(H.Primitives_getMilliseconds(this));
    if (this.isUtc)
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms) + "Z";
    else
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms);
  },
  add$1: function(_, duration) {
    return P.DateTime$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch + duration.get$inMilliseconds(), this.isUtc);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
      throw H.wrapException(new P.ArgumentError(millisecondsSinceEpoch));
  },
  DateTime$_now$0: function() {
    H.Primitives_lazyAsJsDate(this);
  },
  $isDateTime: true,
  static: {
"": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH",
DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
  var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
},

DateTime$_now: function() {
  var t1 = new P.DateTime(Date.now(), false);
  t1.DateTime$_now$0();
  return t1;
}}

},

DateTime_toString_fourDigits: {"": "Closure;",
  call$1: function(n) {
    var absN, sign;
    absN = J.abs$0$n(n);
    sign = n < 0 ? "-" : "";
    if (absN >= 1000)
      return H.S(n);
    if (absN >= 100)
      return sign + "0" + H.S(absN);
    if (absN >= 10)
      return sign + "00" + H.S(absN);
    return sign + "000" + H.S(absN);
  },
  $is_args1: true
},

DateTime_toString_threeDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100))
      return H.S(n);
    if (t1.$ge(n, 10))
      return "0" + H.S(n);
    return "00" + H.S(n);
  },
  $is_args1: true
},

DateTime_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  $is_args1: true
},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return P.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
  },
  $tdiv: function(_, quotient) {
    if (quotient === 0)
      throw H.wrapException(P.IntegerDivisionByZeroException$());
    if (typeof quotient !== "number")
      throw H.iae(quotient);
    return P.Duration$(0, 0, C.JSNumber_methods.$tdiv(this._duration, quotient), 0, 0, 0);
  },
  $lt: function(_, other) {
    return C.JSNumber_methods.$lt(this._duration, other.get$_duration());
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $le: function(_, other) {
    return C.JSNumber_methods.$le(this._duration, other.get$_duration());
  },
  $ge: function(_, other) {
    return C.JSNumber_methods.$ge(this._duration, other.get$_duration());
  },
  get$inMilliseconds: function() {
    return C.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new P.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
    twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 60000000), 60));
    twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 1000000), 60));
    sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
    return H.S(C.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
  },
  $isDuration: true,
  static: {
"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO",
Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
}}

},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return H.S(n);
    if (t1.$ge(n, 10000))
      return "0" + H.S(n);
    if (t1.$ge(n, 1000))
      return "00" + H.S(n);
    if (t1.$ge(n, 100))
      return "000" + H.S(n);
    if (t1.$gt(n, 10))
      return "0000" + H.S(n);
    return "00000" + H.S(n);
  },
  $is_args1: true
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  $is_args1: true
},

Error: {"": "Object;",
  get$stackTrace: function() {
    return new H._StackTrace(this.$thrownJsError, null);
  },
  $isError: true
},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message>",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + H.S(t1);
    return "Illegal argument(s)";
  },
  static: {
ArgumentError$: function(message) {
  return new P.ArgumentError(message);
}}

},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + H.S(this.message);
  },
  static: {
RangeError$: function(message) {
  return new P.RangeError(message);
},

RangeError$value: function(value) {
  return new P.RangeError("value " + H.S(value));
},

RangeError$range: function(value, start, end) {
  return new P.RangeError("value " + H.S(value) + " not in range " + start + ".." + H.S(end));
}}

},

UnsupportedError: {"": "Error;message>",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  },
  static: {
UnsupportedError$: function(message) {
  return new P.UnsupportedError(message);
}}

},

UnimplementedError: {"": "Error;message>",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
  },
  $isError: true,
  static: {
UnimplementedError$: function(message) {
  return new P.UnimplementedError(message);
}}

},

StateError: {"": "Error;message>",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  },
  static: {
StateError$: function(message) {
  return new P.StateError(message);
}}

},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
  },
  static: {
ConcurrentModificationError$: function(modifiedObject) {
  return new P.ConcurrentModificationError(modifiedObject);
}}

},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  get$stackTrace: function() {
    return;
  },
  $isError: true
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  },
  static: {
CyclicInitializationError$: function(variableName) {
  return new P.CyclicInitializationError(variableName);
}}

},

_ExceptionImplementation: {"": "Object;message>",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + H.S(t1);
  }
},

FormatException: {"": "Object;message>",
  toString$0: function(_) {
    return "FormatException: " + H.S(this.message);
  },
  $isFormatException: true,
  static: {
FormatException$: function(message) {
  return new P.FormatException(message);
}}

},

IntegerDivisionByZeroException: {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  static: {
IntegerDivisionByZeroException$: function() {
  return new P.IntegerDivisionByZeroException();
}}

},

Expando: {"": "Object;name>",
  toString$0: function(_) {
    return "Expando:" + H.S(this.name);
  },
  $index: function(_, object) {
    var values = H.Primitives_getProperty(object, "expando$values");
    return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = H.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new P.Object();
      H.Primitives_setProperty(object, "expando$values", values);
    }
    H.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = H.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      key = "expando$key$" + t1;
      H.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  static: {
"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount",
}

},

Function: {"": "Object;"},

Iterator: {"": "Object;"},

Map: {"": "Object;", $isMap: true, $asMap: null},

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return H.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return H.Primitives_objectToString(this);
  },
  get$runtimeType: function(_) {
    return new H.TypeImpl(H.getRuntimeTypeString(this), null);
  },
  $isObject: true
},

Match: {"": "Object;", $isMatch: true},

StackTrace: {"": "Object;"},

StringBuffer: {"": "Object;_contents<",
  get$length: function(_) {
    return this._contents.length;
  },
  get$isEmpty: function(_) {
    return this._contents.length === 0;
  },
  get$isNotEmpty: function(_) {
    return this._contents.length !== 0;
  },
  write$1: function(obj) {
    var str = typeof obj === "string" ? obj : H.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = J.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(iterator.get$current());
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new P.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

},

Symbol: {"": "Object;"},

Uri: {"": "Object;_host,_port,_path,scheme,userInfo,query,fragment,_pathSegments,_queryParameters",
  get$host: function(_) {
    var t1, t2;
    t1 = this._host;
    if (t1 != null && J.startsWith$1$s(t1, "[")) {
      t2 = J.getInterceptor$asx(t1);
      return t2.substring$2(t1, 1, J.$sub$n(t2.get$length(t1), 1));
    }
    return t1;
  },
  get$port: function(_) {
    var t1, t2;
    if (J.$eq(this._port, 0)) {
      t1 = this.scheme;
      t2 = J.getInterceptor(t1);
      if (t2.$eq(t1, "http"))
        return 80;
      if (t2.$eq(t1, "https"))
        return 443;
    }
    return this._port;
  },
  _makePath$2: function(path, pathSegments) {
    var t1, result;
    t1 = path == null;
    if (t1 && true)
      return "";
    t1 = !t1;
    if (t1)
      ;
    if (t1)
      result = P.Uri__normalize(path);
    else {
      t1 = C.JSNull_methods.map$1(pathSegments, new P.Uri__makePath_closure());
      result = t1.join$1(t1, "/");
    }
    if (!J.$eq(this.get$host(this), "") || J.$eq(this.scheme, "file")) {
      t1 = J.getInterceptor$asx(result);
      t1 = t1.get$isNotEmpty(result) && !t1.startsWith$1(result, "/");
    } else
      t1 = false;
    if (t1)
      return "/" + H.S(result);
    return result;
  },
  _merge$2: function(base, reference) {
    var t1 = J.getInterceptor(base);
    if (t1.$eq(base, ""))
      return "/" + H.S(reference);
    return t1.substring$2(base, 0, t1.lastIndexOf$1(base, "/") + 1) + H.S(reference);
  },
  _hasDotSegments$1: function(path) {
    var t1 = J.getInterceptor$asx(path);
    if (J.$gt$n(t1.get$length(path), 0) && t1.codeUnitAt$1(path, 0) === 58)
      return true;
    return t1.indexOf$1(path, "/.") !== -1;
  },
  _removeDotSegments$1: function(path) {
    var output, t1, t2, appendSlash, segment;
    if (!this._hasDotSegments$1(path))
      return path;
    output = [];
    for (t1 = J.split$1$s(path, "/"), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), appendSlash = false; t2.moveNext$0();) {
      segment = t2._dev$_current;
      if (J.$eq(segment, "..")) {
        t1 = output.length;
        if (t1 !== 0)
          if (t1 === 1) {
            if (0 >= t1)
              throw H.ioore(output, 0);
            t1 = !J.$eq(output[0], "");
          } else
            t1 = true;
        else
          t1 = false;
        if (t1) {
          if (0 >= output.length)
            throw H.ioore(output, 0);
          output.pop();
        }
        appendSlash = true;
      } else if ("." === segment)
        appendSlash = true;
      else {
        output.push(segment);
        appendSlash = false;
      }
    }
    if (appendSlash)
      output.push("");
    return C.JSArray_methods.join$1(output, "/");
  },
  resolveUri$1: function(reference) {
    var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, t1, t2;
    targetScheme = reference.scheme;
    if (!J.$eq(targetScheme, "")) {
      targetUserInfo = reference.userInfo;
      targetHost = reference.get$host(reference);
      targetPort = reference.get$port(reference);
      targetPath = this._removeDotSegments$1(reference._path);
      targetQuery = reference.query;
    } else {
      if (!J.$eq(reference.get$host(reference), "")) {
        targetUserInfo = reference.userInfo;
        targetHost = reference.get$host(reference);
        targetPort = reference.get$port(reference);
        targetPath = this._removeDotSegments$1(reference._path);
        targetQuery = reference.query;
      } else {
        if (J.$eq(reference._path, "")) {
          targetPath = this._path;
          targetQuery = reference.query;
          targetQuery = !J.$eq(targetQuery, "") ? targetQuery : this.query;
        } else {
          t1 = J.startsWith$1$s(reference._path, "/");
          t2 = reference._path;
          targetPath = t1 ? this._removeDotSegments$1(t2) : this._removeDotSegments$1(this._merge$2(this._path, t2));
          targetQuery = reference.query;
        }
        targetUserInfo = this.userInfo;
        targetHost = this.get$host(this);
        targetPort = this.get$port(this);
      }
      targetScheme = this.scheme;
    }
    return P.Uri$(reference.fragment, targetHost, targetPath, null, targetPort, targetQuery, null, targetScheme, targetUserInfo);
  },
  _writeAuthority$1: function(ss) {
    var t1 = this.userInfo;
    if ("" !== t1) {
      ss.write$1(t1);
      ss.write$1("@");
    }
    t1 = this._host;
    ss.write$1(t1 == null ? "null" : t1);
    if (!J.$eq(this._port, 0)) {
      ss.write$1(":");
      ss.write$1(J.toString$0(this._port));
    }
  },
  toString$0: function(_) {
    var sb, t1;
    sb = P.StringBuffer$("");
    t1 = this.scheme;
    if ("" !== t1) {
      sb.write$1(t1);
      sb.write$1(":");
    }
    if (!J.$eq(this.get$host(this), "") || J.$eq(t1, "file")) {
      sb.write$1("//");
      this._writeAuthority$1(sb);
    }
    sb.write$1(this._path);
    t1 = this.query;
    if ("" !== t1) {
      sb.write$1("?");
      sb.write$1(t1);
    }
    t1 = this.fragment;
    if ("" !== t1) {
      sb.write$1("#");
      sb.write$1(t1);
    }
    return sb._contents;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isUri)
      return false;
    return J.$eq(this.scheme, other.scheme) && J.$eq(this.userInfo, other.userInfo) && J.$eq(this.get$host(this), t1.get$host(other)) && J.$eq(this.get$port(this), t1.get$port(other)) && J.$eq(this._path, other._path) && J.$eq(this.query, other.query) && J.$eq(this.fragment, other.fragment);
  },
  get$hashCode: function(_) {
    var t1 = new P.Uri_hashCode_combine();
    return t1.call$2(this.scheme, t1.call$2(this.userInfo, t1.call$2(this.get$host(this), t1.call$2(this.get$port(this), t1.call$2(this._path, t1.call$2(this.query, t1.call$2(this.fragment, 1)))))));
  },
  Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
    var t1 = J.getInterceptor(scheme);
    if (t1.$eq(scheme, "http") && J.$eq(port, 80))
      this._port = 0;
    else if (t1.$eq(scheme, "https") && J.$eq(port, 443))
      this._port = 0;
    else
      this._port = port;
    this._path = this._makePath$2(path, pathSegments);
  },
  $isUri: true,
  static: {
"": "Uri__splitRe,Uri__COMPONENT_SCHEME,Uri__COMPONENT_USER_INFO,Uri__COMPONENT_HOST,Uri__COMPONENT_HOST_IPV6,Uri__COMPONENT_PORT,Uri__COMPONENT_PATH,Uri__COMPONENT_QUERY_DATA,Uri__COMPONENT_FRAGMENT,Uri__DOUBLE_QUOTE,Uri__PERCENT,Uri__ASTERISK,Uri__PLUS,Uri__SLASH,Uri__ZERO,Uri__NINE,Uri__COLON,Uri__LESS,Uri__GREATER,Uri__QUESTION,Uri__AT_SIGN,Uri__UPPER_CASE_A,Uri__UPPER_CASE_F,Uri__UPPER_CASE_Z,Uri__LEFT_BRACKET,Uri__BACKSLASH,Uri__RIGHT_BRACKET,Uri__LOWER_CASE_A,Uri__LOWER_CASE_F,Uri__LOWER_CASE_Z,Uri__BAR,Uri__unreservedTable,Uri__unreserved2396Table,Uri__encodeFullTable,Uri__schemeTable,Uri__schemeLowerTable,Uri__subDelimitersTable,Uri__pathCharTable,Uri__queryCharTable",
Uri$_fromMatch: function(m) {
  var t1, t2, t3, t4, t5, t6, t7, t8;
  t1 = m._match;
  if (1 >= t1.length)
    throw H.ioore(t1, 1);
  t2 = t1[1];
  t2 = P.Uri__makeScheme(t2 != null ? t2 : "");
  t3 = t1.length;
  if (2 >= t3)
    throw H.ioore(t1, 2);
  t4 = t1[2];
  t4 = t4 != null ? t4 : "";
  if (3 >= t3)
    throw H.ioore(t1, 3);
  t5 = t1[3];
  if (4 >= t3)
    throw H.ioore(t1, 4);
  t5 = P.Uri__eitherOf(t5, t1[4]);
  if (5 >= t3)
    throw H.ioore(t1, 5);
  t3 = P.Uri__parseIntOrZero(t1[5]);
  t6 = t1.length;
  if (6 >= t6)
    throw H.ioore(t1, 6);
  t7 = t1[6];
  t7 = t7 != null ? t7 : "";
  if (7 >= t6)
    throw H.ioore(t1, 7);
  t8 = t1[7];
  t8 = t8 != null ? t8 : "";
  if (8 >= t6)
    throw H.ioore(t1, 8);
  t1 = t1[8];
  t1 = t1 != null ? t1 : "";
  t6 = P.Uri__makeScheme(t2);
  t6 = new P.Uri(P.Uri__makeHost(t5), null, null, t6, t4, P.Uri__makeQuery(t8, null), P.Uri__makeFragment(t1), null, null);
  t6.Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo(t1, t5, t7, null, t3, t8, null, t2, t4);
  return t6;
},

Uri$: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
  var t1 = P.Uri__makeScheme(scheme);
  t1 = new P.Uri(P.Uri__makeHost(host), null, null, t1, userInfo, P.Uri__makeQuery(query, queryParameters), P.Uri__makeFragment(fragment), null, null);
  t1.Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo);
  return t1;
},

Uri__makeHost: function(host) {
  var t1, i;
  if (host == null || J.get$isEmpty$asx(host) === true)
    return host;
  if (J.getInterceptor$s(host).codeUnitAt$1(host, 0) === 91) {
    t1 = host.length - 1;
    if (C.JSString_methods.codeUnitAt$1(host, t1) !== 93)
      throw H.wrapException(P.FormatException$("Missing end `]` to match `[` in host"));
    P.Uri_parseIPv6Address(C.JSString_methods.substring$2(host, 1, t1));
    return host;
  }
  for (t1 = host.length, i = 0; i < t1; ++i) {
    if (i >= t1)
      H.throwExpression(P.RangeError$value(i));
    if (host.charCodeAt(i) === 58) {
      P.Uri_parseIPv6Address(host);
      return "[" + host + "]";
    }
  }
  return host;
},

Uri__makeScheme: function(scheme) {
  var t1, t2, t3, $length, allLowercase, i, codeUnit, t4;
  t1 = new P.Uri__makeScheme_isSchemeLowerCharacter();
  t2 = new P.Uri__makeScheme_isSchemeCharacter();
  if (scheme == null)
    return "";
  t3 = J.getInterceptor$asx(scheme);
  $length = t3.get$length(scheme);
  if (typeof $length !== "number")
    throw H.iae($length);
  allLowercase = true;
  i = 0;
  for (; i < $length; ++i) {
    codeUnit = t3.codeUnitAt$1(scheme, i);
    if (i === 0) {
      if (!(codeUnit >= 97 && codeUnit <= 122))
        t4 = codeUnit >= 65 && codeUnit <= 90;
      else
        t4 = true;
      t4 = !t4;
    } else
      t4 = false;
    if (t4)
      throw H.wrapException(new P.ArgumentError("Illegal scheme: " + scheme));
    if (t1.call$1(codeUnit) !== true) {
      if (t2.call$1(codeUnit) === true)
        ;
      else
        throw H.wrapException(new P.ArgumentError("Illegal scheme: " + scheme));
      allLowercase = false;
    }
  }
  return allLowercase ? scheme : t3.toLowerCase$0(scheme);
},

Uri__makeQuery: function(query, queryParameters) {
  var t1, t2, result;
  t1 = {};
  t2 = query == null;
  if (t2 && true)
    return "";
  t2 = !t2;
  if (t2)
    ;
  if (t2)
    return P.Uri__normalize(query);
  result = P.StringBuffer$("");
  t1.first_0 = true;
  C.JSNull_methods.forEach$1(queryParameters, new P.Uri__makeQuery_closure(t1, result));
  return result._contents;
},

Uri__makeFragment: function(fragment) {
  if (fragment == null)
    return "";
  return P.Uri__normalize(fragment);
},

Uri__normalize: function(component) {
  var t1, t2, t3, t4, t5, t6, $length, t7, t8, codeUnit1, codeUnit2, decodedCodeUnit, t9, charCodes;
  t1 = {};
  t2 = new P.Uri__normalize_isNormalizedHexDigit();
  t3 = new P.Uri__normalize_isUnreserved();
  t4 = new P.Uri__normalize_normalizeHexDigit(component, t2, new P.Uri__normalize_isLowerCaseHexDigit());
  t5 = new P.Uri__normalize_decodeHexDigitPair(component);
  t1.result_0 = null;
  t6 = J.getInterceptor$asx(component);
  $length = t6.get$length(component);
  t1.index_1 = 0;
  t1.prevIndex_2 = 0;
  t7 = new P.Uri__normalize_fillResult(t1, component);
  if (typeof $length !== "number")
    throw H.iae($length);
  for (; t8 = t1.index_1, t8 < $length;)
    if (t6.codeUnitAt$1(component, t8) === 37) {
      t8 = t1.index_1;
      if ($length < t8 + 2)
        throw H.wrapException(new P.ArgumentError("Invalid percent-encoding in URI component: " + component));
      codeUnit1 = C.JSString_methods.codeUnitAt$1(component, t8 + 1);
      codeUnit2 = C.JSString_methods.codeUnitAt$1(component, t1.index_1 + 2);
      decodedCodeUnit = t5.call$1(t1.index_1 + 1);
      if (t2.call$1(codeUnit1) === true && t2.call$1(codeUnit2) === true && t3.call$1(decodedCodeUnit) !== true)
        t1.index_1 = t1.index_1 + 3;
      else {
        t7.call$0();
        t8 = t3.call$1(decodedCodeUnit);
        t9 = t1.result_0;
        if (t8 === true) {
          t9.toString;
          charCodes = P.List_List$filled(1, decodedCodeUnit, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t8 = H.Primitives_stringFromCharCodes(charCodes);
          t9._contents = t9._contents + t8;
        } else {
          t9.toString;
          t9._contents = t9._contents + "%";
          t8 = t1.result_0;
          t9 = t4.call$1(t1.index_1 + 1);
          t8.toString;
          charCodes = P.List_List$filled(1, t9, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t9 = H.Primitives_stringFromCharCodes(charCodes);
          t8._contents = t8._contents + t9;
          t8 = t1.result_0;
          t9 = t4.call$1(t1.index_1 + 2);
          t8.toString;
          charCodes = P.List_List$filled(1, t9, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t9 = H.Primitives_stringFromCharCodes(charCodes);
          t8._contents = t8._contents + t9;
        }
        t1.index_1 = t1.index_1 + 3;
        t1.prevIndex_2 = t1.index_1;
      }
    } else
      t1.index_1 = t1.index_1 + 1;
  if (t1.result_0 != null && t1.prevIndex_2 !== t8)
    t7.call$0();
  t1 = t1.result_0;
  if (t1 == null)
    return component;
  return J.toString$0(t1);
},

Uri__parseIntOrZero: function(val) {
  if (val != null && !J.$eq(val, ""))
    return H.Primitives_parseInt(val, null, null);
  else
    return 0;
},

Uri__eitherOf: function(val1, val2) {
  if (val1 != null)
    return val1;
  if (val2 != null)
    return val2;
  return "";
},

Uri_parseIPv4Address: function(host) {
  var t1, bytes;
  t1 = new P.Uri_parseIPv4Address_error();
  bytes = host.split(".");
  if (bytes.length !== 4)
    t1.call$1("IPv4 address should contain exactly 4 parts");
  t1 = new H.MappedListIterable(bytes, new P.Uri_parseIPv4Address_closure(t1));
  H.setRuntimeTypeInfo(t1, [null, null]);
  return t1.toList$0(t1);
},

Uri_parseIPv6Address: function(host) {
  var error, parseHex, parts, partStart, last, wildcardSeen, i, t1, t2, atEnd, isLastWildcard, exception, $arguments;
  error = new P.Uri_parseIPv6Address_error();
  parseHex = new P.Uri_parseIPv6Address_parseHex(host, error);
  if (J.get$length$asx(host) < 2)
    error.call$1("address is too short");
  parts = [];
  partStart = 0;
  wildcardSeen = false;
  i = 0;
  while (true) {
    t1 = J.get$length$asx(host);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (!(i < t1))
      break;
    t1 = host;
    t2 = J.get$length$asx(t1);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (i >= t2)
      H.throwExpression(P.RangeError$value(i));
    if (t1.charCodeAt(i) === 58) {
      if (i === 0) {
        ++i;
        t1 = host;
        if (i >= J.get$length$asx(t1))
          H.throwExpression(P.RangeError$value(i));
        if (t1.charCodeAt(i) !== 58)
          error.call$1("invalid start colon.");
        partStart = i;
      }
      if (i === partStart) {
        if (wildcardSeen)
          error.call$1("only one wildcard `::` is allowed");
        J.add$1$ax(parts, -1);
        wildcardSeen = true;
      } else
        J.add$1$ax(parts, parseHex.call$2(partStart, i));
      partStart = i + 1;
    }
    ++i;
  }
  if (J.get$length$asx(parts) === 0)
    error.call$1("too few parts");
  atEnd = J.$eq(partStart, J.get$length$asx(host));
  isLastWildcard = J.$eq(J.get$last$ax(parts), -1);
  if (atEnd && !isLastWildcard)
    error.call$1("expected a part after last `:`");
  if (!atEnd)
    try {
      J.add$1$ax(parts, parseHex.call$2(partStart, J.get$length$asx(host)));
    } catch (exception) {
      H.unwrapException(exception);
      try {
        last = P.Uri_parseIPv4Address(J.substring$1$s(host, partStart));
        t1 = J.$index$asx(last, 0);
        if (typeof t1 !== "number")
          throw t1.$shl();
        t2 = J.$index$asx(last, 1);
        if (typeof t2 !== "number")
          throw H.iae(t2);
        J.add$1$ax(parts, (t1 << 8 | t2) >>> 0);
        t2 = J.$index$asx(last, 2);
        if (typeof t2 !== "number")
          throw t2.$shl();
        t1 = J.$index$asx(last, 3);
        if (typeof t1 !== "number")
          throw H.iae(t1);
        J.add$1$ax(parts, (t2 << 8 | t1) >>> 0);
      } catch (exception) {
        H.unwrapException(exception);
        error.call$1("invalid end of IPv6 address.");
      }

    }

  if (wildcardSeen) {
    if (J.get$length$asx(parts) > 7)
      error.call$1("an address with a wildcard must have less than 7 parts");
  } else if (J.get$length$asx(parts) !== 8)
    error.call$1("an address without a wildcard must contain exactly 8 parts");
  t1 = new H.ExpandIterable(parts, new P.Uri_parseIPv6Address_closure(parts));
  t1.$builtinTypeInfo = [null, null];
  $arguments = H.substitute(t1.$asIterableBase, H.getRuntimeTypeInfo(t1));
  t2 = $arguments == null ? null : $arguments[0];
  return P.List_List$from(t1, true, t2);
},

Uri__uriEncode: function(canonicalTable, text, spaceToPlus) {
  var t1, result, t2, t3, i, t4, ch, nextCh, charCodes, str;
  t1 = new P.Uri__uriEncode_byteToHex();
  result = P.StringBuffer$("");
  t2 = J.getInterceptor$asx(text);
  t3 = text.length;
  i = 0;
  while (true) {
    t4 = t2.get$length(text);
    if (typeof t4 !== "number")
      throw H.iae(t4);
    if (!(i < t4))
      break;
    ch = t2.codeUnitAt$1(text, i);
    if (ch < 128) {
      t4 = C.JSInt_methods.$shr(ch, 4);
      if (t4 < 0 || t4 >= 8)
        throw H.ioore(canonicalTable, t4);
      t4 = (canonicalTable[t4] & C.JSInt_methods.$shl(1, ch & 15)) >>> 0 !== 0;
    } else
      t4 = false;
    if (t4) {
      if (i >= t3)
        throw H.ioore(text, i);
      t4 = text[i];
      result._contents = result._contents + t4;
    } else {
      if (spaceToPlus) {
        if (i >= t3)
          throw H.ioore(text, i);
        t4 = text[i] === " ";
      } else
        t4 = false;
      if (t4)
        result._contents = result._contents + "+";
      else {
        if (ch >= 55296 && ch < 56320) {
          ++i;
          if (t3 === i)
            nextCh = 0;
          else {
            if (i >= t3)
              H.throwExpression(P.RangeError$value(i));
            nextCh = text.charCodeAt(i);
          }
          if (nextCh >= 56320 && nextCh < 57344)
            ch = 65536 + (ch - 55296 << 10 >>> 0) + (nextCh - 56320);
          else
            throw H.wrapException(new P.ArgumentError("Malformed URI"));
        }
        charCodes = P.List_List$filled(1, ch, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t4 = H.Primitives_stringFromCharCodes(charCodes);
        t4 = C.JSArray_methods.get$iterator(C.Utf8Codec_false.get$encoder().convert$1(t4));
        for (; t4.moveNext$0();) {
          str = t1.call$1(t4._dev$_current);
          str = typeof str === "string" ? str : H.S(str);
          result._contents = result._contents + str;
        }
      }
    }
    ++i;
  }
  return result._contents;
}}

},

Uri__makeScheme_isSchemeLowerCharacter: {"": "Closure;",
  call$1: function(ch) {
    var t1;
    if (J.getInterceptor$n(ch).$lt(ch, 128)) {
      if (typeof ch !== "number")
        throw ch.$shr();
      t1 = C.JSNumber_methods.$shr(ch, 4);
      if (t1 < 0 || t1 >= 8)
        throw H.ioore(C.List_6Pr, t1);
      t1 = (C.List_6Pr[t1] & C.JSInt_methods.$shl(1, ch & 15)) >>> 0 !== 0;
    } else
      t1 = false;
    return t1;
  },
  $is_args1: true
},

Uri__makeScheme_isSchemeCharacter: {"": "Closure;",
  call$1: function(ch) {
    var t1;
    if (J.getInterceptor$n(ch).$lt(ch, 128)) {
      if (typeof ch !== "number")
        throw ch.$shr();
      t1 = C.JSNumber_methods.$shr(ch, 4);
      if (t1 < 0 || t1 >= 8)
        throw H.ioore(C.List_JYB, t1);
      t1 = (C.List_JYB[t1] & C.JSInt_methods.$shl(1, ch & 15)) >>> 0 !== 0;
    } else
      t1 = false;
    return t1;
  },
  $is_args1: true
},

Uri__makePath_closure: {"": "Closure;",
  call$1: function(s) {
    return P.Uri__uriEncode(C.List_qg4, s, false);
  },
  $is_args1: true
},

Uri__makeQuery_closure: {"": "Closure;box_0,result_1",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1("&");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(P.Uri__uriEncode(C.List_nxB, key, true));
    if (value != null && J.get$isEmpty$asx(value) !== true) {
      t1.write$1("=");
      t1.write$1(P.Uri__uriEncode(C.List_nxB, value, true));
    }
  },
  $is_args2: true
},

Uri__normalize_isNormalizedHexDigit: {"": "Closure;",
  call$1: function(digit) {
    var t1;
    if (typeof digit !== "number")
      throw H.iae(digit);
    if (!(48 <= digit && digit <= 57))
      t1 = 65 <= digit && digit <= 70;
    else
      t1 = true;
    return t1;
  },
  $is_args1: true
},

Uri__normalize_isLowerCaseHexDigit: {"": "Closure;",
  call$1: function(digit) {
    if (typeof digit !== "number")
      throw H.iae(digit);
    return 97 <= digit && digit <= 102;
  },
  $is_args1: true
},

Uri__normalize_isUnreserved: {"": "Closure;",
  call$1: function(ch) {
    var t1;
    if (J.getInterceptor$n(ch).$lt(ch, 128)) {
      if (typeof ch !== "number")
        throw ch.$shr();
      t1 = C.JSNumber_methods.$shr(ch, 4);
      if (t1 < 0 || t1 >= 8)
        throw H.ioore(C.List_nxB, t1);
      t1 = (C.List_nxB[t1] & C.JSInt_methods.$shl(1, ch & 15)) >>> 0 !== 0;
    } else
      t1 = false;
    return t1;
  },
  $is_args1: true
},

Uri__normalize_normalizeHexDigit: {"": "Closure;component_1,isNormalizedHexDigit_2,isLowerCaseHexDigit_3",
  call$1: function(index) {
    var t1, codeUnit;
    t1 = this.component_1;
    codeUnit = J.codeUnitAt$1$s(t1, index);
    if (this.isLowerCaseHexDigit_3.call$1(codeUnit) === true)
      return codeUnit - 32;
    else if (this.isNormalizedHexDigit_2.call$1(codeUnit) !== true)
      throw H.wrapException(new P.ArgumentError("Invalid URI component: " + t1));
    else
      return codeUnit;
  },
  $is_args1: true
},

Uri__normalize_decodeHexDigitPair: {"": "Closure;component_4",
  call$1: function(index) {
    var t1, t2, t3, $byte, i, codeUnit;
    for (t1 = this.component_4, t2 = J.getInterceptor$ns(index), t3 = J.getInterceptor$s(t1), $byte = 0, i = 0; i < 2; ++i) {
      codeUnit = t3.codeUnitAt$1(t1, t2.$add(index, i));
      if (48 <= codeUnit && codeUnit <= 57)
        $byte = $byte * 16 + codeUnit - 48;
      else {
        codeUnit = (codeUnit | 32) >>> 0;
        if (97 <= codeUnit && codeUnit <= 102)
          $byte = $byte * 16 + codeUnit - 97 + 10;
        else
          throw H.wrapException(new P.ArgumentError("Invalid percent-encoding in URI component: " + t1));
      }
    }
    return $byte;
  },
  $is_args1: true
},

Uri__normalize_fillResult: {"": "Closure;box_0,component_5",
  call$0: function() {
    var t1, t2, t3, t4, t5;
    t1 = this.box_0;
    t2 = t1.result_0;
    t3 = t1.prevIndex_2;
    t4 = this.component_5;
    t5 = t1.index_1;
    if (t2 == null)
      t1.result_0 = P.StringBuffer$(J.substring$2$s(t4, t3, t5));
    else
      t2.write$1(J.substring$2$s(t4, t3, t5));
  },
  $is_void_: true
},

Uri_hashCode_combine: {"": "Closure;",
  call$2: function(part, current) {
    var t1 = J.$add$ns(J.$mul$n(current, 31), J.get$hashCode$(part));
    if (typeof t1 !== "number")
      throw t1.$and();
    return t1 & 1073741823;
  },
  $is_args2: true
},

Uri_parseIPv4Address_error: {"": "Closure;",
  call$1: function(msg) {
    throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + H.S(msg)));
  },
  $is_args1: true
},

Uri_parseIPv4Address_closure: {"": "Closure;error_0",
  call$1: function(byteString) {
    var $byte, t1;
    $byte = H.Primitives_parseInt(byteString, null, null);
    t1 = J.getInterceptor$n($byte);
    if (t1.$lt($byte, 0) || t1.$gt($byte, 255))
      this.error_0.call$1("each part must be in the range of `0..255`");
    return $byte;
  },
  $is_args1: true
},

Uri_parseIPv6Address_error: {"": "Closure;",
  call$1: function(msg) {
    throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + H.S(msg)));
  },
  $is_args1: true
},

Uri_parseIPv6Address_parseHex: {"": "Closure;host_0,error_1",
  call$2: function(start, end) {
    var value, t1;
    if (J.$gt$n(J.$sub$n(end, start), 4))
      this.error_1.call$1("an IPv6 part can only contain a maximum of 4 hex digits");
    value = H.Primitives_parseInt(C.JSString_methods.substring$2(this.host_0, start, end), 16, null);
    t1 = J.getInterceptor$n(value);
    if (t1.$lt(value, 0) || t1.$gt(value, 65535))
      this.error_1.call$1("each part must be in the range of `0x0..0xFFFF`");
    return value;
  },
  $is_args2: true
},

Uri_parseIPv6Address_closure: {"": "Closure;parts_2",
  call$1: function(value) {
    if (J.getInterceptor(value).$eq(value, -1))
      return P.List_List$filled((9 - this.parts_2.length) * 2, 0, null);
    else {
      if (typeof value !== "number")
        throw value.$shr();
      return [C.JSNumber_methods.$shr(value, 8) & 255, value & 255];
    }
  },
  $is_args1: true
},

Uri__uriEncode_byteToHex: {"": "Closure;",
  call$1: function(v) {
    var t1;
    if (typeof v !== "number")
      throw v.$shr();
    t1 = C.JSNumber_methods.$shr(v, 4);
    if (t1 < 0 || t1 >= 16)
      throw H.ioore("0123456789ABCDEF", t1);
    return "%" + "0123456789ABCDEF"[t1] + "0123456789ABCDEF"[v & 15];
  },
  $is_args1: true
}}],
["dart.dom.html", "dart:html", , W, {
AnchorElement_AnchorElement: function(href) {
  var e = document.createElement("a", null);
  return e;
},

AudioElement_AudioElement: function(src) {
  if (src != null)
    return new Audio(src);
  return new Audio();
},

CanvasElement_CanvasElement: function(height, width) {
  var e = document.createElement("canvas", null);
  return e;
},

Element_Element$html: function(html, treeSanitizer, validator) {
  var fragment, t1;
  fragment = J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator);
  fragment.toString;
  t1 = new W._ChildNodeListLazy(fragment);
  t1 = t1.where$1(t1, new W.Element_Element$html_closure());
  return t1.get$single(t1);
},

Element__determineMouseWheelEventType: function(e) {
  if (e.onwheel !== undefined)
    return "wheel";
  else if (e.onmousewheel !== undefined)
    return "mousewheel";
  else
    return "DOMMouseScroll";
},

_ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
  return document.createElement(tag);
},

HttpRequest_getString: function(url, onProgress, withCredentials) {
  return W.HttpRequest_request(url, null, null, onProgress, null, null, null, withCredentials).then$1(new W.HttpRequest_getString_closure());
},

HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
  var t1, completer, xhr;
  t1 = W.HttpRequest;
  completer = new P._AsyncCompleter(P._Future$(t1));
  H.setRuntimeTypeInfo(completer, [t1]);
  xhr = new XMLHttpRequest();
  C.HttpRequest_methods.open$3$async(xhr, "GET", url, true);
  C.EventStreamProvider_load.forTarget$1(xhr).listen$1(new W.HttpRequest_request_closure(completer, xhr));
  C.EventStreamProvider_error.forTarget$1(xhr).listen$1(completer.get$completeError());
  xhr.send();
  return completer.future;
},

ImageElement_ImageElement: function(height, src, width) {
  var e = document.createElement("img", null);
  if (src != null)
    J.set$src$x(e, src);
  return e;
},

InputElement_InputElement: function(type) {
  var e, exception;
  e = document.createElement("input", null);
  if (type != null)
    try {
      J.set$type$x(e, type);
    } catch (exception) {
      H.unwrapException(exception);
    }

  return e;
},

WebSocket_WebSocket: function(url, protocol_OR_protocols) {
  var t1;
  return new WebSocket(url);
  t1 = H.checkSubtype(protocol_OR_protocols, "$isList", [J.JSString], "$asList");
  if (!t1)
    ;
  return new WebSocket(url, protocol_OR_protocols);
},

Window__isDartLocation: function(thing) {
  var t1, t2, exception;
  try {
    t1 = thing;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isLocation;
  } catch (exception) {
    H.unwrapException(exception);
    return false;
  }

},

_JenkinsSmiHash_combine: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

_convertNativeToDart_EventTarget: function(e) {
  var $window, t1;
  if (e == null)
    return;
  if ("setInterval" in e) {
    $window = W._DOMWindowCrossFrame__createSafe(e);
    t1 = J.getInterceptor($window);
    if (typeof $window === "object" && $window !== null && !!t1.$isEventTarget)
      return $window;
    return;
  } else
    return e;
},

_wrapZone: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone)
    return callback;
  return t1.bindUnaryCallback$2$runGuarded(callback, true);
},

HtmlElement: {"": "Element;", "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseFontElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"},

AnchorElement: {"": "HtmlElement;hostname=,href},port=,protocol=,target=,type%",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "HTMLAnchorElement"
},

AreaElement: {"": "HtmlElement;hostname=,href},port=,protocol=,target=", "%": "HTMLAreaElement"},

AudioElement: {"": "MediaElement;", "%": "HTMLAudioElement"},

BaseElement: {"": "HtmlElement;href},target=", "%": "HTMLBaseElement"},

BeforeLoadEvent: {"": "Event;url=", "%": "BeforeLoadEvent"},

BeforeUnloadEvent: {"": "Event;", "%": "BeforeUnloadEvent"},

Blob: {"": "Interceptor;type=", "%": ";Blob"},

BodyElement: {"": "HtmlElement;",
  get$onError: function(receiver) {
    return C.EventStreamProvider_error0.forElement$1(receiver);
  },
  get$onLoad: function(receiver) {
    return C.EventStreamProvider_load0.forElement$1(receiver);
  },
  $isBodyElement: true,
  "%": "HTMLBodyElement"
},

ButtonElement: {"": "HtmlElement;name%,type%,value%", "%": "HTMLButtonElement"},

CanvasElement: {"": "HtmlElement;height%,width%",
  get$context2D: function(receiver) {
    return receiver.getContext("2d");
  },
  "%": "HTMLCanvasElement"
},

CharacterData: {"": "Node;data=,length=", "%": "CDATASection|Comment|Text;CharacterData"},

CloseEvent: {"": "Event;", $isCloseEvent: true, "%": "CloseEvent"},

CompositionEvent: {"": "UIEvent;data=", "%": "CompositionEvent"},

CssStyleDeclaration: {"": "Interceptor_CssStyleDeclarationBase;length=",
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = receiver.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      H.unwrapException(exception);
    }

  },
  "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
},

DivElement: {"": "HtmlElement;", $isDivElement: true, "%": "HTMLDivElement"},

Document: {"": "Node;",
  get$onClick: function(receiver) {
    return C.EventStreamProvider_click.forTarget$1(receiver);
  },
  "%": "Document|HTMLDocument|SVGDocument"
},

DocumentFragment: {"": "Node;",
  get$children: function(receiver) {
    var t1;
    if (receiver._children == null) {
      t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
      H.setRuntimeTypeInfo(t1, [null]);
      receiver._children = t1;
    }
    return receiver._children;
  },
  get$innerHtml: function(receiver) {
    var e, t1;
    e = W._ElementFactoryProvider_createElement_tag("div", null);
    t1 = J.getInterceptor$x(e);
    t1.append$1(e, this.clone$1(receiver, true));
    return t1.get$innerHtml(e);
  },
  "%": ";DocumentFragment"
},

DomError: {"": "Interceptor;message=,name=", "%": "DOMError|FileError"},

DomException: {"": "Interceptor;message=",
  get$name: function(receiver) {
    var errorName = receiver.name;
    if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
      return "SecurityError";
    if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
      return "SyntaxError";
    return errorName;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "DOMException"
},

Element: {"": "Node;className%,id=,style=",
  get$attributes: function(receiver) {
    return new W._ElementAttributeMap(receiver);
  },
  get$children: function(receiver) {
    return new W._ChildrenElementList(receiver, receiver.children);
  },
  get$classes: function(receiver) {
    return new W._ElementCssClassSet(receiver);
  },
  toString$0: function(receiver) {
    return receiver.localName;
  },
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var t1, t2, base, contextElement, fragment;
    if (treeSanitizer == null) {
      if (validator == null) {
        if ($.Element__defaultValidator == null) {
          t1 = [];
          H.setRuntimeTypeInfo(t1, [W.NodeValidator]);
          t1 = new W.NodeValidatorBuilder(t1);
          t2 = t1._validators;
          t2.push(W._Html5NodeValidator$(null));
          t2.push(W._TemplatingNodeValidator$());
          $.Element__defaultValidator = t1;
        }
        validator = $.Element__defaultValidator;
      }
      t1 = $.Element__defaultSanitizer;
      if (t1 == null)
        $.Element__defaultSanitizer = new W._ValidatingTreeSanitizer(validator);
      else
        t1.validator = validator;
      treeSanitizer = $.Element__defaultSanitizer;
    } else if (validator != null)
      throw H.wrapException(new P.ArgumentError("validator can only be passed if treeSanitizer is null"));
    if ($.Element__parseDocument == null) {
      $.Element__parseDocument = document.implementation.createHTMLDocument("");
      $.Element__parseRange = $.Element__parseDocument.createRange();
      base = $.Element__parseDocument.createElement("base", null);
      J.set$href$x(base, document.baseURI);
      $.Element__parseDocument.head.appendChild(base);
    }
    t1 = $.Element__parseDocument;
    if (!!this.$isBodyElement)
      contextElement = t1.body;
    else {
      contextElement = t1.createElement(receiver.tagName, null);
      $.Element__parseDocument.body.appendChild(contextElement);
    }
    if ("createContextualFragment" in window.Range.prototype) {
      $.Element__parseRange.selectNodeContents(contextElement);
      fragment = $.Element__parseRange.createContextualFragment(html);
    } else {
      contextElement.innerHTML = html;
      fragment = $.Element__parseDocument.createDocumentFragment();
      for (; t1 = contextElement.firstChild, t1 != null;)
        fragment.appendChild(t1);
    }
    t1 = $.Element__parseDocument.body;
    if (contextElement == null ? t1 != null : contextElement !== t1)
      J.remove$0$ax(contextElement);
    treeSanitizer.sanitizeTree$1(fragment);
    document.adoptNode(fragment);
    return fragment;
  },
  createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
    return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
  },
  set$innerHtml: function(receiver, html) {
    this.setInnerHtml$1(receiver, html);
  },
  setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    receiver.textContent = null;
    receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
  },
  setInnerHtml$1: function($receiver, html) {
    return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
  },
  setInnerHtml$2$validator: function($receiver, html, validator) {
    return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, validator);
  },
  setInnerHtml$2$treeSanitizer: function($receiver, html, treeSanitizer) {
    return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
  },
  get$innerHtml: function(receiver) {
    return receiver.innerHTML;
  },
  get$onClick: function(receiver) {
    return C.EventStreamProvider_click.forElement$1(receiver);
  },
  get$onError: function(receiver) {
    return C.EventStreamProvider_error0.forElement$1(receiver);
  },
  get$onLoad: function(receiver) {
    return C.EventStreamProvider_load0.forElement$1(receiver);
  },
  $isElement: true,
  "%": ";Element"
},

EmbedElement: {"": "HtmlElement;height%,name%,src},type%,width%", "%": "HTMLEmbedElement"},

ErrorEvent: {"": "Event;error=,message=", "%": "ErrorEvent"},

Event: {"": "Interceptor;timeStamp=,type=",
  get$target: function(receiver) {
    return W._convertNativeToDart_EventTarget(receiver.target);
  },
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  },
  $isEvent: true,
  "%": "AudioProcessingEvent|AutocompleteErrorEvent|CSSFontFaceLoadEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent;Event"
},

EventTarget: {"": "Interceptor;",
  addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  $isEventTarget: true,
  "%": "Performance;EventTarget"
},

FieldSetElement: {"": "HtmlElement;name%,type=", "%": "HTMLFieldSetElement"},

File: {"": "Blob;name=", "%": "File"},

FormElement: {"": "HtmlElement;length=,name%,target=", "%": "HTMLFormElement"},

HtmlCollection: {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(P.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
},

HttpRequest: {"": "HttpRequestEventTarget;responseText=",
  open$5$async$password$user: function(receiver, method, url, async, password, user) {
    return receiver.open(method, url, async, user, password);
  },
  open$3$async: function($receiver, method, url, async) {
    return $receiver.open(method, url, async);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  $isHttpRequest: true,
  "%": "XMLHttpRequest"
},

HttpRequestEventTarget: {"": "EventTarget;", "%": ";XMLHttpRequestEventTarget"},

IFrameElement: {"": "HtmlElement;height%,name%,src},width%", "%": "HTMLIFrameElement"},

ImageElement: {"": "HtmlElement;height%,src},width%", "%": "HTMLImageElement"},

InputElement: {"": "HtmlElement;checked%,height%,name%,src},type%,value%,width%", $isInputElement: true, $isElement: true, $isNode: true, $isEventTarget: true, $isRadioButtonInputElement: true, $isCheckboxInputElement: true, $isTextInputElement: true, "%": "HTMLInputElement"},

KeyboardEvent: {"": "UIEvent;",
  get$keyCode: function(receiver) {
    return receiver.keyCode;
  },
  $isKeyboardEvent: true,
  "%": "KeyboardEvent"
},

KeygenElement: {"": "HtmlElement;name%,type=", "%": "HTMLKeygenElement"},

LIElement: {"": "HtmlElement;value%", "%": "HTMLLIElement"},

LinkElement: {"": "HtmlElement;href},type%",
  import$3: function($receiver, arg0, arg1, arg2) {
    return this.import.call$3(arg0, arg1, arg2);
  },
  "%": "HTMLLinkElement"
},

Location: {"": "Interceptor;hostname=,port=,protocol=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isLocation: true,
  "%": "Location"
},

MapElement: {"": "HtmlElement;name%", "%": "HTMLMapElement"},

MediaElement: {"": "HtmlElement;error=,loop},src},volume}",
  loop$1: function($receiver, arg0) {
    return this.loop.call$1(arg0);
  },
  volume$1: function($receiver, arg0) {
    return this.volume.call$1(arg0);
  },
  load$0: function(receiver) {
    return receiver.load();
  },
  pause$0: function(receiver) {
    return receiver.pause();
  },
  play$0: function(receiver) {
    return receiver.play();
  },
  get$onEnded: function(receiver) {
    return C.EventStreamProvider_ended.forElement$1(receiver);
  },
  get$onPause: function(receiver) {
    return C.EventStreamProvider_pause.forElement$1(receiver);
  },
  get$onPlay: function(receiver) {
    return C.EventStreamProvider_play.forElement$1(receiver);
  },
  "%": ";HTMLMediaElement"
},

MediaKeyEvent: {"": "Event;message=", "%": "MediaKeyEvent"},

MediaKeyMessageEvent: {"": "Event;message=", "%": "MediaKeyMessageEvent"},

MediaStream: {"": "EventTarget;id=", "%": "MediaStream"},

MessageEvent: {"": "Event;",
  get$data: function(receiver) {
    return P.convertNativeToDart_AcceptStructuredClone(receiver.data, true);
  },
  $isMessageEvent: true,
  "%": "MessageEvent"
},

MetaElement: {"": "HtmlElement;content=,name%", "%": "HTMLMetaElement"},

MeterElement: {"": "HtmlElement;value%", "%": "HTMLMeterElement"},

MidiMessageEvent: {"": "Event;data=", "%": "MIDIMessageEvent"},

MidiOutput: {"": "MidiPort;",
  send$2: function(receiver, data, timestamp) {
    return receiver.send(data, timestamp);
  },
  send$1: function($receiver, data) {
    return $receiver.send(data);
  },
  "%": "MIDIOutput"
},

MidiPort: {"": "EventTarget;id=,name=,type=", "%": "MIDIInput;MIDIPort"},

MouseEvent: {"": "UIEvent;button=,_clientX:clientX=",
  get$client: function(receiver) {
    var t1 = new P.Point(receiver.clientX, receiver.clientY);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  get$movement: function(receiver) {
    var t1 = new P.Point(receiver.webkitMovementX, receiver.webkitMovementY);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  $isMouseEvent: true,
  "%": ";DragEvent|MSPointerEvent|MouseEvent|PointerEvent"
},

NavigatorUserMediaError: {"": "Interceptor;message=,name=", "%": "NavigatorUserMediaError"},

Node: {"": "EventTarget;lastChild=,nodeType=,text:textContent=",
  get$nodes: function(receiver) {
    return new W._ChildNodeListLazy(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  get$remove: function(_receiver) {
    return new W.BoundClosure$i0(this, W.Node.prototype.remove$0, _receiver, "remove$0");
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      J._replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      H.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  append$1: function(receiver, newChild) {
    return receiver.appendChild(newChild);
  },
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  },
  contains$1: function(receiver, other) {
    return receiver.contains(other);
  },
  _replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  },
  $isNode: true,
  "%": "DocumentType|Entity|Notation;Node"
},

NodeList: {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(P.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "NodeList|RadioNodeList"
},

OListElement: {"": "HtmlElement;type%", "%": "HTMLOListElement"},

ObjectElement: {"": "HtmlElement;data=,height%,name%,type%,width%", "%": "HTMLObjectElement"},

OptionElement: {"": "HtmlElement;value%", "%": "HTMLOptionElement"},

OutputElement: {"": "HtmlElement;name%,type=,value%", $isOutputElement: true, "%": "HTMLOutputElement"},

ParamElement: {"": "HtmlElement;name%,value%", "%": "HTMLParamElement"},

PositionError: {"": "Interceptor;message=", "%": "PositionError"},

ProcessingInstruction: {"": "CharacterData;target=", "%": "ProcessingInstruction"},

ProgressElement: {"": "HtmlElement;value%", "%": "HTMLProgressElement"},

ProgressEvent: {"": "Event;", $isProgressEvent: true, "%": "XMLHttpRequestProgressEvent;ProgressEvent"},

Range: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "Range"
},

ResourceProgressEvent: {"": "ProgressEvent;url=", "%": "ResourceProgressEvent"},

ScriptElement0: {"": "HtmlElement;src},type%", "%": "HTMLScriptElement"},

SelectElement: {"": "HtmlElement;length=,name%,type=,value%", "%": "HTMLSelectElement"},

ShadowRoot: {"": "DocumentFragment;innerHtml:innerHTML=",
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  },
  "%": "ShadowRoot"
},

SourceElement: {"": "HtmlElement;src},type%", "%": "HTMLSourceElement"},

SpeechRecognitionError: {"": "Event;error=,message=", "%": "SpeechRecognitionError"},

SpeechSynthesisEvent: {"": "Event;name=", "%": "SpeechSynthesisEvent"},

Storage: {"": "Interceptor;",
  $index: function(receiver, key) {
    return receiver.getItem(key);
  },
  $indexSet: function(receiver, key, value) {
    receiver.setItem(key, value);
  },
  remove$1: function(receiver, key) {
    var value = receiver.getItem(key);
    receiver.removeItem(key);
    return value;
  },
  forEach$1: function(receiver, f) {
    var i, key;
    for (i = 0; true; ++i) {
      key = receiver.key(i);
      if (key == null)
        return;
      f.call$2(key, receiver.getItem(key));
    }
  },
  get$keys: function(receiver) {
    var keys = [];
    this.forEach$1(receiver, new W.Storage_keys_closure(keys));
    return keys;
  },
  get$values: function(receiver) {
    var values = [];
    this.forEach$1(receiver, new W.Storage_values_closure(values));
    return values;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  get$isEmpty: function(receiver) {
    return receiver.key(0) == null;
  },
  get$isNotEmpty: function(receiver) {
    return receiver.key(0) != null;
  },
  $isMap: true,
  $asMap: function() {
    return [J.JSString, J.JSString];
  },
  "%": "Storage"
},

StorageEvent: {"": "Event;url=", "%": "StorageEvent"},

StyleElement: {"": "HtmlElement;type%", "%": "HTMLStyleElement"},

TableElement: {"": "HtmlElement;",
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var table, fragment, t1;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    table = W.Element_Element$html("<table>" + H.S(html) + "</table>", treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    t1.addAll$1(t1, J.get$nodes$x(table));
    return fragment;
  },
  "%": "HTMLTableElement"
},

TableRowElement: {"": "HtmlElement;",
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment, t1, section, row;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
    t1.toString;
    t1 = new W._ChildNodeListLazy(t1);
    section = t1.get$single(t1);
    section.toString;
    t1 = new W._ChildNodeListLazy(section);
    row = t1.get$single(t1);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    row.toString;
    t1.addAll$1(t1, new W._ChildNodeListLazy(row));
    return fragment;
  },
  "%": "HTMLTableRowElement"
},

TableSectionElement: {"": "HtmlElement;",
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment, t1, section;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
    t1.toString;
    t1 = new W._ChildNodeListLazy(t1);
    section = t1.get$single(t1);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    section.toString;
    t1.addAll$1(t1, new W._ChildNodeListLazy(section));
    return fragment;
  },
  "%": "HTMLTableSectionElement"
},

TemplateElement: {"": "HtmlElement;content=",
  setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment;
    receiver.textContent = null;
    fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator);
    receiver.content.appendChild(fragment);
  },
  setInnerHtml$1: function($receiver, html) {
    return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
  },
  setInnerHtml$2$validator: function($receiver, html, validator) {
    return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, validator);
  },
  setInnerHtml$2$treeSanitizer: function($receiver, html, treeSanitizer) {
    return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
  },
  $isTemplateElement: true,
  "%": "HTMLTemplateElement"
},

TextAreaElement: {"": "HtmlElement;name%,type=,value%", "%": "HTMLTextAreaElement"},

TextEvent: {"": "UIEvent;data=", "%": "TextEvent"},

Touch: {"": "Interceptor;identifier=",
  get$target: function(receiver) {
    return W._convertNativeToDart_EventTarget(receiver.target);
  },
  get$page: function(receiver) {
    var t1 = new P.Point(receiver.pageX, receiver.pageY);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "%": "Touch"
},

TouchEvent: {"": "UIEvent;changedTouches=,touches=", $isTouchEvent: true, "%": "TouchEvent"},

TouchList: {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(new P.StateError("No elements"));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(P.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Touch];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "TouchList"
},

TrackElement: {"": "HtmlElement;src}", "%": "HTMLTrackElement"},

UIEvent: {"": "Event;",
  get$page: function(receiver) {
    var t1 = new P.Point(receiver.pageX, receiver.pageY);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "%": "FocusEvent|SVGZoomEvent;UIEvent"
},

VideoElement: {"": "MediaElement;height%,width%", "%": "HTMLVideoElement"},

WebSocket: {"": "EventTarget;url=",
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  "%": "WebSocket"
},

WheelEvent: {"": "MouseEvent;",
  get$deltaY: function(receiver) {
    var detail;
    if (receiver.deltaY !== undefined)
      return receiver.deltaY;
    else if (receiver.wheelDelta !== undefined)
      return -receiver.wheelDelta;
    else if (receiver.detail !== undefined) {
      if (receiver.axis == MouseScrollEvent.VERTICAL_AXIS) {
        detail = receiver.detail;
        if (Math.abs(detail) < 100)
          return -detail * 40;
        return -detail;
      }
      return 0;
    }
    throw H.wrapException(P.UnsupportedError$("deltaY is not supported"));
  },
  get$deltaX: function(receiver) {
    var detail;
    if (receiver.deltaX !== undefined)
      return receiver.deltaX;
    else if (receiver.wheelDeltaX !== undefined)
      return -receiver.wheelDeltaX;
    else if (receiver.detail !== undefined) {
      if (receiver.axis !== undefined && receiver.axis == MouseScrollEvent.HORIZONTAL_AXIS) {
        detail = receiver.detail;
        if (detail < 100)
          return -detail * 40;
        return -detail;
      }
      return 0;
    }
    throw H.wrapException(P.UnsupportedError$("deltaX is not supported"));
  },
  $isWheelEvent: true,
  "%": "MouseScrollEvent|MouseWheelEvent|WheelEvent"
},

Window: {"": "EventTarget;name=",
  get$location: function(receiver) {
    var result = receiver.location;
    if (W.Window__isDartLocation(result) === true)
      return result;
    if (null == receiver._location_wrapper)
      receiver._location_wrapper = new W._LocationWrapper(result);
    return receiver._location_wrapper;
  },
  _html$_requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  get$onClick: function(receiver) {
    return C.EventStreamProvider_click.forTarget$1(receiver);
  },
  $isEventTarget: true,
  "%": "DOMWindow|Window"
},

_Attr: {"": "Node;name=,value=", "%": "Attr"},

_ClientRect: {"": "Interceptor;height=,left=,top=,width=",
  toString$0: function(receiver) {
    return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = receiver.left;
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = receiver.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.width;
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.height;
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(receiver) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(receiver.left);
    t2 = J.get$hashCode$(receiver.top);
    t3 = J.get$hashCode$(receiver.width);
    t4 = J.get$hashCode$(receiver.height);
    return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
  },
  $isRectangle: true,
  $asRectangle: function() {
    return [null];
  },
  "%": "ClientRect|DOMRect"
},

_NamedNodeMap: {"": "Interceptor_ListMixin_ImmutableListMixin2;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  get$last: function(receiver) {
    var len = receiver.length;
    if (len > 0)
      return receiver[len - 1];
    throw H.wrapException(P.StateError$("No elements"));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "MozNamedAttrMap|NamedNodeMap"
},

Console: {"": "Object;",
  error$1: function(_, arg) {
    return typeof console != "undefined" ? console.error(arg) : null;
  },
  get$error: function(_receiver) {
    return new F.BoundClosure$i1(this, W.Console.prototype.error$1, _receiver, "error$1");
  },
  timeStamp$1: function(_, arg) {
    return typeof console != "undefined" ? console.timeStamp(arg) : null;
  },
  get$timeStamp: function(_receiver) {
    return new F.BoundClosure$i1(this, W.Console.prototype.timeStamp$1, _receiver, "timeStamp$1");
  },
  static: {
"": "Console__safeConsole",
}

},

Interceptor_CssStyleDeclarationBase: {"": "Interceptor+CssStyleDeclarationBase;"},

_CssStyleDeclarationSet: {"": "Object_CssStyleDeclarationBase;_elementIterable,_elementCssStyleDeclarationSetIterable",
  getPropertyValue$1: function(_, propertyName) {
    var t1 = this._elementCssStyleDeclarationSetIterable;
    if (t1.get$length(t1) === 0)
      H.throwExpression(new P.StateError("No elements"));
    return J.getPropertyValue$1$x(t1.elementAt$1(t1, 0), propertyName);
  },
  setProperty$3: function(_, propertyName, value, priority) {
    var t1 = this._elementCssStyleDeclarationSetIterable;
    t1.forEach$1(t1, new W._CssStyleDeclarationSet_setProperty_closure(propertyName, value, priority));
  },
  _CssStyleDeclarationSet$1: function(_elementIterable) {
    var t1 = new H.MappedListIterable(P.List_List$from(this._elementIterable, true, null), new W._CssStyleDeclarationSet_closure());
    H.setRuntimeTypeInfo(t1, [null, null]);
    this._elementCssStyleDeclarationSetIterable = t1;
  },
  static: {
_CssStyleDeclarationSet$: function(_elementIterable) {
  var t1 = new W._CssStyleDeclarationSet(_elementIterable, null);
  t1._CssStyleDeclarationSet$1(_elementIterable);
  return t1;
}}

},

Object_CssStyleDeclarationBase: {"": "Object+CssStyleDeclarationBase;"},

_CssStyleDeclarationSet_closure: {"": "Closure;",
  call$1: function(e) {
    return J.get$style$x(e);
  },
  $is_args1: true
},

_CssStyleDeclarationSet_setProperty_closure: {"": "Closure;propertyName_0,value_1,priority_2",
  call$1: function(e) {
    return J.setProperty$3$x(e, this.propertyName_0, this.value_1, this.priority_2);
  },
  $is_args1: true
},

CssStyleDeclarationBase: {"": "Object;",
  set$color: function(receiver, value) {
    this.setProperty$3(receiver, "color", value, "");
  },
  set$cursor: function(receiver, value) {
    this.setProperty$3(receiver, "cursor", value, "");
  },
  set$display: function(receiver, value) {
    this.setProperty$3(receiver, "display", value, "");
  },
  get$height: function(receiver) {
    return this.getPropertyValue$1(receiver, "height");
  },
  set$left: function(receiver, value) {
    this.setProperty$3(receiver, "left", value, "");
  },
  set$opacity: function(receiver, value) {
    this.setProperty$3(receiver, "opacity", value, "");
  },
  set$paddingRight: function(receiver, value) {
    this.setProperty$3(receiver, "padding-right", value, "");
  },
  get$page: function(receiver) {
    return this.getPropertyValue$1(receiver, "page");
  },
  set$position: function(receiver, value) {
    this.setProperty$3(receiver, "position", value, "");
  },
  set$top: function(receiver, value) {
    this.setProperty$3(receiver, "top", value, "");
  },
  set$transform: function(receiver, value) {
    this.setProperty$3(receiver, P.Device_cssPrefix() + "transform", value, "");
  },
  get$width: function(receiver) {
    return this.getPropertyValue$1(receiver, "width");
  },
  set$zIndex: function(receiver, value) {
    this.setProperty$3(receiver, "z-index", value, "");
  }
},

_ChildrenElementList: {"": "ListBase;_element,_childElements",
  contains$1: function(_, element) {
    return J.contains$1$asx(this._childElements, element);
  },
  get$isEmpty: function(_) {
    return this._element.firstElementChild == null;
  },
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    this._element.replaceChild(value, t1[index]);
  },
  set$length: function(_, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this.toList$0(this);
    t2 = new H.ListIterator(t1, t1.length, 0, null);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]);
    return t2;
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    t1 = J.getInterceptor(iterable);
    for (t1 = J.get$iterator$ax(typeof iterable === "object" && iterable !== null && !!t1.$is_ChildNodeListLazy ? P.List_List$from(iterable, true, null) : iterable), t2 = this._element; t1.moveNext$0();)
      t2.appendChild(t1.get$current());
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnimplementedError$(null));
  },
  remove$1: function(_, object) {
    var t1 = J.getInterceptor(object);
    if (typeof object === "object" && object !== null && !!t1.$isElement) {
      t1 = this._element;
      if (object.parentNode === t1) {
        t1.removeChild(object);
        return true;
      }
    }
    return false;
  },
  clear$0: function(_) {
    this._element.textContent = "";
  },
  removeAt$1: function(_, index) {
    var t1, result;
    t1 = this._childElements;
    if (index < 0 || index >= t1.length)
      throw H.ioore(t1, index);
    result = t1[index];
    this._element.removeChild(result);
    return result;
  },
  get$first: function(_) {
    var result = this._element.firstElementChild;
    if (result == null)
      throw H.wrapException(new P.StateError("No elements"));
    return result;
  },
  get$last: function(_) {
    var result = this._element.lastElementChild;
    if (result == null)
      throw H.wrapException(new P.StateError("No elements"));
    return result;
  },
  $asListBase: function() {
    return [W.Element];
  },
  $asList: function() {
    return [W.Element];
  }
},

_FrozenElementList: {"": "ListBase;_nodeList,_elementList",
  get$length: function(_) {
    return this._nodeList.length;
  },
  $index: function(_, index) {
    var t1 = this._nodeList;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
  },
  set$length: function(_, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
  },
  get$last: function(_) {
    return C.NodeList_methods.get$last(this._nodeList);
  },
  get$style: function(_) {
    return W._CssStyleDeclarationSet$(this._elementList);
  },
  get$onClick: function(_) {
    return C.EventStreamProvider_click._forElementList$1(this);
  },
  _html$_FrozenElementList$_wrap$1: function(_nodeList, $T) {
    var t1 = C.NodeList_methods.where$1(this._nodeList, new W._FrozenElementList$_wrap_closure());
    this._elementList = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
  },
  $asListBase: null,
  $asList: null,
  $isList: true,
  $isEfficientLength: true,
  static: {
_FrozenElementList$_wrap: function(_nodeList, $T) {
  var t1 = new W._FrozenElementList(_nodeList, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._html$_FrozenElementList$_wrap$1(_nodeList, $T);
  return t1;
}}

},

_FrozenElementList$_wrap_closure: {"": "Closure;",
  call$1: function(e) {
    var t1 = J.getInterceptor(e);
    return typeof e === "object" && e !== null && !!t1.$isElement;
  },
  $is_args1: true
},

Element_Element$html_closure: {"": "Closure;",
  call$1: function(e) {
    var t1 = J.getInterceptor(e);
    return typeof e === "object" && e !== null && !!t1.$isElement;
  },
  $is_args1: true
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

HttpRequest_getString_closure: {"": "Closure;",
  call$1: function(xhr) {
    return J.get$responseText$x(xhr);
  },
  $is_args1: true
},

HttpRequest_request_closure0: {"": "Closure;xhr_0",
  call$2: function(header, value) {
    this.xhr_0.setRequestHeader(header, value);
  },
  $is_args2: true
},

HttpRequest_request_closure: {"": "Closure;completer_1,xhr_2",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.xhr_2;
    t2 = t1.status;
    if (typeof t2 !== "number")
      throw t2.$ge();
    t2 = t2 >= 200 && t2 < 300 || t2 === 0 || t2 === 304;
    t3 = this.completer_1;
    if (t2) {
      t2 = t3.future;
      if (t2._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t2._asyncComplete$1(t1);
    } else
      t3.completeError$1(e);
  },
  $is_args1: true
},

_ChildNodeListLazy: {"": "ListBase;_this",
  get$last: function(_) {
    var result = this._this.lastChild;
    if (result == null)
      throw H.wrapException(new P.StateError("No elements"));
    return result;
  },
  get$single: function(_) {
    var t1, l;
    t1 = this._this;
    l = t1.childNodes.length;
    if (l === 0)
      throw H.wrapException(P.StateError$("No elements"));
    if (l > 1)
      throw H.wrapException(P.StateError$("More than one element"));
    return t1.firstChild;
  },
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2, len, i;
    t1 = J.getInterceptor$ax(iterable);
    if (typeof iterable === "object" && iterable !== null && !!t1.$is_ChildNodeListLazy) {
      t1 = iterable._this;
      t2 = this._this;
      if (t1 !== t2)
        for (len = t1.childNodes.length, i = 0; i < len; ++i)
          t2.appendChild(t1.firstChild);
      return;
    }
    for (t1 = t1.get$iterator(iterable), t2 = this._this; t1.moveNext$0();)
      t2.appendChild(t1.get$current());
  },
  remove$1: function(_, object) {
    var t1 = J.getInterceptor(object);
    if (typeof object !== "object" || object === null || !t1.$isNode)
      return false;
    t1 = this._this;
    if (t1 !== object.parentNode)
      return false;
    t1.removeChild(object);
    return true;
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw H.ioore(t2, index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return C.NodeList_methods.get$iterator(this._this.childNodes);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnsupportedError$("Cannot setRange on Node list"));
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $is_ChildNodeListLazy: true,
  $asListBase: function() {
    return [W.Node];
  },
  $asList: function() {
    return [W.Node];
  }
},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Storage_keys_closure: {"": "Closure;keys_0",
  call$2: function(k, v) {
    return this.keys_0.push(k);
  },
  $is_args2: true
},

Storage_values_closure: {"": "Closure;values_0",
  call$2: function(k, v) {
    return this.values_0.push(v);
  },
  $is_args2: true
},

Interceptor_ListMixin1: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin1: {"": "Interceptor_ListMixin1+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

_BeforeUnloadEvent: {"": "_WrappedEvent;_returnValue,wrapped", $isEvent: true},

_BeforeUnloadEventStreamProvider: {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    var stream, controller, t1;
    stream = new W._EventStream(e, this._eventType, useCapture);
    H.setRuntimeTypeInfo(stream, [null]);
    controller = P.StreamController_StreamController(null, null, null, null, true, null);
    t1 = new W._EventStreamSubscription(0, stream._target, stream._eventType, W._wrapZone(new W._BeforeUnloadEventStreamProvider_forTarget_closure(controller)), stream._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(stream, "_EventStream", 0)]);
    t1._tryResume$0();
    t1 = new P._ControllerStream(controller);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
},

_BeforeUnloadEventStreamProvider_forTarget_closure: {"": "Closure;controller_0",
  call$1: function($event) {
    var wrapped, t1;
    wrapped = new W._BeforeUnloadEvent(null, $event);
    t1 = this.controller_0;
    if (t1._state >= 4)
      H.throwExpression(t1._badEventState$0());
    t1._async$_add$1(wrapped);
    return wrapped._returnValue;
  },
  $is_args1: true
},

Interceptor_ListMixin2: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin2: {"": "Interceptor_ListMixin2+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

_AttributeMap: {"": "Object;",
  forEach$1: function(_, f) {
    var t1, t2, key;
    for (t1 = this.get$keys(this), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      key = t2._dev$_current;
      f.call$2(key, this.$index(this, key));
    }
  },
  get$keys: function(_) {
    var attributes, keys, len, i, t1;
    attributes = this._element.attributes;
    keys = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(keys, [J.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw H.ioore(attributes, i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        keys.push(J.get$name$x(t1));
    }
    return keys;
  },
  get$values: function(_) {
    var attributes, values, len, i, t1;
    attributes = this._element.attributes;
    values = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(values, [J.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw H.ioore(attributes, i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        values.push(J.get$value$x(t1));
    }
    return values;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  get$isNotEmpty: function(_) {
    return this.get$length(this) !== 0;
  },
  $isMap: true,
  $asMap: function() {
    return [J.JSString, J.JSString];
  }
},

_ElementAttributeMap: {"": "_AttributeMap;_element",
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, value);
  },
  remove$1: function(_, key) {
    var t1, value;
    t1 = this._element;
    value = t1.getAttribute(key);
    t1.removeAttribute(key);
    return value;
  },
  get$length: function(_) {
    return this.get$keys(this).length;
  },
  _matches$1: function(node) {
    return node.namespaceURI == null;
  }
},

_ElementCssClassSet: {"": "CssClassSetImpl;_element",
  readClasses$0: function() {
    var s, t1, t2, trimmed;
    s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
    for (t1 = J.get$className$x(this._element).split(" "), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      trimmed = J.trim$0$s(t2._dev$_current);
      if (trimmed.length !== 0)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    P.List_List$from(s, true, null);
    J.set$className$x(this._element, s.join$1(s, " "));
  }
},

EventStreamProvider: {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    var t1 = new W._EventStream(e, this._eventType, useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  },
  forElement$2$useCapture: function(e, useCapture) {
    var t1 = new W._ElementEventStreamImpl(e, this._eventType, useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forElement$1: function(e) {
    return this.forElement$2$useCapture(e, false);
  },
  _forElementList$2$useCapture: function(e, useCapture) {
    var t1 = new W._ElementListEventStreamImpl(e, useCapture, this._eventType);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  _forElementList$1: function(e) {
    return this._forElementList$2$useCapture(e, false);
  }
},

_EventStream: {"": "Stream;_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_EventStream", 0)]);
    t1._tryResume$0();
    return t1;
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  $asStream: null
},

_ElementEventStreamImpl: {"": "_EventStream;_target,_eventType,_useCapture", $as_EventStream: null, $asStream: null, $isStream: true},

_ElementListEventStreamImpl: {"": "Stream;_targetList,_useCapture,_eventType",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var pool, t1, t2, t3, t4;
    pool = W._StreamPool$broadcast(null);
    for (t1 = this._targetList, t1 = t1.get$iterator(t1), t2 = this._eventType, t3 = this._useCapture; t1.moveNext$0();) {
      t4 = new W._EventStream(t1._dev$_current, t2, t3);
      t4.$builtinTypeInfo = [null];
      pool.add$1(pool, t4);
    }
    t1 = pool._html$_controller;
    t1.toString;
    t2 = new P._BroadcastStream(t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_BroadcastStreamController", 0)]);
    return t2.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  $asStream: null,
  $isStream: true
},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this._target == null)
      return;
    this._unlisten$0();
    this._target = null;
    this._onData = null;
  },
  pause$1: function(_, resumeSignal) {
    if (this._target == null)
      return;
    this._pauseCount = this._pauseCount + 1;
    this._unlisten$0();
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    if (this._target == null || this._pauseCount <= 0)
      return;
    this._pauseCount = this._pauseCount - 1;
    this._tryResume$0();
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      J.addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._onData;
    if (t1 != null)
      J.removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  $asStreamSubscription: null
},

_StreamPool: {"": "Object;_html$_controller,_subscriptions",
  add$1: function(_, stream) {
    var t1, t2;
    t1 = this._subscriptions;
    if (t1.containsKey$1(t1, stream))
      return;
    t2 = this._html$_controller;
    t1.$indexSet(t1, stream, stream.listen$3$onDone$onError(t2.get$add(t2), new W._StreamPool_add_closure(this, stream), t2.get$addError()));
  },
  remove$1: function(_, stream) {
    var t1, subscription;
    t1 = this._subscriptions;
    subscription = t1.remove$1(t1, stream);
    if (subscription != null)
      subscription.cancel$0();
  },
  close$0: function(_) {
    var t1, t2, t3;
    for (t1 = this._subscriptions, t2 = t1.get$values(t1), t3 = t2._iterable, t3 = t3.get$iterator(t3), t3 = new H.MappedIterator(null, t3, t2._f), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "MappedIterable", 0), H.getRuntimeTypeArgument(t2, "MappedIterable", 1)]); t3.moveNext$0();)
      t3._dev$_current.cancel$0();
    t1.clear$0(t1);
    t1 = this._html$_controller;
    t1.close$0(t1);
  },
  get$close: function(_receiver) {
    return new W.BoundClosure$i0(this, W._StreamPool.prototype.close$0, _receiver, "close$0");
  },
  _html$_StreamPool$broadcast$0: function($T) {
    this._html$_controller = P.StreamController_StreamController$broadcast(this.get$close(this), null, true, $T);
  },
  static: {
_StreamPool$broadcast: function($T) {
  var t1 = new W._StreamPool(null, P.LinkedHashMap_LinkedHashMap(null, null, null, [P.Stream, $T], [P.StreamSubscription, $T]));
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._html$_StreamPool$broadcast$0($T);
  return t1;
}}

},

_StreamPool_add_closure: {"": "Closure;this_0,stream_1",
  call$0: function() {
    var t1 = this.this_0;
    return t1.remove$1(t1, this.stream_1);
  },
  $is_void_: true
},

_CustomEventStreamProvider: {"": "Object;_eventTypeGetter",
  _eventTypeGetter$1: function(arg0) {
    return this._eventTypeGetter.call$1(arg0);
  },
  forTarget$2$useCapture: function(e, useCapture) {
    var t1 = new W._EventStream(e, this._eventTypeGetter$1(e), useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  },
  forElement$2$useCapture: function(e, useCapture) {
    var t1 = new W._ElementEventStreamImpl(e, this._eventTypeGetter$1(e), useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forElement$1: function(e) {
    return this.forElement$2$useCapture(e, false);
  },
  _forElementList$2$useCapture: function(e, useCapture) {
    var t1 = new W._ElementListEventStreamImpl(e, useCapture, this._eventTypeGetter$1(e));
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  _forElementList$1: function(e) {
    return this._forElementList$2$useCapture(e, false);
  }
},

_Html5NodeValidator: {"": "Object;uriPolicy<",
  allowsElement$1: function(element) {
    var t1 = $.get$_Html5NodeValidator__allowedElements();
    return t1.contains$1(t1, element.tagName);
  },
  allowsAttribute$3: function(element, attributeName, value) {
    var tagName, t1, validator;
    tagName = element.tagName;
    t1 = $.get$_Html5NodeValidator__attributeValidators();
    validator = t1.$index(t1, tagName + "::" + attributeName);
    if (validator == null) {
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(t1, "*::" + attributeName);
    }
    if (validator == null)
      return false;
    return validator.call$4(element, attributeName, value, this);
  },
  _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
    var t1, attr, t2;
    t1 = $.get$_Html5NodeValidator__attributeValidators();
    if (t1.get$isEmpty(t1)) {
      for (t1 = new H.ListIterator(C.List_1GN, 261, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(C.List_1GN, "JSArray", 0)]); t1.moveNext$0();) {
        attr = t1._dev$_current;
        t2 = $.get$_Html5NodeValidator__attributeValidators();
        t2.$indexSet(t2, attr, W._Html5NodeValidator__standardAttributeValidator$closure);
      }
      for (t1 = new H.ListIterator(C.List_yrN, 12, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(C.List_yrN, "JSArray", 0)]); t1.moveNext$0();) {
        attr = t1._dev$_current;
        t2 = $.get$_Html5NodeValidator__attributeValidators();
        t2.$indexSet(t2, attr, W._Html5NodeValidator__uriAttributeValidator$closure);
      }
    }
  },
  $isNodeValidator: true,
  static: {
"": "_Html5NodeValidator__allowedElements,_Html5NodeValidator__standardAttributes,_Html5NodeValidator__uriAttributes,_Html5NodeValidator__attributeValidators",
_Html5NodeValidator$: function(uriPolicy) {
  var t1 = new W._SameOriginUriPolicy(W.AnchorElement_AnchorElement(null), C.Window_methods.get$location(window));
  t1 = new W._Html5NodeValidator(t1);
  t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
  return t1;
},

_Html5NodeValidator__standardAttributeValidator: function(element, attributeName, value, context) {
  return true;
},

_Html5NodeValidator__uriAttributeValidator: function(element, attributeName, value, context) {
  return context.get$uriPolicy().allowsUri$1(value);
}}

},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return W.FixedSizeListIterator$(receiver, H.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0));
  },
  add$1: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
  },
  remove$1: function(receiver, object) {
    throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

NodeValidatorBuilder: {"": "Object;_validators",
  allowCustomElement$4$attributes$uriAttributes$uriPolicy: function(tagName, attributes, uriAttributes, uriPolicy) {
    var tagNameUpper, attrs;
    tagNameUpper = tagName.toUpperCase();
    if (attributes != null) {
      attributes.toString;
      attrs = new H.MappedListIterable(attributes, new W.NodeValidatorBuilder_allowCustomElement_closure(tagNameUpper));
      H.setRuntimeTypeInfo(attrs, [null, null]);
    } else
      attrs = null;
    uriPolicy = new W._SameOriginUriPolicy(W.AnchorElement_AnchorElement(null), C.Window_methods.get$location(window));
    this._validators.push(W._CustomElementNodeValidator$(uriPolicy, [tagNameUpper], attrs, null, false, true));
  },
  add$1: function(_, validator) {
    this._validators.push(validator);
  },
  allowsElement$1: function(element) {
    return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
  },
  allowsAttribute$3: function(element, attributeName, value) {
    return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
  },
  $isNodeValidator: true
},

NodeValidatorBuilder_allowCustomElement_closure: {"": "Closure;tagNameUpper_0",
  call$1: function($name) {
    return this.tagNameUpper_0 + "::" + J.toLowerCase$0$s($name);
  },
  $is_args1: true
},

NodeValidatorBuilder_allowCustomElement_closure0: {"": "Closure;tagNameUpper_1",
  call$1: function($name) {
    return this.tagNameUpper_1 + "::" + J.toLowerCase$0$s($name);
  },
  $is_args1: true
},

NodeValidatorBuilder_allowsElement_closure: {"": "Closure;element_0",
  call$1: function(v) {
    return v.allowsElement$1(this.element_0);
  },
  $is_args1: true
},

NodeValidatorBuilder_allowsAttribute_closure: {"": "Closure;element_0,attributeName_1,value_2",
  call$1: function(v) {
    return v.allowsAttribute$3(this.element_0, this.attributeName_1, this.value_2);
  },
  $is_args1: true
},

_SimpleNodeValidator: {"": "Object;uriPolicy<",
  allowsElement$1: function(element) {
    var t1 = this.allowedElements;
    return t1.contains$1(t1, element.tagName);
  },
  allowsAttribute$3: function(element, attributeName, value) {
    var tagName, t1;
    tagName = element.tagName;
    t1 = this.allowedUriAttributes;
    if (t1.contains$1(t1, tagName + "::" + attributeName))
      return this.uriPolicy.allowsUri$1(value);
    else if (t1.contains$1(t1, "*::" + attributeName))
      return this.uriPolicy.allowsUri$1(value);
    else {
      t1 = this.allowedAttributes;
      if (t1.contains$1(t1, tagName + "::" + attributeName))
        return true;
      else if (t1.contains$1(t1, "*::" + attributeName))
        return true;
      else if (t1.contains$1(t1, tagName + "::*"))
        return true;
      else if (t1.contains$1(t1, "*::*"))
        return true;
    }
    return false;
  },
  $isNodeValidator: true
},

_CustomElementNodeValidator: {"": "_SimpleNodeValidator;allowTypeExtension,allowCustomTag,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
  allowsElement$1: function(element) {
    var isAttr, t1;
    if (this.allowTypeExtension) {
      isAttr = new W._ElementAttributeMap(element)._element.getAttribute("is");
      if (isAttr != null) {
        t1 = this.allowedElements;
        isAttr.toString;
        return t1.contains$1(t1, isAttr.toUpperCase()) && t1.contains$1(t1, element.tagName);
      }
    }
    if (this.allowCustomTag) {
      t1 = this.allowedElements;
      t1 = t1.contains$1(t1, element.tagName);
    } else
      t1 = false;
    return t1;
  },
  allowsAttribute$3: function(element, attributeName, value) {
    var t1;
    if (this.allowsElement$1(element)) {
      if (this.allowTypeExtension)
        if (attributeName === "is") {
          t1 = this.allowedElements;
          value.toString;
          t1 = t1.contains$1(t1, value.toUpperCase());
        } else
          t1 = false;
      else
        t1 = false;
      if (t1)
        return true;
      return W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value);
    }
    return false;
  },
  static: {
_CustomElementNodeValidator$: function(uriPolicy, allowedElements, allowedAttributes, allowedUriAttributes, allowTypeExtension, allowCustomTag) {
  var t1, t2, t3;
  t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(t1, allowedElements);
  if (allowedAttributes != null) {
    t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
    t2.addAll$1(t2, allowedAttributes);
  } else
    t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  return new W._CustomElementNodeValidator(allowTypeExtension, allowCustomTag, t1, t2, t3, uriPolicy);
}}

},

_TemplatingNodeValidator: {"": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
  allowsAttribute$3: function(element, attributeName, value) {
    var t1;
    if (W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value))
      return true;
    if (attributeName === "template" && value === "")
      return true;
    if (new W._ElementAttributeMap(element)._element.getAttribute("template") === "") {
      t1 = this._templateAttrs;
      return t1.contains$1(t1, attributeName);
    }
    return false;
  },
  static: {
"": "_TemplatingNodeValidator__TEMPLATE_ATTRS",
_TemplatingNodeValidator$: function() {
  var t1, t2, t3, t4;
  t1 = new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure());
  H.setRuntimeTypeInfo(t1, [null, null]);
  t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t2.addAll$1(t2, ["TEMPLATE"]);
  t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t3.addAll$1(t3, t1);
  t1 = t3;
  t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
  t4.addAll$1(t4, C.List_wSV);
  return new W._TemplatingNodeValidator(t4, t2, t1, t3, null);
}}

},

_TemplatingNodeValidator_closure: {"": "Closure;",
  call$1: function(attr) {
    return "TEMPLATE::" + H.S(attr);
  },
  $is_args1: true
},

_SvgNodeValidator: {"": "Object;",
  allowsElement$1: function(element) {
    var t1 = J.getInterceptor(element);
    if (!!t1.$isScriptElement)
      return false;
    if (!!t1.$isSvgElement)
      return true;
    return false;
  },
  allowsAttribute$3: function(element, attributeName, value) {
    if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
      return false;
    return this.allowsElement$1(element);
  },
  $isNodeValidator: true
},

_WrappedEvent: {"": "Object;",
  get$target: function(_) {
    return J.get$target$x(this.wrapped);
  },
  get$timeStamp: function(_) {
    return J.get$timeStamp$x(this.wrapped);
  },
  get$type: function(_) {
    return J.get$type$x(this.wrapped);
  },
  preventDefault$0: function(_) {
    J.preventDefault$0$x(this.wrapped);
  },
  $isEvent: true
},

FixedSizeListIterator: {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = this._position + 1;
    t1 = this._length;
    if (nextPosition < t1) {
      this._current = J.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._current;
  },
  static: {
FixedSizeListIterator$: function(array, $T) {
  var t1 = new W.FixedSizeListIterator(array, J.get$length$asx(array), -1, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
}}

},

_DOMWindowCrossFrame: {"": "Object;_window", $isEventTarget: true, static: {
_DOMWindowCrossFrame__createSafe: function(w) {
  if (w === window)
    return w;
  else
    return new W._DOMWindowCrossFrame(w);
}}
},

_LocationWrapper: {"": "Object;_ptr",
  get$hostname: function(_) {
    return this._ptr.hostname;
  },
  get$port: function(_) {
    return this._ptr.port;
  },
  get$protocol: function(_) {
    return this._ptr.protocol;
  },
  toString$0: function(_) {
    return this._ptr.toString();
  },
  $isLocation: true
},

NodeValidator: {"": "Object;", $isNodeValidator: true},

_SameOriginUriPolicy: {"": "Object;_hiddenAnchor,_loc",
  allowsUri$1: function(uri) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this._hiddenAnchor;
    t2 = J.getInterceptor$x(t1);
    t2.set$href(t1, uri);
    t3 = t2.get$hostname(t1);
    t4 = this._loc;
    t5 = J.getInterceptor$x(t4);
    t6 = t5.get$hostname(t4);
    if (t3 == null ? t6 == null : t3 === t6) {
      t3 = t2.get$port(t1);
      t6 = t5.get$port(t4);
      if (t3 == null ? t6 == null : t3 === t6) {
        t3 = t2.get$protocol(t1);
        t4 = t5.get$protocol(t4);
        t4 = t3 == null ? t4 == null : t3 === t4;
        t3 = t4;
      } else
        t3 = false;
    } else
      t3 = false;
    if (!t3)
      t1 = t2.get$hostname(t1) === "" && t2.get$port(t1) === "" && t2.get$protocol(t1) === ":";
    else
      t1 = true;
    return t1;
  }
},

_ValidatingTreeSanitizer: {"": "Object;validator",
  sanitizeTree$1: function(node) {
    new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$1(node);
  },
  sanitizeNode$1: function(node) {
    var t1, attrs, t2, t3, isAttr, keys, i, $name, t4;
    t1 = J.getInterceptor$x(node);
    switch (t1.get$nodeType(node)) {
      case 1:
        attrs = t1.get$attributes(node);
        if (!this.validator.allowsElement$1(node)) {
          window;
          t2 = $.get$Console__safeConsole();
          t3 = "Removing disallowed element <" + node.tagName + ">";
          t2.toString;
          if (typeof console != "undefined")
            console.warn(t3);
          t1.remove$0(node);
          break;
        }
        t2 = attrs._element;
        isAttr = t2.getAttribute("is");
        if (isAttr != null)
          if (!this.validator.allowsAttribute$3(node, "is", isAttr)) {
            window;
            t2 = $.get$Console__safeConsole();
            t3 = "Removing disallowed type extension <" + node.tagName + " is=\"" + isAttr + "\">";
            t2.toString;
            if (typeof console != "undefined")
              console.warn(t3);
            t1.remove$0(node);
            break;
          }
        t3 = attrs.get$keys(attrs);
        keys = P.List_List$from(t3, true, H.getRuntimeTypeArgument(t3, "JSArray", 0));
        for (i = attrs.get$keys(attrs).length - 1; i >= 0; --i) {
          if (i >= keys.length)
            throw H.ioore(keys, i);
          $name = keys[i];
          if (!this.validator.allowsAttribute$3(node, J.toLowerCase$0$s($name), t2.getAttribute($name))) {
            window;
            t3 = $.get$Console__safeConsole();
            t4 = "Removing disallowed attribute <" + node.tagName + " " + $name + "=\"" + t2.getAttribute($name) + "\">";
            t3.toString;
            if (typeof console != "undefined")
              console.warn(t4);
            t2.getAttribute($name);
            t2.removeAttribute($name);
          }
        }
        if (typeof node === "object" && node !== null && !!t1.$isTemplateElement)
          this.sanitizeTree$1(node.content);
        break;
      case 8:
      case 11:
      case 3:
      case 4:
        break;
      default:
        t1.remove$0(node);
    }
  }
},

_ValidatingTreeSanitizer_sanitizeTree_walk: {"": "Closure;this_0",
  call$1: function(node) {
    var child, nextChild;
    this.this_0.sanitizeNode$1(node);
    child = J.get$lastChild$x(node);
    for (; child != null; child = nextChild) {
      nextChild = child.previousSibling;
      this.call$1(child);
    }
  },
  $is_args1: true
}}],
["dart.dom.svg", "dart:svg", , P, {
AElement: {"": "GraphicsElement;target=", "%": "SVGAElement"},

FEBlendElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEBlendElement"},

FEColorMatrixElement: {"": "SvgElement;type=,height=,width=,x=,y=", "%": "SVGFEColorMatrixElement"},

FEComponentTransferElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEComponentTransferElement"},

FECompositeElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFECompositeElement"},

FEConvolveMatrixElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEConvolveMatrixElement"},

FEDiffuseLightingElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEDiffuseLightingElement"},

FEDisplacementMapElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEDisplacementMapElement"},

FEFloodElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEFloodElement"},

FEGaussianBlurElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEGaussianBlurElement"},

FEImageElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEImageElement"},

FEMergeElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEMergeElement"},

FEMorphologyElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEMorphologyElement"},

FEOffsetElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEOffsetElement"},

FEPointLightElement: {"": "SvgElement;x=,y=", "%": "SVGFEPointLightElement"},

FESpecularLightingElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFESpecularLightingElement"},

FESpotLightElement: {"": "SvgElement;x=,y=", "%": "SVGFESpotLightElement"},

FETileElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFETileElement"},

FETurbulenceElement: {"": "SvgElement;type=,height=,width=,x=,y=", "%": "SVGFETurbulenceElement"},

FilterElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFilterElement"},

ForeignObjectElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGForeignObjectElement"},

GraphicsElement: {"": "SvgElement;", "%": "SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGGElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGSwitchElement;SVGGraphicsElement"},

ImageElement0: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGImageElement"},

MaskElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGMaskElement"},

PatternElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGPatternElement"},

RectElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGRectElement"},

ScriptElement: {"": "SvgElement;type%", $isScriptElement: true, "%": "SVGScriptElement"},

StyleElement0: {"": "SvgElement;type%", "%": "SVGStyleElement"},

SvgElement: {"": "Element;",
  get$classes: function(receiver) {
    if (receiver._cssClassSet == null)
      receiver._cssClassSet = new P._AttributeClassSet(receiver);
    return receiver._cssClassSet;
  },
  get$children: function(receiver) {
    var t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
    H.setRuntimeTypeInfo(t1, [W.Element]);
    return t1;
  },
  get$innerHtml: function(receiver) {
    var container, cloned, t1;
    container = W._ElementFactoryProvider_createElement_tag("div", null);
    cloned = receiver.cloneNode(true);
    t1 = J.getInterceptor$x(container);
    J.addAll$1$ax(t1.get$children(container), J.get$children$x(cloned));
    return t1.get$innerHtml(container);
  },
  set$innerHtml: function(receiver, value) {
    receiver.textContent = null;
    receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, value, null, null));
  },
  createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
    var t1, html, fragment, svgFragment, root;
    if (treeSanitizer == null) {
      if (validator == null) {
        t1 = [];
        H.setRuntimeTypeInfo(t1, [W.NodeValidator]);
        validator = new W.NodeValidatorBuilder(t1);
        t1 = validator._validators;
        t1.push(W._Html5NodeValidator$(null));
        t1.push(W._TemplatingNodeValidator$());
        t1.push(new W._SvgNodeValidator());
      }
      treeSanitizer = new W._ValidatingTreeSanitizer(validator);
    }
    html = "<svg version=\"1.1\">" + H.S(svg) + "</svg>";
    fragment = J.createFragment$2$treeSanitizer$x(document.body, html, treeSanitizer);
    svgFragment = document.createDocumentFragment();
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    root = t1.get$single(t1);
    for (; t1 = root.firstChild, t1 != null;)
      svgFragment.appendChild(t1);
    return svgFragment;
  },
  $isSvgElement: true,
  "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGRadialGradientElement|SVGSetElement|SVGStopElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"
},

SvgSvgElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGSVGElement"},

TextContentElement: {"": "GraphicsElement;", "%": "SVGTextPathElement;SVGTextContentElement"},

TextPositioningElement: {"": "TextContentElement;x=,y=", "%": "SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"},

UseElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGUseElement"},

_AttributeClassSet: {"": "CssClassSetImpl;_svg$_element",
  readClasses$0: function() {
    var classname, s, t1, t2, trimmed;
    classname = new W._ElementAttributeMap(this._svg$_element)._element.getAttribute("class");
    s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
    if (classname == null)
      return s;
    for (t1 = classname.split(" "), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      trimmed = J.trim$0$s(t2._dev$_current);
      if (trimmed.length !== 0)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    new W._ElementAttributeMap(this._svg$_element)._element.setAttribute("class", s.join$1(s, " "));
  }
}}],
["dart.dom.web_sql", "dart:web_sql", , P, {
SqlError: {"": "Interceptor;message=", "%": "SQLError"}}],
["dart.isolate", "dart:isolate", , P, {
ReceivePort: {"": "Object;", $isReceivePort: true, $isStream: true,
  $asStream: function() {
    return [null];
  }
}}],
["dart.math", "dart:math", , P, {
_JenkinsSmiHash_combine0: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish0: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

max: function(a, b) {
  if (typeof b !== "number")
    throw H.wrapException(new P.ArgumentError(b));
  if (a > b)
    return a;
  if (a < b)
    return b;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return a + b;
    if (isNaN(b))
      return b;
    return a;
  }
  if (b === 0 && C.JSInt_methods.get$isNegative(a))
    return b;
  return a;
},

_Random: {"": "Object;",
  nextInt$1: function(max) {
    if (max < 0)
      throw H.wrapException(new P.ArgumentError("negative max: " + max));
    if (max > 4294967295)
      max = 4294967295;
    return Math.random() * max >>> 0;
  }
},

Point: {"": "Object;x>,y>",
  toString$0: function(_) {
    return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
  },
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isPoint)
      return false;
    t1 = this.x;
    t2 = other.x;
    if (t1 == null ? t2 == null : t1 === t2) {
      t1 = this.y;
      t2 = other.y;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = J.get$hashCode$(this.x);
    t2 = J.get$hashCode$(this.y);
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
  },
  $add: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.y;
    t2 = t2.get$y(other);
    if (typeof t4 !== "number")
      throw t4.$add();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = new P.Point(t1 + t3, t4 + t2);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "Point", 0)]);
    return t2;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$sub();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.y;
    t2 = t2.get$y(other);
    if (typeof t4 !== "number")
      throw t4.$sub();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = new P.Point(t1 - t3, t4 - t2);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "Point", 0)]);
    return t2;
  },
  $mul: function(_, factor) {
    var t1, t2;
    t1 = this.x;
    if (typeof t1 !== "number")
      throw t1.$mul();
    t2 = this.y;
    if (typeof t2 !== "number")
      throw t2.$mul();
    t2 = new P.Point(t1 * factor, t2 * factor);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "Point", 0)]);
    return t2;
  },
  $isPoint: true
},

_RectangleBase: {"": "Object;",
  toString$0: function(_) {
    return "Rectangle (" + H.S(this.get$left(this)) + ", " + H.S(this.top) + ") " + H.S(this.width) + " x " + H.S(this.height);
  },
  $eq: function(_, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = this.get$left(this);
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = this.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = this.width;
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = this.height;
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(this.get$left(this));
    t2 = J.get$hashCode$(this.top);
    t3 = J.get$hashCode$(this.width);
    t4 = J.get$hashCode$(this.height);
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2), t3), t4));
  }
},

Rectangle: {"": "_RectangleBase;left>,top>,width>,height>", $isRectangle: true, $asRectangle: null, $as_RectangleBase: null}}],
["dart.typed_data", "dart:typed_data", , P, {
TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$ge(index, $length))
      throw H.wrapException(P.RangeError$range(index, 0, $length));
    else
      throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
  },
  "%": "DataView;ArrayBufferView;TypedData_ListMixin|TypedData_ListMixin_FixedLengthListMixin|TypedData_ListMixin0|TypedData_ListMixin_FixedLengthListMixin0|TypedData_ListMixin1|TypedData_ListMixin_FixedLengthListMixin1|TypedData_ListMixin2|TypedData_ListMixin_FixedLengthListMixin2|TypedData_ListMixin3|TypedData_ListMixin_FixedLengthListMixin3|TypedData_ListMixin4|TypedData_ListMixin_FixedLengthListMixin4|TypedData_ListMixin5|TypedData_ListMixin_FixedLengthListMixin5|TypedData_ListMixin6|TypedData_ListMixin_FixedLengthListMixin6|TypedData_ListMixin7|TypedData_ListMixin_FixedLengthListMixin7|Int64List|Uint64List"
},

Float32List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSDouble];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Float32Array"
},

Float64List: {"": "TypedData_ListMixin_FixedLengthListMixin0;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSDouble];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Float64Array"
},

Int16List: {"": "TypedData_ListMixin_FixedLengthListMixin1;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int16Array"
},

Int32List: {"": "TypedData_ListMixin_FixedLengthListMixin2;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int32Array"
},

Int8List: {"": "TypedData_ListMixin_FixedLengthListMixin3;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int8Array"
},

Uint16List: {"": "TypedData_ListMixin_FixedLengthListMixin4;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Uint16Array"
},

Uint32List: {"": "TypedData_ListMixin_FixedLengthListMixin5;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Uint32Array"
},

Uint8ClampedList: {"": "TypedData_ListMixin_FixedLengthListMixin6;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "CanvasPixelArray|Uint8ClampedArray"
},

Uint8List: {"": "TypedData_ListMixin_FixedLengthListMixin7;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": ";Uint8Array"
},

TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin0: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin0: {"": "TypedData_ListMixin0+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin1: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin1: {"": "TypedData_ListMixin1+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin2: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin2: {"": "TypedData_ListMixin2+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin3: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin3: {"": "TypedData_ListMixin3+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin4: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin4: {"": "TypedData_ListMixin4+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin5: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin5: {"": "TypedData_ListMixin5+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin6: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin6: {"": "TypedData_ListMixin6+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin7: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin7: {"": "TypedData_ListMixin7+FixedLengthListMixin;", $asList: null},

Int64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  static: {
"": "Int64List_BYTES_PER_ELEMENT",
}

},

Uint64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  static: {
"": "Uint64List_BYTES_PER_ELEMENT",
}

}}],
["game_loop_common", "package:game_loop/game_loop_common.dart", , B, {
GameLoop: {"": "Object;",
  processTimers$0: function() {
    var t1, _timersLength, t2, i;
    t1 = this._timers;
    _timersLength = t1.length;
    for (t2 = this.updateTimeStep, i = 0; i < _timersLength; ++i)
      t1[i]._update$1(t2);
    for (i = _timersLength - 1; i >= 0; --i)
      t1[i].get$_isDead();
  },
  onUpdate$1: function(arg0) {
    return this.onUpdate.call$1(arg0);
  }
},

DigitalButton: {"": "Object;buttonId,framePressed?,frameReleased?,timePressed,timeReleased",
  get$down: function() {
    return this.framePressed > this.frameReleased;
  },
  $isDigitalButton: true
},

DigitalButtonEvent: {"": "Object;down<,frame,buttonId,time",
  toString$0: function(_) {
    return "Button: " + H.S(this.buttonId) + " DOWN: " + this.down + " [" + this.frame + "@" + H.S(this.time) + "]";
  }
},

DigitalInput: {"": "Object;",
  digitalButtonEvent$1: function($event) {
    var t1, button;
    t1 = this.buttons;
    button = t1.$index(t1, $event.buttonId);
    if (button == null)
      return;
    if ($event.down) {
      if (!button.get$down()) {
        button.set$framePressed($event.frame);
        button.timePressed = $event.time;
      }
    } else {
      button.set$frameReleased($event.frame);
      button.timeReleased = $event.time;
    }
  },
  DigitalInput$2: function(gameLoop, buttonIds) {
    var t1, t2, buttonId;
    for (t1 = new H.ListIterator(buttonIds, buttonIds.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(buttonIds, "JSArray", 0)]), t2 = this.buttons; t1.moveNext$0();) {
      buttonId = t1._dev$_current;
      t2.$indexSet(t2, buttonId, new B.DigitalButton(buttonId, 0, 0, 0, 0));
    }
  }
},

GameLoopTimer: {"": "Object;", $isGameLoopTimer: true}}],
["game_loop_html", "package:game_loop/game_loop_html.dart", , G, {
GameLoopGamepad: {"": "Object;gameLoop,buttons,sticks", static: {
"": "GameLoopGamepad_BUTTON0,GameLoopGamepad_BUTTON1,GameLoopGamepad_BUTTON2,GameLoopGamepad_BUTTON3,GameLoopGamepad_BUTTON4,GameLoopGamepad_BUTTON5,GameLoopGamepad_BUTTON6",
}
},

GameLoopHtml: {"": "GameLoop;element,_frameCounter,_initialized,_interrupt,_previousFrameTime,_frameTime,_resizePending,_nextResize,maxAccumulatedTime,_accumulatedTime,_gameTime,_renderInterpolationFactor,resizeLimit,_pointerLock,_keyboard,_mouse,_gamepad0,_lastMousePos,_touchSet,_rafId,_touchEvents,_keyboardEvents,_mouseEvents,onRender,onResize,onFullscreenChange,onPointerLockChange,onTouchStart,onTouchEnd,onKeyDown,updateTimeStep,game_loop_common$GameLoop$maxAccumulatedTime,_timers,onUpdate",
  get$width: function(_) {
    var t1 = this.element;
    t1 = new P.Rectangle(t1.clientLeft, t1.clientTop, t1.clientWidth, t1.clientHeight);
    t1.$builtinTypeInfo = [null];
    return t1.width;
  },
  get$height: function(_) {
    var t1 = this.element;
    t1 = new P.Rectangle(t1.clientLeft, t1.clientTop, t1.clientWidth, t1.clientHeight);
    t1.$builtinTypeInfo = [null];
    return t1.height;
  },
  _processKeyboardEvents$0: function() {
    var t1, t2, keyboardEvent, t3, down, t4, buttonId;
    for (t1 = this._keyboardEvents, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      keyboardEvent = t2._dev$_current;
      t3 = J.getInterceptor$x(keyboardEvent);
      down = J.$eq(t3.get$type(keyboardEvent), "keydown");
      t4 = t3.get$timeStamp(keyboardEvent);
      if (typeof t4 !== "number")
        throw t4.$div();
      buttonId = t3.get$keyCode(keyboardEvent);
      t3 = this._frameCounter;
      this._keyboard.digitalButtonEvent$1(new B.DigitalButtonEvent(down, t3, buttonId, t4 / 1000));
    }
    C.JSArray_methods.set$length(t1, 0);
  },
  _processMouseEvents$0: function() {
    var docElem, t1, box, t2, t3, t4, t5, canvasX, canvasY, mouseEvent, moveEvent, wheelEvent, down, time, mouseX, mouseY, x, y, clampX, withinCanvas, clampY, t6, dx, dy, t7, buttonId;
    this._mouse._resetAccumulators$0();
    docElem = document.documentElement;
    t1 = this.element;
    box = t1.getBoundingClientRect();
    t2 = J.getInterceptor$x(box);
    t3 = t2.get$left(box);
    t4 = window.pageXOffset;
    if (typeof t3 !== "number")
      throw t3.$add();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t5 = docElem.clientLeft;
    if (typeof t5 !== "number")
      throw H.iae(t5);
    canvasX = C.JSNumber_methods.toInt$0(Math.floor(t3 + t4 - t5));
    t2 = t2.get$top(box);
    t5 = window.pageYOffset;
    if (typeof t2 !== "number")
      throw t2.$add();
    if (typeof t5 !== "number")
      throw H.iae(t5);
    t4 = docElem.clientTop;
    if (typeof t4 !== "number")
      throw H.iae(t4);
    canvasY = C.JSNumber_methods.toInt$0(Math.floor(t2 + t5 - t4));
    for (t2 = this._mouseEvents, t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]); t3.moveNext$0();) {
      mouseEvent = t3._dev$_current;
      t4 = J.getInterceptor$x(mouseEvent);
      moveEvent = J.$eq(t4.get$type(mouseEvent), "mousemove");
      wheelEvent = J.$eq(t4.get$type(mouseEvent), "mousewheel");
      down = J.$eq(t4.get$type(mouseEvent), "mousedown");
      t5 = t4.get$timeStamp(mouseEvent);
      if (typeof t5 !== "number")
        throw t5.$div();
      time = t5 / 1000;
      if (moveEvent) {
        mouseX = t4.get$page(mouseEvent).x;
        t5 = new P.Point(mouseEvent.pageX, mouseEvent.pageY);
        t5.$builtinTypeInfo = [null];
        mouseY = t5.y;
        if (typeof mouseX !== "number")
          throw mouseX.$sub();
        x = mouseX - canvasX;
        if (typeof mouseY !== "number")
          throw mouseY.$sub();
        y = mouseY - canvasY;
        if (mouseX < canvasX) {
          clampX = 0;
          withinCanvas = false;
        } else {
          t5 = new P.Rectangle(t1.clientLeft, t1.clientTop, t1.clientWidth, t1.clientHeight);
          t5.$builtinTypeInfo = [null];
          t5 = t5.width;
          if (typeof t5 !== "number")
            throw H.iae(t5);
          if (mouseX > canvasX + t5) {
            t5 = new P.Rectangle(t1.clientLeft, t1.clientTop, t1.clientWidth, t1.clientHeight);
            t5.$builtinTypeInfo = [null];
            clampX = t5.width;
            withinCanvas = false;
          } else {
            clampX = x;
            withinCanvas = true;
          }
        }
        if (mouseY < canvasY) {
          clampY = 0;
          withinCanvas = false;
        } else {
          t5 = new P.Rectangle(t1.clientLeft, t1.clientTop, t1.clientWidth, t1.clientHeight);
          t5.$builtinTypeInfo = [null];
          t5 = t5.height;
          if (typeof t5 !== "number")
            throw H.iae(t5);
          if (mouseY > canvasY + t5) {
            t5 = new P.Rectangle(t1.clientLeft, t1.clientTop, t1.clientWidth, t1.clientHeight);
            t5.$builtinTypeInfo = [null];
            clampY = t5.height;
            withinCanvas = false;
          } else
            clampY = y;
        }
        t5 = this._pointerLock;
        t5.toString;
        t6 = document.webkitPointerLockElement;
        t5 = t5.gameLoop.element;
        if (t6 == null ? t5 == null : t6 === t5) {
          dx = t4.get$movement(mouseEvent).x;
          t5 = new P.Point(mouseEvent.webkitMovementX, mouseEvent.webkitMovementY);
          t5.$builtinTypeInfo = [null];
          dy = t5.y;
        } else {
          t5 = t4.get$client(mouseEvent).x;
          t6 = this._lastMousePos.x;
          if (typeof t5 !== "number")
            throw t5.$sub();
          if (typeof t6 !== "number")
            throw H.iae(t6);
          dx = t5 - t6;
          t6 = new P.Point(mouseEvent.clientX, mouseEvent.clientY);
          t6.$builtinTypeInfo = [null];
          t5 = t6.y;
          t6 = this._lastMousePos.y;
          if (typeof t5 !== "number")
            throw t5.$sub();
          if (typeof t6 !== "number")
            throw H.iae(t6);
          dy = t5 - t6;
          t6 = new P.Point(mouseEvent.clientX, mouseEvent.clientY);
          t6.$builtinTypeInfo = [null];
          this._lastMousePos = t6;
        }
        t4 = new P.Point(t4.get$_clientX(mouseEvent), mouseEvent.clientY);
        t4.$builtinTypeInfo = [null];
        this._lastMousePos = t4;
        t4 = this._frameCounter;
        this._mouse.gameLoopMouseEvent$1(new G.GameLoopMouseEvent(x, y, dx, dy, clampX, clampY, time, withinCanvas, t4));
      } else {
        t5 = this._mouse;
        if (wheelEvent) {
          H.interceptedTypeCast(mouseEvent, "$isWheelEvent");
          t4 = C.WheelEvent_methods.get$deltaX(mouseEvent);
          t6 = C.WheelEvent_methods.get$deltaY(mouseEvent);
          t7 = t5._wheelDx;
          if (typeof t4 !== "number")
            throw H.iae(t4);
          t5._wheelDx = t7 + t4;
          t4 = t5._wheelDy;
          if (typeof t6 !== "number")
            throw H.iae(t6);
          t5._wheelDy = t4 + t6;
        } else {
          buttonId = t4.get$button(mouseEvent);
          t5.digitalButtonEvent$1(new B.DigitalButtonEvent(down, this._frameCounter, buttonId, time));
        }
      }
    }
    C.JSArray_methods.set$length(t2, 0);
  },
  _processTouchEvents$0: function() {
    var t1, t2, touchEvent;
    for (t1 = this._touchEvents, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      touchEvent = t2._dev$_current;
      switch (J.get$type$x(touchEvent)) {
        case 3:
          this._touchSet._start$1(touchEvent.get$event());
          break;
        case 2:
          this._touchSet._game_loop_html$_end$1(touchEvent.get$event());
          break;
        case 1:
          this._touchSet._move$1(touchEvent.get$event());
          break;
        default:
          throw H.wrapException(P.StateError$("Invalid _GameLoopTouchEven type."));
      }
    }
    C.JSArray_methods.set$length(t1, 0);
  },
  _requestAnimationFrame$1: function(_, _0) {
    var t1, t2;
    if (this._previousFrameTime == null) {
      this._frameTime = P.DateTime$_now().millisecondsSinceEpoch / 1000;
      this._previousFrameTime = this._frameTime;
      this._processKeyboardEvents$0();
      this._processMouseEvents$0();
      this._processTouchEvents$0();
      t1 = window;
      t2 = this.get$_requestAnimationFrame(this);
      C.Window_methods._ensureRequestAnimationFrame$0(t1);
      this._rafId = C.Window_methods._html$_requestAnimationFrame$1(t1, W._wrapZone(t2));
      return;
    }
    if (this._interrupt) {
      this._rafId = null;
      return;
    }
    t1 = window;
    t2 = this.get$_requestAnimationFrame(this);
    C.Window_methods._ensureRequestAnimationFrame$0(t1);
    this._rafId = C.Window_methods._html$_requestAnimationFrame$1(t1, W._wrapZone(t2));
    this._frameCounter = this._frameCounter + 1;
    this._previousFrameTime = this._frameTime;
    this._frameTime = P.DateTime$_now().millisecondsSinceEpoch / 1000;
    t2 = this._frameTime;
    t1 = this._previousFrameTime;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    this._accumulatedTime = this._accumulatedTime + (t2 - t1);
    t1 = this.maxAccumulatedTime;
    if (this._accumulatedTime > t1)
      this._accumulatedTime = t1;
    this._processKeyboardEvents$0();
    this._processMouseEvents$0();
    this._processTouchEvents$0();
    for (t1 = this.updateTimeStep; this._accumulatedTime >= t1;) {
      this.processTimers$0();
      this._gameTime = this._gameTime + t1;
      if (this.onUpdate != null)
        this.onUpdate$1(this);
      this._accumulatedTime = this._accumulatedTime - t1;
    }
    if (this._resizePending)
      t2 = false;
    else
      t2 = false;
    if (t2) {
      this.onResize$1(this, this);
      this._nextResize = this._frameTime + this.resizeLimit;
      this._resizePending = false;
    }
    if (this.onRender != null) {
      this._renderInterpolationFactor = this._accumulatedTime / t1;
      this.onRender$1(this);
    }
  },
  get$_requestAnimationFrame: function(_receiver) {
    return new F.BoundClosure$i1(this, G.GameLoopHtml.prototype._requestAnimationFrame$1, _receiver, "_requestAnimationFrame$1");
  },
  _fullscreenChange$1: function(_) {
    return;
  },
  get$_fullscreenChange: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._fullscreenChange$1, null, "_fullscreenChange$1");
  },
  _fullscreenError$1: function(_) {
    return;
  },
  get$_fullscreenError: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._fullscreenError$1, null, "_fullscreenError$1");
  },
  _touchStartEvent$1: function($event) {
    this._touchEvents.push(new G._GameLoopTouchEvent($event, 3));
    J.preventDefault$0$x($event);
  },
  get$_touchStartEvent: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._touchStartEvent$1, null, "_touchStartEvent$1");
  },
  _touchMoveEvent$1: function($event) {
    this._touchEvents.push(new G._GameLoopTouchEvent($event, 1));
    J.preventDefault$0$x($event);
  },
  get$_touchMoveEvent: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._touchMoveEvent$1, null, "_touchMoveEvent$1");
  },
  _touchEndEvent$1: function($event) {
    this._touchEvents.push(new G._GameLoopTouchEvent($event, 2));
    J.preventDefault$0$x($event);
  },
  get$_touchEndEvent: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._touchEndEvent$1, null, "_touchEndEvent$1");
  },
  _keyDown$1: function($event) {
    this._keyboardEvents.push($event);
  },
  get$_keyDown: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._keyDown$1, null, "_keyDown$1");
  },
  _keyUp$1: function($event) {
    this._keyboardEvents.push($event);
  },
  get$_keyUp: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._keyUp$1, null, "_keyUp$1");
  },
  _mouseDown$1: function($event) {
    this._mouseEvents.push($event);
  },
  get$_mouseDown: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._mouseDown$1, null, "_mouseDown$1");
  },
  _mouseUp$1: function($event) {
    this._mouseEvents.push($event);
  },
  get$_mouseUp: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._mouseUp$1, null, "_mouseUp$1");
  },
  _mouseMove$1: function($event) {
    this._mouseEvents.push($event);
  },
  get$_mouseMove: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._mouseMove$1, null, "_mouseMove$1");
  },
  _mouseWheel$1: function($event) {
    this._mouseEvents.push($event);
    J.preventDefault$0$x($event);
  },
  get$_mouseWheel: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._mouseWheel$1, null, "_mouseWheel$1");
  },
  _resize$1: function(_) {
    if (!this._resizePending)
      this._resizePending = true;
  },
  get$_resize: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._resize$1, null, "_resize$1");
  },
  start$0: function(_) {
    var t1, t2, t3;
    if (!this._initialized) {
      C.EventStreamProvider_webkitfullscreenerror.forTarget$1(document).listen$1(this.get$_fullscreenError());
      C.EventStreamProvider_webkitfullscreenchange.forTarget$1(document).listen$1(this.get$_fullscreenChange());
      t1 = this.element;
      t1.toString;
      t2 = C.EventStreamProvider_touchstart.forElement$1(t1);
      t3 = this.get$_touchStartEvent();
      t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t3), t2._useCapture);
      H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
      t3._tryResume$0();
      t3 = C.EventStreamProvider_touchend.forElement$1(t1);
      t2 = this.get$_touchEndEvent();
      t2 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(t2), t3._useCapture);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
      t2._tryResume$0();
      t2 = C.EventStreamProvider_touchcancel.forElement$1(t1);
      t3 = this.get$_touchEndEvent();
      t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t3), t2._useCapture);
      H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
      t3._tryResume$0();
      t3 = C.EventStreamProvider_touchmove.forElement$1(t1);
      t2 = this.get$_touchMoveEvent();
      t2 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(t2), t3._useCapture);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
      t2._tryResume$0();
      C.EventStreamProvider_keydown.forTarget$1(window).listen$1(this.get$_keyDown());
      C.EventStreamProvider_keyup.forTarget$1(window).listen$1(this.get$_keyUp());
      C.EventStreamProvider_resize.forTarget$1(window).listen$1(this.get$_resize());
      t2 = C.EventStreamProvider_mousemove.forElement$1(t1);
      t3 = this.get$_mouseMove();
      t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t3), t2._useCapture);
      H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
      t3._tryResume$0();
      t3 = C.EventStreamProvider_mousedown.forElement$1(t1);
      t2 = this.get$_mouseDown();
      t2 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(t2), t3._useCapture);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
      t2._tryResume$0();
      t2 = C.EventStreamProvider_mouseup.forElement$1(t1);
      t3 = this.get$_mouseUp();
      t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t3), t2._useCapture);
      H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
      t3._tryResume$0();
      t1 = C._CustomEventStreamProvider__determineMouseWheelEventType.forElement$1(t1);
      t3 = this.get$_mouseWheel();
      t3 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t3), t1._useCapture);
      H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
      t3._tryResume$0();
      this._initialized = true;
    }
    this._interrupt = false;
    t1 = window;
    t2 = this.get$_requestAnimationFrame(this);
    C.Window_methods._ensureRequestAnimationFrame$0(t1);
    this._rafId = C.Window_methods._html$_requestAnimationFrame$1(t1, W._wrapZone(t2));
  },
  onRender$1: function(arg0) {
    return this.onRender.call$1(arg0);
  },
  onResize$1: function($receiver, arg0) {
    return this.onResize.call$1(arg0);
  },
  GameLoopHtml$1: function(element) {
    var t1 = new G.Keyboard(this, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, B.DigitalButton), null);
    t1.DigitalInput$2(this, $.get$Keyboard__buttonIds());
    this._keyboard = t1;
    t1 = new G.Mouse(0, 0, 0, 0, 0, 0, 0, 0, false, 0, 0, this, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, B.DigitalButton), null);
    t1.DigitalInput$2(this, $.get$Mouse__buttonIds());
    this._mouse = t1;
    this._gamepad0 = new G.GameLoopGamepad(this, null, null);
    this._pointerLock = G.PointerLock$(this);
    this._touchSet = new G.GameLoopTouchSet(P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, G.GameLoopTouch), this);
  },
  static: {
GameLoopHtml$: function(element) {
  var t1, t2, t3, t4, t5;
  t1 = new P.Point(0, 0);
  H.setRuntimeTypeInfo(t1, [null]);
  t2 = P.List_List(null, G._GameLoopTouchEvent);
  H.setRuntimeTypeInfo(t2, [G._GameLoopTouchEvent]);
  t3 = P.List_List(null, W.KeyboardEvent);
  H.setRuntimeTypeInfo(t3, [W.KeyboardEvent]);
  t4 = P.List_List(null, W.MouseEvent);
  H.setRuntimeTypeInfo(t4, [W.MouseEvent]);
  t5 = P.List_List(null, B.GameLoopTimer);
  H.setRuntimeTypeInfo(t5, [B.GameLoopTimer]);
  t5 = new G.GameLoopHtml(element, 0, false, false, null, 0, false, 0, 0.03, 0, 0, 0, 0.05, null, null, null, null, t1, null, null, t2, t3, t4, null, null, null, null, null, null, null, 0.015, 0.03, t5, null);
  t5.GameLoopHtml$1(element);
  return t5;
}}

},

Keyboard: {"": "DigitalInput;gameLoop,buttons,interceptor", static: {
"": "Keyboard_A,Keyboard_B,Keyboard_C,Keyboard_D,Keyboard_E,Keyboard_F,Keyboard_G,Keyboard_H,Keyboard_I,Keyboard_J,Keyboard_K,Keyboard_L,Keyboard_M,Keyboard_N,Keyboard_O,Keyboard_P,Keyboard_Q,Keyboard_R,Keyboard_S,Keyboard_T,Keyboard_U,Keyboard_V,Keyboard_W,Keyboard_X,Keyboard_Y,Keyboard_Z,Keyboard_SHIFT,Keyboard_CTRL,Keyboard_ALT,Keyboard_SPACE,Keyboard_ZERO,Keyboard_ONE,Keyboard_TWO,Keyboard_THREE,Keyboard_FOUR,Keyboard_FIVE,Keyboard_SIX,Keyboard_SEVEN,Keyboard_EIGHT,Keyboard_NINE,Keyboard_ENTER,Keyboard_UP,Keyboard_DOWN,Keyboard_LEFT,Keyboard_RIGHT,Keyboard_ESCAPE,Keyboard_APOSTROPHE,Keyboard_BACKSLASH,Keyboard_BACKSPACE,Keyboard_CAPS_LOCK,Keyboard_CLOSE_SQUARE_BRACKET,Keyboard_COMMA,Keyboard_CONTEXT_MENU,Keyboard_DASH,Keyboard_DELETE,Keyboard_END,Keyboard_EQUALS,Keyboard_F1,Keyboard_F2,Keyboard_F3,Keyboard_F4,Keyboard_F5,Keyboard_F6,Keyboard_F7,Keyboard_F8,Keyboard_F9,Keyboard_F10,Keyboard_F11,Keyboard_F12,Keyboard_FF_EQUALS,Keyboard_FF_SEMICOLON,Keyboard_FIRST_MEDIA_KEY,Keyboard_HOME,Keyboard_INSERT,Keyboard_LAST_MEDIA_KEY,Keyboard_MAC_ENTER,Keyboard_MAC_FF_META,Keyboard_META,Keyboard_NUM_CENTER,Keyboard_NUM_DELETE,Keyboard_NUM_DIVISION,Keyboard_NUM_EAST,Keyboard_NUM_EIGHT,Keyboard_NUM_FIVE,Keyboard_NUM_FOUR,Keyboard_NUM_INSERT,Keyboard_NUM_MINUS,Keyboard_NUM_MULTIPLY,Keyboard_NUM_NINE,Keyboard_NUM_NORTH,Keyboard_NUM_NORTH_EAST,Keyboard_NUM_NORTH_WEST,Keyboard_NUM_ONE,Keyboard_NUM_PERIOD,Keyboard_NUM_PLUS,Keyboard_NUM_SEVEN,Keyboard_NUM_SIX,Keyboard_NUM_SOUTH,Keyboard_NUM_SOUTH_EAST,Keyboard_NUM_SOUTH_WEST,Keyboard_NUM_THREE,Keyboard_NUM_TWO,Keyboard_NUM_WEST,Keyboard_NUM_ZERO,Keyboard_NUMLOCK,Keyboard_OPEN_SQUARE_BRACKET,Keyboard_PAGE_UP,Keyboard_PAGE_DOWN,Keyboard_PAUSE,Keyboard_PERIOD,Keyboard_PRINT_SCREEN,Keyboard_QUESTION_MARK,Keyboard_SCROLL_LOCK,Keyboard_SEMICOLON,Keyboard_SINGLE_QUOTE,Keyboard_SLASH,Keyboard_TAB,Keyboard_TILDE,Keyboard_WIN_IME,Keyboard_WIN_KEY,Keyboard_WIN_KEY_FF_LINUX,Keyboard_WIN_KEY_LEFT,Keyboard_WIN_KEY_RIGHT,Keyboard__buttonIds",
}
},

GameLoopMouseEvent: {"": "Object;x>,y>,dx,dy,clampX,clampY,time,withinCanvas,frame"},

Mouse: {"": "DigitalInput;_dx,_dy,_x,_y,_clampX,_clampY,_wheelDx,_wheelDy,_withinCanvas,_time,_frame,gameLoop,buttons,interceptor",
  get$x: function(_) {
    return this._x;
  },
  get$y: function(_) {
    return this._y;
  },
  gameLoopMouseEvent$1: function($event) {
    var t1, t2;
    this._x = $event.x;
    this._y = $event.y;
    this._time = $event.time;
    this._frame = $event.frame;
    t1 = this._dx;
    t2 = $event.dx;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    this._dx = t1 + t2;
    t2 = this._dy;
    t1 = $event.dy;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    this._dy = t2 + t1;
    this._clampX = $event.clampX;
    this._clampY = $event.clampY;
    this._withinCanvas = $event.withinCanvas;
  },
  _resetAccumulators$0: function() {
    this._wheelDx = 0;
    this._wheelDy = 0;
    this._dx = 0;
    this._dy = 0;
  },
  static: {
"": "Mouse_LEFT,Mouse_MIDDLE,Mouse_RIGHT,Mouse__buttonIds",
}

},

PointerLock: {"": "Object;gameLoop,lockOnClick",
  _onClick$1: function($event) {
    if (this.lockOnClick)
      this.gameLoop.element.webkitRequestPointerLock();
  },
  get$_onClick: function() {
    return new H.BoundClosure$1(this, G.PointerLock.prototype._onClick$1, null, "_onClick$1");
  },
  _onPointerLockChange$1: function($event) {
  },
  get$_onPointerLockChange: function() {
    return new H.BoundClosure$1(this, G.PointerLock.prototype._onPointerLockChange$1, null, "_onPointerLockChange$1");
  },
  PointerLock$1: function(gameLoop) {
    var t1, t2;
    t1 = this.gameLoop.element;
    t1.toString;
    t1 = C.EventStreamProvider_click.forElement$1(t1);
    t2 = this.get$_onClick();
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    C.EventStreamProvider_webkitpointerlockchange.forTarget$1(document).listen$1(this.get$_onPointerLockChange());
  },
  static: {
PointerLock$: function(gameLoop) {
  var t1 = new G.PointerLock(gameLoop, true);
  t1.PointerLock$1(gameLoop);
  return t1;
}}

},

_GameLoopTouchEvent: {"": "Object;event<,type>", $is_GameLoopTouchEvent: true, static: {
"": "_GameLoopTouchEvent_Move,_GameLoopTouchEvent_End,_GameLoopTouchEvent_Start",
}
},

GameLoopTouchPosition: {"": "Object;x>,y>,dx,dy,time,frame", $isGameLoopTouchPosition: true},

GameLoopTouch: {"": "Object;id>,positions<", $isGameLoopTouch: true},

GameLoopTouchSet: {"": "Object;activeTouches,gameLoop",
  _addPosition$2: function(glTouch, touch) {
    var t1, t2, t3, t4;
    t1 = new P.Point(touch.pageX, touch.pageY);
    H.setRuntimeTypeInfo(t1, [null]);
    t2 = new P.Point(touch.pageX, touch.pageY);
    H.setRuntimeTypeInfo(t2, [null]);
    t3 = this.gameLoop;
    t4 = t3._gameTime;
    t3 = t3._frameCounter;
    glTouch.get$positions().push(new G.GameLoopTouchPosition(t1.x, t2.y, 0, 0, t4, t3));
  },
  _start$1: function($event) {
    J.forEach$1$ax(J.get$changedTouches$x($event), new G.GameLoopTouchSet__start_closure(this));
    this._verifyTouchList$1($event.touches);
  },
  _game_loop_html$_end$1: function($event) {
    J.forEach$1$ax(J.get$changedTouches$x($event), new G.GameLoopTouchSet__end_closure(this));
    this._verifyTouchList$1($event.touches);
  },
  _move$1: function($event) {
    J.forEach$1$ax(J.get$changedTouches$x($event), new G.GameLoopTouchSet__move_closure(this));
    this._verifyTouchList$1($event.touches);
  },
  _inTouchList$2: function(touches, identifier) {
    var t1, i, t2;
    for (t1 = touches.length, i = 0; i < t1; ++i) {
      t2 = touches[i].identifier;
      if (t2 == null ? identifier == null : t2 === identifier)
        return true;
    }
    return false;
  },
  _verifyTouchList$1: function(touches) {
    var t1, t2;
    t1 = touches.length;
    t2 = this.activeTouches;
    if (t1 !== t2._collection$_length)
      P.print("" + t1 + " " + t2._collection$_length);
    t2.forEach$1(t2, new G.GameLoopTouchSet__verifyTouchList_closure(this, touches));
  }
},

GameLoopTouchSet__start_closure: {"": "Closure;this_0",
  call$1: function(touch) {
    var t1, t2, glTouch;
    t1 = J.get$identifier$x(touch);
    t2 = P.List_List(null, G.GameLoopTouchPosition);
    H.setRuntimeTypeInfo(t2, [G.GameLoopTouchPosition]);
    glTouch = new G.GameLoopTouch(t1, t2);
    t1 = this.this_0;
    t2 = t1.activeTouches;
    if (t2.$index(t2, touch.identifier) != null)
      return;
    t2.$indexSet(t2, touch.identifier, glTouch);
    t1._addPosition$2(glTouch, touch);
  },
  $is_args1: true
},

GameLoopTouchSet__end_closure: {"": "Closure;this_0",
  call$1: function(touch) {
    var t1, t2, glTouch;
    t1 = this.this_0;
    t2 = t1.activeTouches;
    glTouch = t2.$index(t2, J.get$identifier$x(touch));
    if (glTouch == null)
      return;
    t2.remove$1(t2, touch.identifier);
    t1._addPosition$2(glTouch, touch);
  },
  $is_args1: true
},

GameLoopTouchSet__move_closure: {"": "Closure;this_0",
  call$1: function(touch) {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.activeTouches;
    t1._addPosition$2(t2.$index(t2, J.get$identifier$x(touch)), touch);
  },
  $is_args1: true
},

GameLoopTouchSet__verifyTouchList_closure: {"": "Closure;this_0,touches_1",
  call$2: function(identifier, touch) {
    if (!this.this_0._inTouchList$2(this.touches_1, identifier))
      P.print("Did not find " + H.S(identifier));
  },
  $is_args2: true
}}],
["glitchTime", "package:coUlib/glitch-time.dart", , G, {
getDate: function() {
  var sec, year, day_of_year, hour, minute, MonthAndDay, day_of_week, suffix, h, m, ampm, CurrentTime, t1, t2, t3, t4;
  sec = C.JSNumber_methods.toInt$0(Math.floor(P.DateTime$_now().millisecondsSinceEpoch * 0.001)) - 1238562000;
  year = C.JSNumber_methods.toInt$0(Math.floor(sec / 4435200));
  sec -= year * 4435200;
  day_of_year = C.JSNumber_methods.toInt$0(Math.floor(sec / 14400));
  sec -= day_of_year * 14400;
  hour = C.JSNumber_methods.toInt$0(Math.floor(sec / 600));
  minute = C.JSNumber_methods.toInt$0(Math.floor((sec - hour * 600) / 10));
  MonthAndDay = G.day_to_md(day_of_year);
  day_of_week = C.JSInt_methods.$mod(day_of_year + 307 * year, 8);
  if (C.JSString_methods.endsWith$1(C.JSInt_methods.toString$0(MonthAndDay[1]), "1"))
    suffix = "st";
  else if (C.JSString_methods.endsWith$1(C.JSInt_methods.toString$0(MonthAndDay[1]), "2"))
    suffix = "nd";
  else
    suffix = C.JSString_methods.endsWith$1(C.JSInt_methods.toString$0(MonthAndDay[1]), "3") ? "rd" : "th";
  h = C.JSInt_methods.toString$0(hour);
  m = C.JSInt_methods.toString$0(minute);
  if (minute < 10)
    m = "0" + C.JSInt_methods.toString$0(minute);
  if (hour >= 12) {
    if (hour > 12)
      h = C.JSInt_methods.toString$0(hour - 12);
    ampm = "pm";
  } else
    ampm = "am";
  CurrentTime = (h === "0" ? C.JSInt_methods.toString$0(12) : h) + ":" + m + ampm;
  t1 = "Year " + C.JSInt_methods.toString$0(year);
  t2 = $.get$Months();
  t3 = MonthAndDay[0] - 1;
  if (t3 < 0 || t3 >= 12)
    throw H.ioore(t2, t3);
  t3 = t2[t3];
  t2 = C.JSInt_methods.toString$0(MonthAndDay[1]) + suffix;
  t4 = $.get$Days_of_Week();
  if (day_of_week < 0 || day_of_week >= 8)
    throw H.ioore(t4, day_of_week);
  return [t1, t3, t2, t4[day_of_week], CurrentTime];
},

day_to_md: function(id) {
  var months, daysinMonths, cd, i, t1;
  months = [29, 3, 53, 17, 73, 19, 13, 37, 5, 47, 11, 1];
  daysinMonths = months[0] + months[1] + months[2] + months[3] + months[4] + months[5] + months[6] + months[7] + months[8] + months[9] + months[10] + months[11];
  for (cd = 0, i = 0; i < daysinMonths; ++i) {
    if (i >= 12)
      throw H.ioore(months, i);
    t1 = months[i];
    cd += t1;
    if (cd > id)
      return [i + 1, id + 1 - (cd - t1)];
  }
  return [0, 0];
}}],
["html_common", "dart:html_common", , P, {
convertNativeToDart_DateTime: function(date) {
  return P.DateTime$fromMillisecondsSinceEpoch(date.getTime(), true);
},

convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
  var copies = [];
  return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
},

Device_isOpera: function() {
  if ($.Device__isOpera == null)
    $.Device__isOpera = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
  return $.Device__isOpera;
},

Device_isIE: function() {
  if ($.Device__isIE == null)
    $.Device__isIE = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "Trident/", 0);
  return $.Device__isIE;
},

Device_isFirefox: function() {
  if ($.Device__isFirefox == null)
    $.Device__isFirefox = J.contains$2$asx(window.navigator.userAgent, "Firefox", 0);
  return $.Device__isFirefox;
},

Device_isWebKit: function() {
  if ($.Device__isWebKit == null)
    $.Device__isWebKit = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
  return $.Device__isWebKit;
},

Device_cssPrefix: function() {
  if ($.Device__cachedCssPrefix == null)
    if (P.Device_isFirefox() === true)
      $.Device__cachedCssPrefix = "-moz-";
    else if (P.Device_isIE() === true)
      $.Device__cachedCssPrefix = "-ms-";
    else if (P.Device_isOpera() === true)
      $.Device__cachedCssPrefix = "-o-";
    else
      $.Device__cachedCssPrefix = "-webkit-";
  return $.Device__cachedCssPrefix;
},

convertNativeToDart_AcceptStructuredClone_findSlot: {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_1.push(null);
    return $length;
  },
  $is_args1: true
},

convertNativeToDart_AcceptStructuredClone_readSlot: {"": "Closure;copies_2",
  call$1: function(i) {
    var t1 = this.copies_2;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $is_args1: true
},

convertNativeToDart_AcceptStructuredClone_writeSlot: {"": "Closure;copies_3",
  call$2: function(i, x) {
    var t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    t1[i] = x;
  },
  $is_args2: true
},

convertNativeToDart_AcceptStructuredClone_walk: {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, t2, key, $length, i;
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (e instanceof Date)
      return P.convertNativeToDart_DateTime(e);
    if (e instanceof RegExp)
      throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = Object.keys(e), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
        key = t2._dev$_current;
        copy.$indexSet(copy, key, this.call$1(e[key]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(e);
      $length = t1.get$length(e);
      copy = this.mustCopy_4 ? new Array($length) : e;
      this.writeSlot_7.call$2(slot, copy);
      if (typeof $length !== "number")
        throw H.iae($length);
      t2 = J.getInterceptor$ax(copy);
      i = 0;
      for (; i < $length; ++i)
        t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
      return copy;
    }
    return e;
  },
  $is_args1: true
},

CssClassSetImpl: {"": "Object;",
  toString$0: function(_) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, " ");
  },
  toggle$2: function(value, shouldAdd) {
    var s, result;
    s = this.readClasses$0();
    if ((shouldAdd == null ? !s.contains$1(s, value) : shouldAdd) === true) {
      s.add$1(s, value);
      result = true;
    } else {
      s.remove$1(s, value);
      result = false;
    }
    this.writeClasses$1(s);
    return result;
  },
  toggle$1: function(value) {
    return this.toggle$2(value, null);
  },
  get$iterator: function(_) {
    var t1 = this.readClasses$0();
    t1 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null);
    H.setRuntimeTypeInfo(t1, [null]);
    t1._cell = t1._set._first;
    return t1;
  },
  forEach$1: function(_, f) {
    var t1 = this.readClasses$0();
    t1.forEach$1(t1, f);
  },
  map$1: function(_, f) {
    var t1 = this.readClasses$0();
    return H.MappedIterable_MappedIterable(t1, f, H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  get$isEmpty: function(_) {
    return this.readClasses$0()._collection$_length === 0;
  },
  get$isNotEmpty: function(_) {
    return this.readClasses$0()._collection$_length !== 0;
  },
  get$length: function(_) {
    return this.readClasses$0()._collection$_length;
  },
  contains$1: function(_, value) {
    var t1 = this.readClasses$0();
    return t1.contains$1(t1, value);
  },
  lookup$1: function(value) {
    var t1 = this.readClasses$0();
    return t1.contains$1(t1, value) ? value : null;
  },
  add$1: function(_, value) {
    return this.modify$1(new P.CssClassSetImpl_add_closure(value));
  },
  remove$1: function(_, value) {
    var s, result;
    if (typeof value !== "string")
      return false;
    s = this.readClasses$0();
    result = s.remove$1(s, value);
    this.writeClasses$1(s);
    return result;
  },
  get$last: function(_) {
    var t1 = this.readClasses$0()._last;
    if (t1 == null)
      H.throwExpression(new P.StateError("No elements"));
    return t1.get$_collection$_element();
  },
  elementAt$1: function(_, index) {
    var t1 = this.readClasses$0();
    return t1.elementAt$1(t1, index);
  },
  modify$1: function(f) {
    var s, ret;
    s = this.readClasses$0();
    ret = f.call$1(s);
    this.writeClasses$1(s);
    return ret;
  },
  $isEfficientLength: true
},

CssClassSetImpl_add_closure: {"": "Closure;value_0",
  call$1: function(s) {
    return J.add$1$ax(s, this.value_0);
  },
  $is_args1: true
},

FilteredElementList: {"": "ListBase;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
  },
  forEach$1: function(_, f) {
    H.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    J.replaceWith$1$x(t1[index], value);
  },
  set$length: function(_, newLength) {
    var len = this.get$_filtered().length;
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw H.wrapException(new P.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = J.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0();)
      t2.appendChild(t1.get$current());
  },
  contains$1: function(_, needle) {
    var t1 = J.getInterceptor(needle);
    if (typeof needle !== "object" || needle === null || !t1.$isElement)
      return false;
    return needle.parentNode === this._node;
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnsupportedError$("Cannot setRange on filtered list"));
  },
  removeRange$2: function(_, start, end) {
    H.IterableMixinWorkaround_forEach(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
  },
  clear$0: function(_) {
    this._childNodes._this.textContent = "";
  },
  removeAt$1: function(_, index) {
    var t1, result;
    t1 = this.get$_filtered();
    if (index < 0 || index >= t1.length)
      throw H.ioore(t1, index);
    result = t1[index];
    J.remove$0$ax(result);
    return result;
  },
  remove$1: function(_, element) {
    var t1, i, indexElement;
    t1 = J.getInterceptor(element);
    if (typeof element !== "object" || element === null || !t1.$isElement)
      return false;
    for (i = 0; i < this.get$_filtered().length; ++i) {
      t1 = this.get$_filtered();
      if (i >= t1.length)
        throw H.ioore(t1, i);
      indexElement = t1[i];
      if (indexElement == null ? element == null : indexElement === element) {
        J.remove$0$ax(indexElement);
        return true;
      }
    }
    return false;
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this.get$_filtered();
    t2 = new H.ListIterator(t1, t1.length, 0, null);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]);
    return t2;
  },
  $asListBase: null,
  $asList: null
},

FilteredElementList__filtered_closure: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor(n);
    return typeof n === "object" && n !== null && !!t1.$isElement;
  },
  $is_args1: true
},

FilteredElementList_removeRange_closure: {"": "Closure;",
  call$1: function(el) {
    return J.remove$0$ax(el);
  },
  $is_args1: true
}}],
["intl", "package:intl/intl.dart", , T, {
Intl_verifiedLocale: function(newLocale, localeExists, onFailure) {
  return T.Intl_getCurrentLocale();
},

Intl__throwLocaleError: function(localeName) {
  throw H.wrapException(new P.ArgumentError("Invalid locale '" + H.S(localeName) + "'"));
},

Intl_getCurrentLocale: function() {
  if ($.Intl_defaultLocale == null)
    $.Intl_defaultLocale = $.Intl_systemLocale;
  return $.Intl_defaultLocale;
},

NumberFormat: {"": "Object;_negativePrefix,_positivePrefix,_negativeSuffix,_positiveSuffix,_groupingSize,_decimalSeparatorAlwaysShown,_useSignForPositiveExponent,_useExponentialNotation,maximumIntegerDigits,minimumIntegerDigits,maximumFractionDigits,minimumFractionDigits,minimumExponentDigits,_multiplier,_intl$_pattern,_locale,_symbols,_intl$_buffer,_maxInt,_zero",
  format$1: function(_, number) {
    var t1, result;
    if (J.getInterceptor$n(number).get$isNaN(number))
      return this._symbols.get$NAN();
    if (number == Infinity || number == -Infinity) {
      t1 = C.JSNumber_methods.get$isNegative(number) ? this._negativePrefix : this._positivePrefix;
      return t1 + this._symbols.get$INFINITY();
    }
    this._intl$_buffer = P.StringBuffer$("");
    t1 = C.JSNumber_methods.get$isNegative(number) ? this._negativePrefix : this._positivePrefix;
    this._intl$_buffer.write$1(t1);
    t1 = Math.abs(number) * this._multiplier;
    if (this._useExponentialNotation)
      this._formatExponential$1(t1);
    else
      this._formatFixed$1(t1);
    t1 = C.JSNumber_methods.get$isNegative(number) ? this._negativeSuffix : this._positiveSuffix;
    this._intl$_buffer.write$1(t1);
    result = J.toString$0(this._intl$_buffer);
    this._intl$_buffer = null;
    return result;
  },
  _formatExponential$1: function(number) {
    var t1, exponent, mantissa;
    if (number === 0) {
      this._formatFixed$1(number);
      this._formatExponent$1(0);
      return;
    }
    t1 = Math.log(number);
    exponent = C.JSNumber_methods.toInt$0(Math.floor(t1 / Math.log(10)));
    mantissa = number / Math.pow(10, exponent);
    t1 = this.maximumIntegerDigits;
    if (t1 > 1 && t1 > this.minimumIntegerDigits)
      for (; C.JSInt_methods.$mod(exponent, t1) !== 0;) {
        mantissa *= 10;
        --exponent;
      }
    else {
      t1 = this.minimumIntegerDigits;
      if (t1 < 1) {
        ++exponent;
        mantissa /= 10;
      } else {
        --t1;
        exponent -= t1;
        mantissa *= Math.pow(10, t1);
      }
    }
    this._formatFixed$1(mantissa);
    this._formatExponent$1(exponent);
  },
  _formatExponent$1: function(exponent) {
    var t1 = this._symbols.get$EXP_SYMBOL();
    this._intl$_buffer.write$1(t1);
    if (exponent < 0) {
      exponent = -exponent;
      t1 = this._symbols.get$MINUS_SIGN();
      this._intl$_buffer.write$1(t1);
    } else if (this._useSignForPositiveExponent) {
      t1 = this._symbols.get$PLUS_SIGN();
      this._intl$_buffer.write$1(t1);
    }
    this._pad$2(this.minimumExponentDigits, C.JSNumber_methods.toString$0(exponent));
  },
  _formatFixed$1: function(number) {
    var t1, power, shiftedNumber, intValue, fracValue, fractionPresent, paddingDigits, howManyDigitsTooBig, divisor, t2, digitLength, i, t3, t4, t5, charCodes;
    t1 = this.maximumFractionDigits;
    power = Math.pow(10, t1);
    shiftedNumber = number * power;
    if (typeof shiftedNumber === "number")
      shiftedNumber = C.JSNumber_methods.roundToDouble$0(shiftedNumber);
    if (shiftedNumber == Infinity || shiftedNumber == -Infinity) {
      intValue = C.JSNumber_methods.toInt$0(number);
      fracValue = 0;
    } else {
      intValue = C.JSInt_methods.$tdiv(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(shiftedNumber)), power);
      fracValue = C.JSNumber_methods.toInt$0(Math.floor(shiftedNumber - intValue * power));
    }
    fractionPresent = this.minimumFractionDigits > 0 || fracValue > 0;
    paddingDigits = P.StringBuffer$("");
    if (typeof 1 === "number" && intValue > this._maxInt) {
      howManyDigitsTooBig = C.JSNumber_methods.toInt$0(Math.ceil(Math.log(intValue) / 2.302585092994046)) - 16;
      divisor = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(Math.pow(10, howManyDigitsTooBig)));
      for (t1 = C.JSInt_methods.toInt$0(howManyDigitsTooBig), t2 = P.List_List(t1, null), t1 = new H.ListIterator(t2, t1, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]); t1.moveNext$0();) {
        t2 = this._symbols.get$ZERO_DIGIT();
        paddingDigits._contents = paddingDigits._contents + t2;
      }
      intValue = C.JSNumber_methods.toInt$0(intValue / divisor);
    }
    t1 = new J._CodeUnits(H.S(intValue) + H.S(paddingDigits)).__interceptors$_string;
    digitLength = t1.length;
    if (intValue > 0 || this.minimumIntegerDigits > 0) {
      this._pad$1(this.minimumIntegerDigits - digitLength);
      for (t2 = this._zero, i = 0; i < digitLength; ++i) {
        if (i >= digitLength)
          H.throwExpression(P.RangeError$value(i));
        t3 = t1.charCodeAt(i);
        t4 = this._intl$_buffer;
        t5 = new J._CodeUnits(this._symbols.get$ZERO_DIGIT());
        t3 = J.$sub$n(J.$add$ns(t5.get$first(t5), t3), t2);
        t4.toString;
        charCodes = P.List_List$filled(1, t3, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t3 = H.Primitives_stringFromCharCodes(charCodes);
        t4._contents = t4._contents + t3;
        this._group$2(digitLength, i);
      }
    } else if (!fractionPresent)
      this._intl$_buffer.write$1(this._symbols.get$ZERO_DIGIT());
    if (this._decimalSeparatorAlwaysShown || fractionPresent) {
      t1 = this._symbols.get$DECIMAL_SEP();
      this._intl$_buffer.write$1(t1);
    }
    this._formatFractionPart$1(C.JSNumber_methods.toString$0(fracValue + power));
  },
  _formatFractionPart$1: function(fractionPart) {
    var fractionLength, t1, t2, fractionLength0, t3, i, t4, t5, t6, charCodes;
    fractionLength = fractionPart.length;
    t1 = this._zero;
    t2 = new J._CodeUnits(fractionPart).__interceptors$_string;
    while (true) {
      fractionLength0 = fractionLength - 1;
      if (fractionLength0 < 0)
        H.throwExpression(P.RangeError$value(fractionLength0));
      t3 = t2.length;
      if (fractionLength0 >= t3)
        H.throwExpression(P.RangeError$value(fractionLength0));
      if (!(t2.charCodeAt(fractionLength0) === t1 && fractionLength > this.minimumFractionDigits + 1))
        break;
      fractionLength = fractionLength0;
    }
    for (i = 1; i < fractionLength; ++i) {
      if (i >= t3)
        H.throwExpression(P.RangeError$value(i));
      t4 = t2.charCodeAt(i);
      t5 = this._intl$_buffer;
      t6 = new J._CodeUnits(this._symbols.get$ZERO_DIGIT());
      t4 = J.$sub$n(J.$add$ns(t6.get$first(t6), t4), t1);
      t5.toString;
      charCodes = P.List_List$filled(1, t4, J.JSInt);
      charCodes.$builtinTypeInfo = [J.JSInt];
      t4 = H.Primitives_stringFromCharCodes(charCodes);
      t5._contents = t5._contents + t4;
    }
  },
  _pad$2: function(numberOfDigits, basic) {
    var t1, i, t2, t3, x, t4, charCodes;
    for (t1 = numberOfDigits - basic.length, i = 0; i < t1; ++i) {
      t2 = this._symbols.get$ZERO_DIGIT();
      t3 = this._intl$_buffer;
      t3.toString;
      t3._contents = t3._contents + t2;
    }
    for (t1 = new J._CodeUnits(basic), t1 = t1.get$iterator(t1), t2 = this._zero; t1.moveNext$0();) {
      x = t1._dev$_current;
      t3 = this._intl$_buffer;
      t4 = new J._CodeUnits(this._symbols.get$ZERO_DIGIT());
      t4 = J.$sub$n(J.$add$ns(t4.get$first(t4), x), t2);
      t3.toString;
      charCodes = P.List_List$filled(1, t4, J.JSInt);
      charCodes.$builtinTypeInfo = [J.JSInt];
      t4 = H.Primitives_stringFromCharCodes(charCodes);
      t3._contents = t3._contents + t4;
    }
  },
  _pad$1: function(numberOfDigits) {
    return this._pad$2(numberOfDigits, "");
  },
  _group$2: function(totalLength, position) {
    var distanceFromEnd, t1, t2;
    distanceFromEnd = totalLength - position;
    if (distanceFromEnd <= 1 || this._groupingSize <= 0)
      return;
    if (C.JSInt_methods.$mod(distanceFromEnd, this._groupingSize) === 1) {
      t1 = this._symbols.get$GROUP_SEP();
      t2 = this._intl$_buffer;
      t2.toString;
      t2._contents = t2._contents + t1;
    }
  },
  _setPattern$1: function(newPattern) {
    var parser, t1, t2;
    if (newPattern == null)
      return;
    this._intl$_pattern = J.replaceAll$2$s(newPattern, " ", "\u00a0");
    parser = new T._NumberFormatParser(this, new T._StringIterator(newPattern, -1), false, null, null, null, null, null, null);
    t1 = parser.pattern;
    t2 = t1.index + 1;
    t1.index = t2;
    if (t2 >= 0)
      ;
    parser.parse$0();
  },
  toString$0: function(_) {
    return "NumberFormat(" + H.S(this._locale) + ", " + this._intl$_pattern + ")";
  },
  NumberFormat$_forPattern$2: function(locale, getPattern) {
    var t1 = $.numberFormatSymbols;
    this._symbols = t1.$index(t1, this._locale);
    this._setPattern$1(getPattern.call$1(this._symbols));
  },
  static: {
NumberFormat_NumberFormat: function(newPattern, locale) {
  return T.NumberFormat$_forPattern(locale, new T.NumberFormat_NumberFormat_closure(newPattern));
},

NumberFormat$_forPattern: function(locale, getPattern) {
  var t1, t2;
  t1 = Math.pow(2, 52);
  t2 = new J._CodeUnits("0");
  t2 = t2.get$first(t2);
  t2 = new T.NumberFormat("-", "", "", "", 3, false, false, false, 40, 1, 3, 0, 0, 1, null, T.Intl_verifiedLocale(locale, T.NumberFormat_localeExists$closure, T.Intl__throwLocaleError$closure), null, null, t1, t2);
  t2.NumberFormat$_forPattern$2(locale, getPattern);
  return t2;
},

NumberFormat_localeExists: function(localeName) {
  var t1;
  if (localeName == null)
    return false;
  t1 = $.numberFormatSymbols;
  return t1.containsKey$1(t1, localeName);
}}

},

NumberFormat_NumberFormat_closure: {"": "Closure;newPattern_0",
  call$1: function(x) {
    return this.newPattern_0;
  },
  $is_args1: true
},

_NumberFormatParser: {"": "Object;format,pattern,inQuote,decimalPos,digitLeftCount,zeroDigitCount,digitRightCount,groupingCount,trunk",
  parse$0: function() {
    var t1, trunk, t2, t3, t4, t5, t6, t7, t8, each, t9, t10;
    t1 = this.format;
    t1._positivePrefix = this._parseAffix$0();
    trunk = this._parseTrunk$0();
    t1._positiveSuffix = this._parseAffix$0();
    t2 = this.pattern;
    t3 = t2.index;
    if (t3 >= 0 && t3 < t2.input.length) {
      t4 = t2.input;
      if (t3 >>> 0 !== t3 || t3 >= t4.length)
        throw H.ioore(t4, t3);
      t4 = t4[t3];
    } else
      t4 = null;
    if (t4 === ";") {
      ++t3;
      t2.index = t3;
      if (t3 >= 0)
        ;
      t1._negativePrefix = this._parseAffix$0();
      t3 = new T._StringIterable(new T._StringIterator(trunk, -1)).iterator;
      t4 = t3.input;
      t5 = t4.length;
      t6 = t2.input;
      t7 = t6.length;
      while (true) {
        t8 = t3.index + 1;
        t3.index = t8;
        if (!(t8 >= 0 && t8 < t5))
          break;
        t8 = t3.index;
        if (t8 >= 0 && t8 < t5) {
          if (t8 >>> 0 !== t8 || t8 >= t5)
            throw H.ioore(t4, t8);
          each = t4[t8];
        } else
          each = null;
        t8 = t2.index;
        t9 = t8 >= 0;
        if (t9 && t8 < t7) {
          if (t8 >>> 0 !== t8 || t8 >= t7)
            throw H.ioore(t6, t8);
          t10 = t6[t8];
        } else
          t10 = null;
        if (t10 == null ? each != null : t10 !== each) {
          if (t9 && t8 < t7) {
            if (t8 >>> 0 !== t8 || t8 >= t7)
              throw H.ioore(t6, t8);
            t9 = t6[t8];
          } else
            t9 = null;
          t9 = t9 != null;
        } else
          t9 = false;
        if (t9)
          throw H.wrapException(P.FormatException$("Positive and negative trunks must be the same"));
        ++t8;
        t2.index = t8;
        if (t8 >= 0)
          ;
      }
      t1._negativeSuffix = this._parseAffix$0();
    } else {
      t1._negativePrefix = t1._positivePrefix + t1._negativePrefix;
      t1._negativeSuffix = t1._negativeSuffix + t1._positiveSuffix;
    }
  },
  _parseAffix$0: function() {
    var affix, t1, t2, loop, t3;
    affix = P.StringBuffer$("");
    this.inQuote = false;
    for (t1 = this.pattern, t2 = t1.input.length, loop = true; loop;)
      if (this.parseCharacterAffix$1(affix)) {
        t3 = t1.index + 1;
        t1.index = t3;
        loop = t3 >= 0 && t3 < t2;
      } else
        loop = false;
    return affix._contents;
  },
  parseCharacterAffix$1: function(affix) {
    var t1, t2, t3, ch, t4, nextChar, str;
    t1 = this.pattern;
    t2 = t1.index;
    if (t2 >= 0 && t2 < t1.input.length) {
      t3 = t1.input;
      if (t2 >>> 0 !== t2 || t2 >= t3.length)
        throw H.ioore(t3, t2);
      ch = t3[t2];
    } else
      ch = null;
    if (ch == null)
      return false;
    if (ch === "'") {
      ++t2;
      t3 = t2 >= 0;
      if (t3 && t2 < t1.input.length) {
        t4 = t1.input;
        if (t2 >>> 0 !== t2 || t2 >= t4.length)
          throw H.ioore(t4, t2);
        nextChar = t4[t2];
      } else
        nextChar = null;
      if (nextChar === "'") {
        t1.index = t2;
        if (t3)
          ;
        affix._contents = affix._contents + "'";
      } else
        this.inQuote = !this.inQuote;
      return true;
    }
    if (this.inQuote) {
      str = typeof ch === "string" ? ch : ch;
      affix._contents = affix._contents + str;
    } else
      switch (ch) {
        case "#":
        case "0":
        case ",":
        case ".":
        case ";":
          return false;
        case "\u00a4":
          t1 = this.format._symbols.get$DEF_CURRENCY_CODE();
          affix._contents = affix._contents + t1;
          break;
        case "%":
          t1 = this.format;
          if (t1._multiplier !== 1)
            throw H.wrapException(P.FormatException$("Too many percent/permill"));
          t1._multiplier = 100;
          t1 = t1._symbols.get$PERCENT();
          affix._contents = affix._contents + t1;
          break;
        case "\u2030":
          t1 = this.format;
          if (t1._multiplier !== 1)
            throw H.wrapException(P.FormatException$("Too many percent/permill"));
          t1._multiplier = 1000;
          t1 = t1._symbols.get$PERMILL();
          affix._contents = affix._contents + t1;
          break;
        default:
          str = typeof ch === "string" ? ch : ch;
          affix._contents = affix._contents + str;
      }
    return true;
  },
  _parseTrunk$0: function() {
    var t1, t2, t3, loop, t4, n, totalDigits, effectiveDecimalPos;
    this.decimalPos = -1;
    this.digitLeftCount = 0;
    this.zeroDigitCount = 0;
    this.digitRightCount = 0;
    this.groupingCount = -1;
    this.trunk = P.StringBuffer$("");
    t1 = this.pattern;
    t2 = t1.input;
    t3 = t2.length;
    loop = true;
    while (true) {
      t4 = t1.index;
      if (t4 >= 0 && t4 < t3) {
        if (t4 >>> 0 !== t4 || t4 >= t3)
          throw H.ioore(t2, t4);
        t4 = t2[t4];
      } else
        t4 = null;
      if (!(t4 != null && loop))
        break;
      loop = this.parseTrunkCharacter$0();
    }
    if (this.zeroDigitCount === 0) {
      t1 = this.digitLeftCount;
      if (typeof t1 !== "number")
        throw t1.$gt();
      if (t1 > 0) {
        t1 = this.decimalPos;
        if (typeof t1 !== "number")
          throw t1.$ge();
        t1 = t1 >= 0;
      } else
        t1 = false;
    } else
      t1 = false;
    if (t1) {
      n = this.decimalPos;
      if (n === 0) {
        if (typeof n !== "number")
          throw n.$add();
        ++n;
      }
      t1 = this.digitLeftCount;
      if (typeof t1 !== "number")
        throw t1.$sub();
      if (typeof n !== "number")
        throw H.iae(n);
      this.digitRightCount = t1 - n;
      this.digitLeftCount = n - 1;
      this.zeroDigitCount = 1;
    }
    t1 = this.decimalPos;
    if (typeof t1 !== "number")
      throw t1.$lt();
    if (t1 < 0) {
      t3 = this.digitRightCount;
      if (typeof t3 !== "number")
        throw t3.$gt();
      t3 = t3 > 0;
    } else
      t3 = false;
    if (!t3) {
      if (t1 >= 0) {
        t3 = this.digitLeftCount;
        if (typeof t3 !== "number")
          throw H.iae(t3);
        if (!(t1 < t3)) {
          t4 = this.zeroDigitCount;
          if (typeof t4 !== "number")
            throw H.iae(t4);
          t4 = t1 > t3 + t4;
          t3 = t4;
        } else
          t3 = true;
      } else
        t3 = false;
      t3 = t3 || this.groupingCount === 0;
    } else
      t3 = true;
    if (t3)
      throw H.wrapException(P.FormatException$("Malformed pattern \"" + t2 + "\""));
    t2 = this.digitLeftCount;
    t3 = this.zeroDigitCount;
    if (typeof t2 !== "number")
      throw t2.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.digitRightCount;
    if (typeof t4 !== "number")
      throw H.iae(t4);
    totalDigits = t2 + t3 + t4;
    t4 = this.format;
    t4.maximumFractionDigits = t1 >= 0 ? totalDigits - t1 : 0;
    t1 = this.decimalPos;
    if (typeof t1 !== "number")
      throw t1.$ge();
    if (t1 >= 0) {
      t2 = this.digitLeftCount;
      t3 = this.zeroDigitCount;
      if (typeof t2 !== "number")
        throw t2.$add();
      if (typeof t3 !== "number")
        throw H.iae(t3);
      t4.minimumFractionDigits = t2 + t3 - t1;
      if (t4.minimumFractionDigits < 0)
        t4.minimumFractionDigits = 0;
    }
    t1 = this.decimalPos;
    if (typeof t1 !== "number")
      throw t1.$ge();
    if (t1 >= 0)
      effectiveDecimalPos = t1;
    else
      effectiveDecimalPos = totalDigits;
    t1 = this.digitLeftCount;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    t4.minimumIntegerDigits = effectiveDecimalPos - t1;
    if (t4._useExponentialNotation) {
      t1 = this.digitLeftCount;
      t2 = t4.minimumIntegerDigits;
      if (typeof t1 !== "number")
        throw t1.$add();
      t4.maximumIntegerDigits = t1 + t2;
      if (t4.maximumFractionDigits === 0 && t4.minimumIntegerDigits === 0)
        t4.minimumIntegerDigits = 1;
    }
    t4._groupingSize = P.max(0, this.groupingCount);
    t1 = this.decimalPos;
    t4._decimalSeparatorAlwaysShown = t1 === 0 || t1 === totalDigits;
    return J.toString$0(this.trunk);
  },
  parseTrunkCharacter$0: function() {
    var t1, t2, t3, ch, t4, str, t5, nextChar, t6, t7;
    t1 = this.pattern;
    t2 = t1.index;
    if (t2 >= 0 && t2 < t1.input.length) {
      t3 = t1.input;
      if (t2 >>> 0 !== t2 || t2 >= t3.length)
        throw H.ioore(t3, t2);
      ch = t3[t2];
    } else
      ch = null;
    switch (ch) {
      case "#":
        t2 = this.zeroDigitCount;
        if (typeof t2 !== "number")
          throw t2.$gt();
        if (t2 > 0) {
          t2 = this.digitRightCount;
          if (typeof t2 !== "number")
            throw t2.$add();
          this.digitRightCount = t2 + 1;
        } else {
          t2 = this.digitLeftCount;
          if (typeof t2 !== "number")
            throw t2.$add();
          this.digitLeftCount = t2 + 1;
        }
        t2 = this.groupingCount;
        if (typeof t2 !== "number")
          throw t2.$ge();
        if (t2 >= 0) {
          t3 = this.decimalPos;
          if (typeof t3 !== "number")
            throw t3.$lt();
          t3 = t3 < 0;
        } else
          t3 = false;
        if (t3)
          this.groupingCount = t2 + 1;
        break;
      case "0":
        t2 = this.digitRightCount;
        if (typeof t2 !== "number")
          throw t2.$gt();
        if (t2 > 0)
          throw H.wrapException(P.FormatException$("Unexpected \"0\" in pattern \"" + t1.input + "\""));
        t2 = this.zeroDigitCount;
        if (typeof t2 !== "number")
          throw t2.$add();
        this.zeroDigitCount = t2 + 1;
        t2 = this.groupingCount;
        if (typeof t2 !== "number")
          throw t2.$ge();
        if (t2 >= 0) {
          t3 = this.decimalPos;
          if (typeof t3 !== "number")
            throw t3.$lt();
          t3 = t3 < 0;
        } else
          t3 = false;
        if (t3)
          this.groupingCount = t2 + 1;
        break;
      case ",":
        this.groupingCount = 0;
        break;
      case ".":
        t2 = this.decimalPos;
        if (typeof t2 !== "number")
          throw t2.$ge();
        if (t2 >= 0)
          throw H.wrapException(P.FormatException$("Multiple decimal separators in pattern \"" + H.S(t1) + "\""));
        t2 = this.digitLeftCount;
        t3 = this.zeroDigitCount;
        if (typeof t2 !== "number")
          throw t2.$add();
        if (typeof t3 !== "number")
          throw H.iae(t3);
        t4 = this.digitRightCount;
        if (typeof t4 !== "number")
          throw H.iae(t4);
        this.decimalPos = t2 + t3 + t4;
        break;
      case "E":
        t2 = this.trunk;
        t2.toString;
        str = typeof ch === "string" ? ch : ch;
        t2._contents = t2._contents + str;
        t2 = this.format;
        if (t2._useExponentialNotation)
          throw H.wrapException(P.FormatException$("Multiple exponential symbols in pattern \"" + H.S(t1) + "\""));
        t2._useExponentialNotation = true;
        t2.minimumExponentDigits = 0;
        t3 = t1.index + 1;
        t1.index = t3;
        if (t3 >= 0)
          ;
        t3 = t1.index;
        t4 = t3 >= 0;
        if (t4 && t3 < t1.input.length) {
          t5 = t1.input;
          if (t3 >>> 0 !== t3 || t3 >= t5.length)
            throw H.ioore(t5, t3);
          nextChar = t5[t3];
        } else
          nextChar = null;
        if (nextChar === "+") {
          t5 = this.trunk;
          if (t4 && t3 < t1.input.length) {
            t4 = t1.input;
            if (t3 >>> 0 !== t3 || t3 >= t4.length)
              throw H.ioore(t4, t3);
            t3 = t4[t3];
            str = t3;
          } else
            str = null;
          t5.toString;
          str = typeof str === "string" ? str : str;
          t5._contents = t5._contents + str;
          t3 = t1.index + 1;
          t1.index = t3;
          if (t3 >= 0)
            ;
          t2._useSignForPositiveExponent = true;
        }
        t3 = t1.input;
        t4 = t3.length;
        while (true) {
          t5 = t1.index;
          t6 = t5 >= 0;
          if (t6 && t5 < t4) {
            if (t5 >>> 0 !== t5 || t5 >= t4)
              throw H.ioore(t3, t5);
            t7 = t3[t5];
          } else
            t7 = null;
          if (!(t7 === "0"))
            break;
          t7 = this.trunk;
          if (t6 && t5 < t4) {
            if (t5 >>> 0 !== t5 || t5 >= t4)
              throw H.ioore(t3, t5);
            t5 = t3[t5];
            str = t5;
          } else
            str = null;
          t7.toString;
          str = typeof str === "string" ? str : str;
          t7._contents = t7._contents + str;
          t5 = t1.index + 1;
          t1.index = t5;
          if (t5 >= 0)
            ;
          t2.minimumExponentDigits = t2.minimumExponentDigits + 1;
        }
        t3 = this.digitLeftCount;
        t4 = this.zeroDigitCount;
        if (typeof t3 !== "number")
          throw t3.$add();
        if (typeof t4 !== "number")
          throw H.iae(t4);
        if (t3 + t4 < 1 || t2.minimumExponentDigits < 1)
          throw H.wrapException(P.FormatException$("Malformed exponential pattern \"" + H.S(t1) + "\""));
        return false;
      default:
        return false;
    }
    t2 = this.trunk;
    t2.toString;
    str = typeof ch === "string" ? ch : ch;
    t2._contents = t2._contents + str;
    t2 = t1.index + 1;
    t1.index = t2;
    if (t2 >= 0)
      ;
    return true;
  },
  static: {
"": "_NumberFormatParser__PATTERN_SEPARATOR,_NumberFormatParser__QUOTE,_NumberFormatParser__PATTERN_DIGIT,_NumberFormatParser__PATTERN_ZERO_DIGIT,_NumberFormatParser__PATTERN_GROUPING_SEPARATOR,_NumberFormatParser__PATTERN_DECIMAL_SEPARATOR,_NumberFormatParser__PATTERN_CURRENCY_SIGN,_NumberFormatParser__PATTERN_PER_MILLE,_NumberFormatParser__PATTERN_PERCENT,_NumberFormatParser__PATTERN_EXPONENT,_NumberFormatParser__PATTERN_PLUS",
}

},

_StringIterable: {"": "IterableBase;iterator>",
  $asIterableBase: function() {
    return [J.JSString];
  }
},

_StringIterator: {"": "Object;input,index",
  get$current: function() {
    var t1, t2;
    t1 = this.index;
    if (t1 >= 0 && t1 < this.input.length) {
      t2 = this.input;
      if (t1 >>> 0 !== t1 || t1 >= t2.length)
        throw H.ioore(t2, t1);
      t1 = t2[t1];
    } else
      t1 = null;
    return t1;
  },
  moveNext$0: function() {
    var t1 = this.index + 1;
    this.index = t1;
    return t1 >= 0 && t1 < this.input.length;
  },
  get$iterator: function(_) {
    return this;
  }
}}],
["number_symbols", "package:intl/number_symbols.dart", , B, {
NumberSymbols: {"": "Object;NAME,DECIMAL_SEP<,GROUP_SEP<,PERCENT<,ZERO_DIGIT<,PLUS_SIGN<,MINUS_SIGN<,EXP_SYMBOL<,PERMILL<,INFINITY<,NAN<,DECIMAL_PATTERN,SCIENTIFIC_PATTERN,PERCENT_PATTERN,CURRENCY_PATTERN,DEF_CURRENCY_CODE<",
  toString$0: function(_) {
    return this.NAME;
  }
}}],
["scproxy", "package:scproxy/scproxy.dart", , Z, {
Scound: {"": "Object;_sound,meta<,paused,muted,_stopped,onPlay,_stopController,onStop,onEnded,onPause,_resumeController,onResume",
  play$0: function(_) {
    this._stopped = false;
    J.play$0$x(this._sound);
  },
  loop$1: function(_, value) {
    J.set$loop$x(this._sound, value);
  },
  pause$0: function(_) {
    J.pause$0$x(this._sound);
    this.paused = true;
  },
  volume$1: function(_, value) {
    if (typeof value !== "number")
      throw value.$div();
    J.set$volume$x(this._sound, value / 100);
  },
  remove$0: function(_) {
    var t1;
    J.remove$0$ax(this._sound);
    t1 = this._stopController;
    t1.close$0(t1);
    t1 = this._resumeController;
    t1.close$0(t1);
  },
  Scound$2: function(_sound, meta) {
    var t1, t2, t3;
    t1 = this._sound;
    t2 = J.getInterceptor$x(t1);
    this.onPlay = t2.get$onPlay(t1);
    t3 = new P._ControllerStream(this._stopController);
    H.setRuntimeTypeInfo(t3, [null]);
    this.onStop = t3;
    this.onEnded = t2.get$onEnded(t1);
    this.onPause = t2.get$onPause(t1);
    t1 = new P._ControllerStream(this._resumeController);
    H.setRuntimeTypeInfo(t1, [null]);
    this.onResume = t1;
  },
  static: {
Scound$: function(_sound, meta) {
  var t1 = new Z.Scound(_sound, meta, false, false, false, null, P.StreamController_StreamController(null, null, null, null, false, null), null, null, null, P.StreamController_StreamController(null, null, null, null, false, null), null);
  t1.Scound$2(_sound, meta);
  return t1;
}}

},

SC: {"": "Object;client_id",
  load$1: function(_, track_id) {
    var t1, t2, completer;
    t1 = {};
    t2 = null;
    completer = new P._AsyncCompleter(P._Future$(t2));
    H.setRuntimeTypeInfo(completer, [t2]);
    t1.newMeta_0 = null;
    t1.newAudio_1 = null;
    W.HttpRequest_getString(C.JSString_methods.$add("http://api.soundcloud.com", track_id) + (".json?client_id=" + this.client_id), null, null).then$1(new Z.SC_load_closure(t1, this, completer));
    return completer.future;
  }
},

SC_load_closure: {"": "Closure;box_0,this_1,completer_2",
  call$1: function(json) {
    var t1, t2;
    t1 = this.box_0;
    t1.newMeta_0 = C.C_JsonCodec.decode$1(json);
    t1.newAudio_1 = document.body.appendChild(W.AudioElement_AudioElement(J.$add$ns(J.$index$asx(t1.newMeta_0, "stream_url"), "?client_id=" + this.this_1.client_id)));
    J.load$0$x(t1.newAudio_1);
    t1 = Z.Scound$(t1.newAudio_1, t1.newMeta_0);
    t2 = this.completer_2.future;
    if (t2._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    t2._asyncComplete$1(t1);
  },
  $is_args1: true
}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Static function getters
init.globalFunctions.IsolateNatives__processWorkerMessage$closure = H.IsolateNatives__processWorkerMessage$closure = new H.Closure$2(H.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
init.globalFunctions.Primitives__throwFormatException$closure = H.Primitives__throwFormatException$closure = new H.Closure$1(H.Primitives__throwFormatException, "Primitives__throwFormatException$closure");
init.globalFunctions.toStringWrapper$closure = H.toStringWrapper$closure = new H.Closure$0(H.toStringWrapper, "toStringWrapper$closure");
init.globalFunctions.invokeClosure$closure = H.invokeClosure$closure = new H.Closure$7(H.invokeClosure, "invokeClosure$closure");
init.globalFunctions.isAssignable$closure = H.isAssignable$closure = new H.Closure$2(H.isAssignable, "isAssignable$closure");
init.globalFunctions._matchString$closure = H._matchString$closure = new H.Closure$1(H._matchString, "_matchString$closure");
init.globalFunctions._stringIdentity$closure = H._stringIdentity$closure = new H.Closure$1(H._stringIdentity, "_stringIdentity$closure");
init.globalFunctions.hideConsole$closure = B.hideConsole$closure = new H.Closure$1(B.hideConsole, "hideConsole$closure");
init.globalFunctions.printConsole$closure = B.printConsole$closure = new H.Closure$1(B.printConsole, "printConsole$closure");
init.globalFunctions.printHelp$closure = B.printHelp$closure = new H.Closure$1(B.printHelp, "printHelp$closure");
init.globalFunctions.clearConsole$closure = B.clearConsole$closure = new H.Closure$1(B.clearConsole, "clearConsole$closure");
init.globalFunctions.setEnergy$closure = B.setEnergy$closure = new H.Closure$1(B.setEnergy, "setEnergy$closure");
init.globalFunctions.setMaxEnergy$closure = B.setMaxEnergy$closure = new H.Closure$1(B.setMaxEnergy, "setMaxEnergy$closure");
init.globalFunctions.setMood$closure = B.setMood$closure = new H.Closure$1(B.setMood, "setMood$closure");
init.globalFunctions.setMaxMood$closure = B.setMaxMood$closure = new H.Closure$1(B.setMaxMood, "setMaxMood$closure");
init.globalFunctions.setCurrants$closure = B.setCurrants$closure = new H.Closure$1(B.setCurrants, "setCurrants$closure");
init.globalFunctions.setImg$closure = B.setImg$closure = new H.Closure$1(B.setImg, "setImg$closure");
init.globalFunctions.setName$closure = B.setName$closure = new H.Closure$1(B.setName, "setName$closure");
init.globalFunctions.setSong$closure = B.setSong$closure = new H.Closure$1(B.setSong, "setSong$closure");
init.globalFunctions.setVolume$closure = B.setVolume$closure = new H.Closure$1(B.setVolume, "setVolume$closure");
init.globalFunctions.main$closure = B.main$closure = new H.Closure$0(B.main, "main$closure");
init.globalFunctions._asyncRunCallback$closure = P._asyncRunCallback$closure = new H.Closure$0(P._asyncRunCallback, "_asyncRunCallback$closure");
init.globalFunctions._nullDataHandler$closure = P._nullDataHandler$closure = new H.Closure$1(P._nullDataHandler, "_nullDataHandler$closure");
init.globalFunctions._nullErrorHandler$closure = P._nullErrorHandler$closure = new P.Closure$21(P._nullErrorHandler, "_nullErrorHandler$closure");
init.globalFunctions._nullDoneHandler$closure = P._nullDoneHandler$closure = new H.Closure$0(P._nullDoneHandler, "_nullDoneHandler$closure");
init.globalFunctions._defaultEquals$closure = P._defaultEquals$closure = new H.Closure$2(P._defaultEquals, "_defaultEquals$closure");
init.globalFunctions._defaultHashCode$closure = P._defaultHashCode$closure = new H.Closure$1(P._defaultHashCode, "_defaultHashCode$closure");
init.globalFunctions._defaultToEncodable$closure = P._defaultToEncodable$closure = new H.Closure$1(P._defaultToEncodable, "_defaultToEncodable$closure");
init.globalFunctions.Comparable_compare$closure = P.Comparable_compare$closure = new H.Closure$2(P.Comparable_compare, "Comparable_compare$closure");
init.globalFunctions.identical$closure = P.identical$closure = new H.Closure$2(P.identical, "identical$closure");
init.globalFunctions.identityHashCode$closure = P.identityHashCode$closure = new H.Closure$1(P.identityHashCode, "identityHashCode$closure");
init.globalFunctions.Element__determineMouseWheelEventType$closure = W.Element__determineMouseWheelEventType$closure = new H.Closure$1(W.Element__determineMouseWheelEventType, "Element__determineMouseWheelEventType$closure");
init.globalFunctions._Html5NodeValidator__standardAttributeValidator$closure = W._Html5NodeValidator__standardAttributeValidator$closure = new W.Closure$4(W._Html5NodeValidator__standardAttributeValidator, "_Html5NodeValidator__standardAttributeValidator$closure");
init.globalFunctions._Html5NodeValidator__uriAttributeValidator$closure = W._Html5NodeValidator__uriAttributeValidator$closure = new W.Closure$4(W._Html5NodeValidator__uriAttributeValidator, "_Html5NodeValidator__uriAttributeValidator$closure");
init.globalFunctions.Intl__throwLocaleError$closure = T.Intl__throwLocaleError$closure = new H.Closure$1(T.Intl__throwLocaleError, "Intl__throwLocaleError$closure");
init.globalFunctions.NumberFormat_localeExists$closure = T.NumberFormat_localeExists$closure = new H.Closure$1(T.NumberFormat_localeExists, "NumberFormat_localeExists$closure");
// Runtime type support
W.Node.$isNode = true;
W.Node.$isEventTarget = true;
W.Node.$isObject = true;
J.JSInt.$isint = true;
J.JSInt.$isnum = true;
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isObject = true;
W.Touch.$isTouch = true;
W.Touch.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isComparable = true;
J.JSString.$asComparable = [J.JSString];
J.JSString.$isObject = true;
J.JSDouble.$isnum = true;
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isObject = true;
J.JSNumber.$isnum = true;
J.JSNumber.$isComparable = true;
J.JSNumber.$asComparable = [J.JSNumber];
J.JSNumber.$isObject = true;
P.Duration.$isDuration = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
P.Object.$isObject = true;
J.JSArray.$isObject = true;
P.Match.$isMatch = true;
P.Match.$isObject = true;
W.Element.$isElement = true;
W.Element.$isNode = true;
W.Element.$isEventTarget = true;
W.Element.$isObject = true;
W.BeforeUnloadEvent.$isEvent = true;
W.BeforeUnloadEvent.$isObject = true;
W.Event.$isEvent = true;
W.Event.$isObject = true;
W.TouchEvent.$isTouchEvent = true;
W.TouchEvent.$isEvent = true;
W.TouchEvent.$isObject = true;
W.KeyboardEvent.$isKeyboardEvent = true;
W.KeyboardEvent.$isEvent = true;
W.KeyboardEvent.$isObject = true;
W.MouseEvent.$isMouseEvent = true;
W.MouseEvent.$isEvent = true;
W.MouseEvent.$isObject = true;
W.WheelEvent.$isMouseEvent = true;
W.WheelEvent.$isEvent = true;
W.WheelEvent.$isObject = true;
G._GameLoopTouchEvent.$isObject = true;
B.GameLoopTimer.$isObject = true;
B.DigitalButton.$isObject = true;
G.GameLoopTouch.$isObject = true;
G.GameLoopTouchPosition.$isObject = true;
W.NodeValidator.$isNodeValidator = true;
W.NodeValidator.$isObject = true;
F.AssetImporter.$isObject = true;
F.AssetLoader.$isObject = true;
F.AssetPackTraceEvent.$isObject = true;
F.Asset.$isAsset = true;
F.Asset.$isObject = true;
W.ProgressEvent.$isEvent = true;
W.ProgressEvent.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
Z.AssetPackFileAsset.$isObject = true;
W.HttpRequest.$isEventTarget = true;
W.HttpRequest.$isObject = true;
P.Stream.$isStream = true;
P.Stream.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
W.MessageEvent.$isMessageEvent = true;
W.MessageEvent.$isEvent = true;
W.MessageEvent.$isObject = true;
W.CloseEvent.$isEvent = true;
W.CloseEvent.$isObject = true;
P.Map.$isObject = true;
P.ReceivePort.$isStream = true;
P.ReceivePort.$asStream = [null];
P.ReceivePort.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
F.AssetPack.$isAssetPack = true;
F.AssetPack.$isObject = true;
P._BufferingStreamSubscription.$is_BufferingStreamSubscription = true;
P._BufferingStreamSubscription.$is_EventSink = true;
P._BufferingStreamSubscription.$isStreamSubscription = true;
P._BufferingStreamSubscription.$isObject = true;
P._BroadcastSubscription.$is_BroadcastSubscription = true;
P._BroadcastSubscription.$is_BufferingStreamSubscription = true;
P._BroadcastSubscription.$is_EventSink = true;
P._BroadcastSubscription.$isStreamSubscription = true;
P._BroadcastSubscription.$isObject = true;
W.EventTarget.$isEventTarget = true;
W.EventTarget.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
W._Html5NodeValidator.$is_Html5NodeValidator = true;
W._Html5NodeValidator.$isNodeValidator = true;
W._Html5NodeValidator.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P._DelayedEvent.$is_DelayedEvent = true;
P._DelayedEvent.$isObject = true;
P.DateTime.$isDateTime = true;
P.DateTime.$isComparable = true;
P.DateTime.$asComparable = [null];
P.DateTime.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
C.AudioElement_methods = W.AudioElement.prototype;
C.C_EmptyIterator = new H.EmptyIterator();
C.C_JsonCodec = new P.JsonCodec();
C.C__DelayedDone = new P._DelayedDone();
C.C__Random = new P._Random();
C.C__RootZone = new P._RootZone();
C.CssStyleDeclaration_methods = W.CssStyleDeclaration.prototype;
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_blur = H.setRuntimeTypeInfo(new W.EventStreamProvider("blur"), [W.Event]);
C.EventStreamProvider_change = H.setRuntimeTypeInfo(new W.EventStreamProvider("change"), [W.Event]);
C.EventStreamProvider_click = H.setRuntimeTypeInfo(new W.EventStreamProvider("click"), [W.MouseEvent]);
C.EventStreamProvider_close = H.setRuntimeTypeInfo(new W.EventStreamProvider("close"), [W.CloseEvent]);
C.EventStreamProvider_contextmenu = H.setRuntimeTypeInfo(new W.EventStreamProvider("contextmenu"), [W.MouseEvent]);
C.EventStreamProvider_ended = H.setRuntimeTypeInfo(new W.EventStreamProvider("ended"), [W.Event]);
C.EventStreamProvider_error = H.setRuntimeTypeInfo(new W.EventStreamProvider("error"), [W.ProgressEvent]);
C.EventStreamProvider_error0 = H.setRuntimeTypeInfo(new W.EventStreamProvider("error"), [W.Event]);
C.EventStreamProvider_focus = H.setRuntimeTypeInfo(new W.EventStreamProvider("focus"), [W.Event]);
C.EventStreamProvider_keydown = H.setRuntimeTypeInfo(new W.EventStreamProvider("keydown"), [W.KeyboardEvent]);
C.EventStreamProvider_keyup = H.setRuntimeTypeInfo(new W.EventStreamProvider("keyup"), [W.KeyboardEvent]);
C.EventStreamProvider_load = H.setRuntimeTypeInfo(new W.EventStreamProvider("load"), [W.ProgressEvent]);
C.EventStreamProvider_load0 = H.setRuntimeTypeInfo(new W.EventStreamProvider("load"), [W.Event]);
C.EventStreamProvider_message = H.setRuntimeTypeInfo(new W.EventStreamProvider("message"), [W.MessageEvent]);
C.EventStreamProvider_mousedown = H.setRuntimeTypeInfo(new W.EventStreamProvider("mousedown"), [W.MouseEvent]);
C.EventStreamProvider_mousemove = H.setRuntimeTypeInfo(new W.EventStreamProvider("mousemove"), [W.MouseEvent]);
C.EventStreamProvider_mouseup = H.setRuntimeTypeInfo(new W.EventStreamProvider("mouseup"), [W.MouseEvent]);
C.EventStreamProvider_open = H.setRuntimeTypeInfo(new W.EventStreamProvider("open"), [W.Event]);
C.EventStreamProvider_pause = H.setRuntimeTypeInfo(new W.EventStreamProvider("pause"), [W.Event]);
C.EventStreamProvider_play = H.setRuntimeTypeInfo(new W.EventStreamProvider("play"), [W.Event]);
C.EventStreamProvider_resize = H.setRuntimeTypeInfo(new W.EventStreamProvider("resize"), [W.Event]);
C.EventStreamProvider_touchcancel = H.setRuntimeTypeInfo(new W.EventStreamProvider("touchcancel"), [W.TouchEvent]);
C.EventStreamProvider_touchend = H.setRuntimeTypeInfo(new W.EventStreamProvider("touchend"), [W.TouchEvent]);
C.EventStreamProvider_touchmove = H.setRuntimeTypeInfo(new W.EventStreamProvider("touchmove"), [W.TouchEvent]);
C.EventStreamProvider_touchstart = H.setRuntimeTypeInfo(new W.EventStreamProvider("touchstart"), [W.TouchEvent]);
C.EventStreamProvider_webkitfullscreenchange = H.setRuntimeTypeInfo(new W.EventStreamProvider("webkitfullscreenchange"), [W.Event]);
C.EventStreamProvider_webkitfullscreenerror = H.setRuntimeTypeInfo(new W.EventStreamProvider("webkitfullscreenerror"), [W.Event]);
C.EventStreamProvider_webkitpointerlockchange = H.setRuntimeTypeInfo(new W.EventStreamProvider("webkitpointerlockchange"), [W.Event]);
C.HttpRequest_methods = W.HttpRequest.prototype;
C.JSArray_methods = J.JSArray.prototype;
C.JSBool_methods = J.JSBool.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_6qb = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_86y = function getTagFallback(o) {
  if (o == null) return "Null";
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.builtin$cls;
    if (typeof name == "string") return name;
    name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Cbr = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (userAgent.indexOf("Chrome") >= 0 ||
        userAgent.indexOf("DumpRenderTree") >= 0) {
      return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_TtD = function() {
  function typeNameInChrome(obj) { return obj.constructor.name; }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_ZYJ =     ((typeof version == "function" && typeof os == "object" && "system" in os)
    || (typeof navigator == "object"
        && navigator.userAgent.indexOf('Chrome') != -1))
        ? function(x) { return x.$dartCachedLength || x.length; }
        : function(x) { return x.length; };
;
C.JS_CONST_rD3 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    if (tag == "Document") return null;
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JsonDecoder_null = new P.JsonDecoder(null);
C.JsonEncoder_null = new P.JsonEncoder(null);
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
C.List_1GN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [J.JSString]);
C.List_6Pr = Isolate.makeConstantList([0, 0, 26624, 1023, 0, 0, 65534, 2047]);
C.List_JYB = Isolate.makeConstantList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]);
C.List_empty = Isolate.makeConstantList([]);
C.List_nxB = Isolate.makeConstantList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]);
C.List_qg4 = Isolate.makeConstantList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]);
C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [J.JSString]);
C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [J.JSString]);
C.List_ERN = Isolate.makeConstantList(["af", "am", "ar", "bg", "bn", "ca", "cs", "da", "de", "de_AT", "de_CH", "el", "en", "en_AU", "en_GB", "en_IE", "en_IN", "en_SG", "en_US", "en_ZA", "es", "es_419", "et", "eu", "fa", "fi", "fil", "fr", "fr_CA", "gl", "gsw", "gu", "he", "hi", "hr", "hu", "id", "in", "is", "it", "iw", "ja", "kn", "ko", "ln", "lt", "lv", "ml", "mr", "ms", "mt", "nl", "no", "or", "pl", "pt", "pt_BR", "pt_PT", "ro", "ru", "sk", "sl", "sq", "sr", "sv", "sw", "ta", "te", "th", "tl", "tr", "uk", "ur", "vi", "zh", "zh_CN", "zh_HK", "zh_TW", "zu"]);
C.NumberSymbols_Ult = new B.NumberSymbols("af", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "ZAR");
C.NumberSymbols_woc = new B.NumberSymbols("am", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "ETB");
C.NumberSymbols_iSJ = new B.NumberSymbols("ar", "\u066b", "\u066c", "\u066a", "\u0660", "+", "-", "\u0627\u0633", "\u0609", "\u221e", "\u0644\u064a\u0633\u00a0\u0631\u0642\u0645", "#0.###;#0.###-", "#E0", "#,##0%", "\u00a4\u00a0#0.00;\u00a4\u00a0#0.00-", "EGP");
C.NumberSymbols_zDH = new B.NumberSymbols("bg", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "BGN");
C.NumberSymbols_MIo = new B.NumberSymbols("bn", ".", ",", "%", "\u09e6", "+", "-", "E", "\u2030", "\u221e", "\u09b8\u0982\u0996\u09cd\u09af\u09be\u00a0\u09a8\u09be", "#,##,##0.###", "#E0", "#,##,##0%", "#,##,##0.00\u00a4;(#,##,##0.00\u00a4)", "BDT");
C.NumberSymbols_KQO = new B.NumberSymbols("ca", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "EUR");
C.NumberSymbols_0VI = new B.NumberSymbols("cs", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "CZK");
C.NumberSymbols_4qm = new B.NumberSymbols("da", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "DKK");
C.NumberSymbols_Hpd = new B.NumberSymbols("de", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_ifL = new B.NumberSymbols("de_AT", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "\u00a4\u00a0#,##0.00", "EUR");
C.NumberSymbols_8Gl = new B.NumberSymbols("de_CH", ".", "'", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "\u00a4\u00a0#,##0.00;\u00a4-#,##0.00", "CHF");
C.NumberSymbols_4lC = new B.NumberSymbols("el", ",", ".", "%", "0", "+", "-", "e", "\u2030", "\u221e", "NaN", "#,##0.###", "[#E0]", "#,##0%", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_MMm = new B.NumberSymbols("en", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "USD");
C.NumberSymbols_vdt = new B.NumberSymbols("en_AU", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "AUD");
C.NumberSymbols_ly0 = new B.NumberSymbols("en_GB", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "GBP");
C.NumberSymbols_sje = new B.NumberSymbols("en_IE", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "EUR");
C.NumberSymbols_hyR = new B.NumberSymbols("en_IN", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##,##0.###", "#E0", "#,##,##0%", "\u00a4\u00a0#,##,##0.00", "INR");
C.NumberSymbols_Qu6 = new B.NumberSymbols("en_SG", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "SGD");
C.NumberSymbols_xw8 = new B.NumberSymbols("en_US", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "USD");
C.NumberSymbols_k6K = new B.NumberSymbols("en_ZA", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "ZAR");
C.NumberSymbols_ME0 = new B.NumberSymbols("es", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_HIk = new B.NumberSymbols("es_419", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "MXN");
C.NumberSymbols_O1t = new B.NumberSymbols("et", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#0.00\u00a4;(#0.00\u00a4)", "EUR");
C.NumberSymbols_6tD = new B.NumberSymbols("eu", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "%\u00a0#,##0", "#,##0.00\u00a0\u00a4;(#,##0.00\u00a0\u00a4)", "EUR");
C.NumberSymbols_KJm = new B.NumberSymbols("fa", "\u066b", "\u066c", "\u066a", "\u06f0", "+", "\u2212", "\u00d7\u06f1\u06f0^", "\u0609", "\u221e", "\u0646\u0627\u0639\u062f\u062f", "#,##0.###", "#E0", "#,##0%", "\u200e\u00a4#,##0.00;\u200e(\u00a4#,##0.00)", "IRR");
C.NumberSymbols_IKo = new B.NumberSymbols("fi", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "ep\u00e4luku", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_8Wd = new B.NumberSymbols("fil", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "PHP");
C.NumberSymbols_JO4 = new B.NumberSymbols("fr", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4;(#,##0.00\u00a0\u00a4)", "EUR");
C.NumberSymbols_adS = new B.NumberSymbols("fr_CA", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4;(#,##0.00\u00a0\u00a4)", "CAD");
C.NumberSymbols_wEo = new B.NumberSymbols("gl", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "EUR");
C.NumberSymbols_m8F = new B.NumberSymbols("gsw", ".", "\u2019", "%", "0", "+", "\u2212", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "CHF");
C.NumberSymbols_qHn = new B.NumberSymbols("gu", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "INR");
C.NumberSymbols_45h = new B.NumberSymbols("he", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "ILS");
C.NumberSymbols_ato = new B.NumberSymbols("hi", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##,##0.###", "#E0", "#,##,##0%", "\u00a4\u00a0#,##,##0.00", "INR");
C.NumberSymbols_aAj = new B.NumberSymbols("hr", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "HRK");
C.NumberSymbols_yXb = new B.NumberSymbols("hu", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "HUF");
C.NumberSymbols_wEo0 = new B.NumberSymbols("id", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "IDR");
C.NumberSymbols_oGx = new B.NumberSymbols("in", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "IDR");
C.NumberSymbols_iXN = new B.NumberSymbols("is", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "ISK");
C.NumberSymbols_GZB = new B.NumberSymbols("it", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4\u00a0#,##0.00", "EUR");
C.NumberSymbols_Aec = new B.NumberSymbols("iw", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "ILS");
C.NumberSymbols_sgl = new B.NumberSymbols("ja", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "JPY");
C.NumberSymbols_Ohs = new B.NumberSymbols("kn", ".", ",", "%", "0", "+", "-", "\u0c88", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "INR");
C.NumberSymbols_7Nb = new B.NumberSymbols("ko", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "KRW");
C.NumberSymbols_uzY = new B.NumberSymbols("ln", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "CDF");
C.NumberSymbols_pcV = new B.NumberSymbols("lt", ",", "\u00a0", "%", "0", "+", "\u2013", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "LTL");
C.NumberSymbols_ibp = new B.NumberSymbols("lv", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "nav\u00a0skaitlis", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "LVL");
C.NumberSymbols_o8I = new B.NumberSymbols("ml", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##,##0.###", "#E0", "#,##,##0%", "#,##,##0.00\u00a4", "INR");
C.NumberSymbols_UWX = new B.NumberSymbols("mr", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "INR");
C.NumberSymbols_OtT = new B.NumberSymbols("ms", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "MYR");
C.NumberSymbols_Yzz = new B.NumberSymbols("mt", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "EUR");
C.NumberSymbols_IiW = new B.NumberSymbols("nl", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4\u00a0#,##0.00;\u00a4\u00a0#,##0.00-", "EUR");
C.NumberSymbols_gRf = new B.NumberSymbols("no", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "\u00a4\u00a0#,##0.00", "NOK");
C.NumberSymbols_iGE = new B.NumberSymbols("or", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##,##0.###", "#E0", "#,##,##0%", "\u00a4\u00a0#,##,##0.00", "INR");
C.NumberSymbols_DGA = new B.NumberSymbols("pl", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4;(#,##0.00\u00a0\u00a4)", "PLN");
C.NumberSymbols_Joe = new B.NumberSymbols("pt", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "BRL");
C.NumberSymbols_P06 = new B.NumberSymbols("pt_BR", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "BRL");
C.NumberSymbols_XJC = new B.NumberSymbols("pt_PT", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_9a2 = new B.NumberSymbols("ro", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "RON");
C.NumberSymbols_RWw = new B.NumberSymbols("ru", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "\u043d\u0435\u00a0\u0447\u0438\u0441\u043b\u043e", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "RUB");
C.NumberSymbols_4DV = new B.NumberSymbols("sk", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_3qJ = new B.NumberSymbols("sl", ",", ".", "%", "0", "+", "-", "e", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "EUR");
C.NumberSymbols_0XX = new B.NumberSymbols("sq", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "ALL");
C.NumberSymbols_TAS = new B.NumberSymbols("sr", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "RSD");
C.NumberSymbols_Ooj = new B.NumberSymbols("sv", ",", "\u00a0", "%", "0", "+", "\u2212", "\u00d710^", "\u2030", "\u221e", "\u00a4\u00a4\u00a4", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "SEK");
C.NumberSymbols_ouf = new B.NumberSymbols("sw", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "TZS");
C.NumberSymbols_ACG = new B.NumberSymbols("ta", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##,##0.###", "#E0", "#,##,##0%", "\u00a4\u00a0#,##,##0.00", "INR");
C.NumberSymbols_Gnl = new B.NumberSymbols("te", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "INR");
C.NumberSymbols_mBw = new B.NumberSymbols("th", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "THB");
C.NumberSymbols_x4M = new B.NumberSymbols("tl", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "PHP");
C.NumberSymbols_IYb = new B.NumberSymbols("tr", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "%#,##0", "#,##0.00\u00a0\u00a4;(#,##0.00\u00a0\u00a4)", "TRY");
C.NumberSymbols_fyC = new B.NumberSymbols("uk", ",", "\u00a0", "%", "0", "+", "-", "\u0415", "\u2030", "\u221e", "\u041d\u0435\u00a0\u0447\u0438\u0441\u043b\u043e", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "UAH");
C.NumberSymbols_NEK = new B.NumberSymbols("ur", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "PKR");
C.NumberSymbols_sUZ = new B.NumberSymbols("vi", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "VND");
C.NumberSymbols_9t0 = new B.NumberSymbols("zh", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "CNY");
C.NumberSymbols_sMY = new B.NumberSymbols("zh_CN", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "CNY");
C.NumberSymbols_nzW = new B.NumberSymbols("zh_HK", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "\u975e\u6578\u503c", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "HKD");
C.NumberSymbols_uwZ = new B.NumberSymbols("zh_TW", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "\u975e\u6578\u503c", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "TWD");
C.NumberSymbols_wTu = new B.NumberSymbols("zu", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "I-NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00;(\u00a4#,##0.00)", "ZAR");
C.Map_ERWrR = new H.ConstantStringMap(79, {af: C.NumberSymbols_Ult, am: C.NumberSymbols_woc, ar: C.NumberSymbols_iSJ, bg: C.NumberSymbols_zDH, bn: C.NumberSymbols_MIo, ca: C.NumberSymbols_KQO, cs: C.NumberSymbols_0VI, da: C.NumberSymbols_4qm, de: C.NumberSymbols_Hpd, de_AT: C.NumberSymbols_ifL, de_CH: C.NumberSymbols_8Gl, el: C.NumberSymbols_4lC, en: C.NumberSymbols_MMm, en_AU: C.NumberSymbols_vdt, en_GB: C.NumberSymbols_ly0, en_IE: C.NumberSymbols_sje, en_IN: C.NumberSymbols_hyR, en_SG: C.NumberSymbols_Qu6, en_US: C.NumberSymbols_xw8, en_ZA: C.NumberSymbols_k6K, es: C.NumberSymbols_ME0, es_419: C.NumberSymbols_HIk, et: C.NumberSymbols_O1t, eu: C.NumberSymbols_6tD, fa: C.NumberSymbols_KJm, fi: C.NumberSymbols_IKo, fil: C.NumberSymbols_8Wd, fr: C.NumberSymbols_JO4, fr_CA: C.NumberSymbols_adS, gl: C.NumberSymbols_wEo, gsw: C.NumberSymbols_m8F, gu: C.NumberSymbols_qHn, he: C.NumberSymbols_45h, hi: C.NumberSymbols_ato, hr: C.NumberSymbols_aAj, hu: C.NumberSymbols_yXb, id: C.NumberSymbols_wEo0, in: C.NumberSymbols_oGx, is: C.NumberSymbols_iXN, it: C.NumberSymbols_GZB, iw: C.NumberSymbols_Aec, ja: C.NumberSymbols_sgl, kn: C.NumberSymbols_Ohs, ko: C.NumberSymbols_7Nb, ln: C.NumberSymbols_uzY, lt: C.NumberSymbols_pcV, lv: C.NumberSymbols_ibp, ml: C.NumberSymbols_o8I, mr: C.NumberSymbols_UWX, ms: C.NumberSymbols_OtT, mt: C.NumberSymbols_Yzz, nl: C.NumberSymbols_IiW, no: C.NumberSymbols_gRf, or: C.NumberSymbols_iGE, pl: C.NumberSymbols_DGA, pt: C.NumberSymbols_Joe, pt_BR: C.NumberSymbols_P06, pt_PT: C.NumberSymbols_XJC, ro: C.NumberSymbols_9a2, ru: C.NumberSymbols_RWw, sk: C.NumberSymbols_4DV, sl: C.NumberSymbols_3qJ, sq: C.NumberSymbols_0XX, sr: C.NumberSymbols_TAS, sv: C.NumberSymbols_Ooj, sw: C.NumberSymbols_ouf, ta: C.NumberSymbols_ACG, te: C.NumberSymbols_Gnl, th: C.NumberSymbols_mBw, tl: C.NumberSymbols_x4M, tr: C.NumberSymbols_IYb, uk: C.NumberSymbols_fyC, ur: C.NumberSymbols_NEK, vi: C.NumberSymbols_sUZ, zh: C.NumberSymbols_9t0, zh_CN: C.NumberSymbols_sMY, zh_HK: C.NumberSymbols_nzW, zh_TW: C.NumberSymbols_uwZ, zu: C.NumberSymbols_wTu}, C.List_ERN);
C.NodeList_methods = W.NodeList.prototype;
C.Type_Ejg = H.createRuntimeType('String');
C.Type_EsU = H.createRuntimeType('bool');
C.Type_SnA = H.createRuntimeType('int');
C.Type_XXD = H.createRuntimeType('JSObject');
C.Type_eZO = H.createRuntimeType('Null');
C.Type_oqh = H.createRuntimeType('Uint64List');
C.Type_qq1 = H.createRuntimeType('double');
C.Type_qxd = H.createRuntimeType('Int64List');
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Utf8Codec_false = new P.Utf8Codec(false);
C.WheelEvent_methods = W.WheelEvent.prototype;
C.Window_methods = W.Window.prototype;
C._BeforeUnloadEventStreamProvider_beforeunload = new W._BeforeUnloadEventStreamProvider("beforeunload");
C._CustomEventStreamProvider__determineMouseWheelEventType = H.setRuntimeTypeInfo(new W._CustomEventStreamProvider(W.Element__determineMouseWheelEventType$closure), [W.WheelEvent]);
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.consolelistener = null;
$.playerInput = null;
$.CurrentCamera = null;
$.CurrentPlayer = null;
$.gameScreenWidth = null;
$.gameScreenHeight = null;
$.CurrentStreet = null;
$.printToZone = null;
$._callbacksAreEnqueued = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Element__parseDocument = null;
$.Element__parseRange = null;
$.Element__defaultValidator = null;
$.Element__defaultSanitizer = null;
$.Device__isOpera = null;
$.Device__isIE = null;
$.Device__isFirefox = null;
$.Device__isWebKit = null;
$.Device__cachedCssPrefix = null;
$.Intl_defaultLocale = null;
$.Intl_systemLocale = "en_US";
$.numberFormatSymbols = C.Map_ERWrR;
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$n(receiver).$mul(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J.abs$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).abs$0(receiver);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addAll$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.clone$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).clone$1(receiver, a0);
};
J.codeUnitAt$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createFragment$2$treeSanitizer$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).createFragment$2$treeSanitizer(receiver, a0, a1);
};
J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$_key$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_key(receiver);
};
J.get$changedTouches$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$changedTouches(receiver);
};
J.get$checked$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$checked(receiver);
};
J.get$children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$children(receiver);
};
J.get$className$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$className(receiver);
};
J.get$classes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$classes(receiver);
};
J.get$content$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$content(receiver);
};
J.get$context2D$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$context2D(receiver);
};
J.get$data$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$data(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$first$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$first(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$id(receiver);
};
J.get$identifier$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$identifier(receiver);
};
J.get$innerHtml$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$innerHtml(receiver);
};
J.get$isEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
J.get$isNotEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$keyCode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$keyCode(receiver);
};
J.get$keys$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$keys(receiver);
};
J.get$last$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$last(receiver);
};
J.get$lastChild$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lastChild(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$message$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$message(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$nodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodes(receiver);
};
J.get$onClick$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onClick(receiver);
};
J.get$remove$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$remove(receiver);
};
J.get$responseText$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$responseText(receiver);
};
J.get$style$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$style(receiver);
};
J.get$target$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$target(receiver);
};
J.get$text$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$text(receiver);
};
J.get$timeStamp$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$timeStamp(receiver);
};
J.get$touches$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$touches(receiver);
};
J.get$type$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$type(receiver);
};
J.get$url$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$url(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$values$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$values(receiver);
};
J.get$width$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$width(receiver);
};
J.get$x$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$x(receiver);
};
J.get$y$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$y(receiver);
};
J.getPropertyValue$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getPropertyValue$1(receiver, a0);
};
J.import$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).import$3(receiver, a0, a1, a2);
};
J.lastIndexOf$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).lastIndexOf$1(receiver, a0);
};
J.load$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).load$0(receiver);
};
J.load$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).load$2(receiver, a0, a1);
};
J.loop$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).loop$1(receiver, a0);
};
J.map$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).map$1(receiver, a0);
};
J.matchAsPrefix$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
};
J.pause$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).pause$0(receiver);
};
J.play$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).play$0(receiver);
};
J.preventDefault$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).preventDefault$0(receiver);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.replaceAll$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$checked$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$checked(receiver, value);
};
J.set$className$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$className(receiver, value);
};
J.set$color$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$color(receiver, value);
};
J.set$cursor$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$cursor(receiver, value);
};
J.set$display$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$display(receiver, value);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$href$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$href(receiver, value);
};
J.set$innerHtml$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
J.set$left$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$left(receiver, value);
};
J.set$length$asx = function(receiver, value) {
  return J.getInterceptor$asx(receiver).set$length(receiver, value);
};
J.set$loop$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$loop(receiver, value);
};
J.set$opacity$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$opacity(receiver, value);
};
J.set$paddingRight$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$paddingRight(receiver, value);
};
J.set$position$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$position(receiver, value);
};
J.set$src$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$src(receiver, value);
};
J.set$top$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$top(receiver, value);
};
J.set$transform$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$transform(receiver, value);
};
J.set$type$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$type(receiver, value);
};
J.set$volume$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$volume(receiver, value);
};
J.set$width$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$width(receiver, value);
};
J.set$zIndex$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$zIndex(receiver, value);
};
J.setInnerHtml$2$validator$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).setInnerHtml$2$validator(receiver, a0, a1);
};
J.setProperty$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).setProperty$3(receiver, a0, a1, a2);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.splitMapJoin$3$onMatch$onNonMatch$s = function(receiver, a0, a1, a2) {
  return J.getInterceptor$s(receiver).splitMapJoin$3$onMatch$onNonMatch(receiver, a0, a1, a2);
};
J.startsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
J.substring$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).substring$1(receiver, a0);
};
J.substring$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.trim$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).trim$0(receiver);
};
J.volume$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).volume$1(receiver, a0);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  var t1 = new P.Expando(null);
  H.setRuntimeTypeInfo(t1, [J.JSInt]);
  return t1;
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined());
});
Isolate.$lazy($, "prevVolume", "prevVolume", "get$prevVolume", function() {
  return $.get$localStorage().getItem("prevVolume");
});
Isolate.$lazy($, "isMuted", "isMuted", "get$isMuted", function() {
  return $.get$localStorage().getItem("isMuted");
});
Isolate.$lazy($, "_COLORS", "TabContent__COLORS", "get$TabContent__COLORS", function() {
  return ["aqua", "blue", "fuchsia", "gray", "green", "lime", "maroon", "navy", "olive", "orange", "purple", "red", "teal"];
});
Isolate.$lazy($, "COMMANDS", "COMMANDS", "get$COMMANDS", function() {
  var t1 = P.List_List(null, J.JSArray);
  H.setRuntimeTypeInfo(t1, [J.JSArray]);
  t1.push(["print", "\"print <message>\" Prints a message to the console.", B.printConsole$closure]);
  t1.push(["clear", "Clears the console history", B.clearConsole$closure]);
  t1.push(["help", "Displays this dialog.", B.printHelp$closure]);
  t1.push(["hideConsole", "Hides the console from view", B.hideConsole$closure]);
  t1.push(["setenergy", "\"setenergy <value>\" Changes the energy meter", B.setEnergy$closure]);
  t1.push(["setmaxenergy", "\"setmaxenergy <value>\" Changes the energy meters max value", B.setMaxEnergy$closure]);
  t1.push(["setmood", "\"setmood <value>\" Changes the mood meter", B.setMood$closure]);
  t1.push(["setmaxmood", "\"setmaxmood <value>\" Changes the mood meters max value", B.setMaxMood$closure]);
  t1.push(["setcurrants", "\"setcurrants <value>\" Changes the currant meters value", B.setCurrants$closure]);
  t1.push(["setimg", "\"setimg <value>\" Changes the img meters value", B.setImg$closure]);
  t1.push(["setname", "\"setname <value>\" Changes the players displayed name", B.setName$closure]);
  t1.push(["setsong", "\"setsong <value>\" Changes the currently playing song", B.setSong$closure]);
  t1.push(["setvolume", "\"setvolume <1-100>\" Changes the volume of the current song", B.setVolume$closure]);
  return t1;
});
Isolate.$lazy($, "ui", "ui", "get$ui", function() {
  var t1 = new B.UserInterface(T.NumberFormat_NumberFormat("#,###", null), document.querySelector("#PlayerName"), document.querySelector("#CurrCurrants"), document.querySelector("#CurrImagination"), document.querySelector("#TrackTitle"), document.querySelector("#TrackArtist"), new Z.SC("7d2a07867f8a3d47d4f059b600b250b1"), P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), null, document.querySelector("#EnergyIndicator"), document.querySelector("#EnergyIndicatorRed"), document.querySelector("#CurrEnergy"), document.querySelector("#MaxEnergy"), 100, 100, 10, 120, document.querySelector("#MoodCircleRed"), document.querySelector("#MoodCircleEmpty"), 100, 100, document.querySelector("#CurrMood"), document.querySelector("#MaxMood"), document.querySelector("#MoodPercent"));
  J.set$innerHtml$x(t1._maxEnergyText, J.toString$0(t1._maxenergy));
  return t1;
});
Isolate.$lazy($, "chat", "chat", "get$chat", function() {
  return new B.Chat(false, true, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "gameScreen", "gameScreen", "get$gameScreen", function() {
  return document.querySelector("#GameScreen");
});
Isolate.$lazy($, "localStorage", "localStorage", "get$localStorage", function() {
  return window.localStorage;
});
Isolate.$lazy($, "gameCanvas", "gameCanvas", "get$gameCanvas", function() {
  return W.CanvasElement_CanvasElement(null, null);
});
Isolate.$lazy($, "game", "game", "get$game", function() {
  var t1 = G.GameLoopHtml$($.get$gameCanvas());
  t1.onUpdate = new B.closure();
  t1.onRender = new B.closure0();
  return t1;
});
Isolate.$lazy($, "assets", "assets", "get$assets", function() {
  return F.AssetManager$(null);
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return P.ListQueue$(null, {func: "void_", void: true});
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_splitRe", "Uri__splitRe", "get$Uri__splitRe", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^(?:([^:/?#]+):)?(?://(?:([^/?#]*)@)?(?:([\\w\\d\\-\\u0100-\\uffff.%]*)|\\[([A-Fa-f0-9:.]*)\\])(?::([0-9]+))?)?([^?#[]+)?(?:\\?([^#]*))?(?:#(.*))?$", false, true, false), null, null);
});
Isolate.$lazy($, "_safeConsole", "Console__safeConsole", "get$Console__safeConsole", function() {
  return new W.Console();
});
Isolate.$lazy($, "_allowedElements", "_Html5NodeValidator__allowedElements", "get$_Html5NodeValidator__allowedElements", function() {
  var t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(t1, ["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"]);
  return t1;
});
Isolate.$lazy($, "_attributeValidators", "_Html5NodeValidator__attributeValidators", "get$_Html5NodeValidator__attributeValidators", function() {
  return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_buttonIds", "Keyboard__buttonIds", "get$Keyboard__buttonIds", function() {
  return [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 16, 17, 18, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 13, 38, 40, 37, 39, 27, 192, 220, 8, 20, 221, 188, 93, 189, 46, 35, 187, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 61, 59, 166, 36, 45, 183, 3, 224, 91, 12, 46, 111, 39, 104, 101, 100, 45, 109, 106, 105, 38, 33, 36, 97, 110, 107, 103, 102, 40, 34, 35, 99, 98, 37, 96, 144, 219, 33, 34, 19, 190, 44, 63, 145, 186, 222, 191, 9, 192, 229, 224, 0, 91, 92];
});
Isolate.$lazy($, "_buttonIds", "Mouse__buttonIds", "get$Mouse__buttonIds", function() {
  return [0, 1, 2];
});
Isolate.$lazy($, "Months", "Months", "get$Months", function() {
  return ["Primuary", "Spork", "Bruise", "Candy", "Fever", "Junuary", "Septa", "Remember", "Doom", "Widdershins", "Eleventy", "Recurse"];
});
Isolate.$lazy($, "Days_of_Week", "Days_of_Week", "get$Days_of_Week", function() {
  return ["Hairday", "Moonday", "Twoday", "Weddingday", "Theday", "Fryday", "Standday", "Fabday"];
});
// Native classes

init.functionAliases = {};
;
init.metadata = [];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(B.main$closure); });
  } else {
    H.startRootIsolate(B.main$closure);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, accessors, cls) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable = false;
    if (code == 45) {
      len--;
      code = field.charCodeAt(len - 1);
      field = field.substring(0, len);
      reflectable = true;
    }
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()
function dart_precompiled($collectedClasses) {
  var $desc;
  function HtmlElement() {
  }
  HtmlElement.builtin$cls = "HtmlElement";
  if (!"name" in HtmlElement)
    HtmlElement.name = "HtmlElement";
  $desc = $collectedClasses.HtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement.prototype = $desc;
  function AnchorElement() {
  }
  AnchorElement.builtin$cls = "AnchorElement";
  if (!"name" in AnchorElement)
    AnchorElement.name = "AnchorElement";
  $desc = $collectedClasses.AnchorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnchorElement.prototype = $desc;
  AnchorElement.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  AnchorElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  AnchorElement.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  AnchorElement.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  AnchorElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  AnchorElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  AnchorElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function AnimationEvent() {
  }
  AnimationEvent.builtin$cls = "AnimationEvent";
  if (!"name" in AnimationEvent)
    AnimationEvent.name = "AnimationEvent";
  $desc = $collectedClasses.AnimationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationEvent.prototype = $desc;
  function AreaElement() {
  }
  AreaElement.builtin$cls = "AreaElement";
  if (!"name" in AreaElement)
    AreaElement.name = "AreaElement";
  $desc = $collectedClasses.AreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AreaElement.prototype = $desc;
  AreaElement.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  AreaElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  AreaElement.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  AreaElement.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  AreaElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function AudioElement() {
  }
  AudioElement.builtin$cls = "AudioElement";
  if (!"name" in AudioElement)
    AudioElement.name = "AudioElement";
  $desc = $collectedClasses.AudioElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioElement.prototype = $desc;
  function AutocompleteErrorEvent() {
  }
  AutocompleteErrorEvent.builtin$cls = "AutocompleteErrorEvent";
  if (!"name" in AutocompleteErrorEvent)
    AutocompleteErrorEvent.name = "AutocompleteErrorEvent";
  $desc = $collectedClasses.AutocompleteErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AutocompleteErrorEvent.prototype = $desc;
  function BRElement() {
  }
  BRElement.builtin$cls = "BRElement";
  if (!"name" in BRElement)
    BRElement.name = "BRElement";
  $desc = $collectedClasses.BRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BRElement.prototype = $desc;
  function BaseElement() {
  }
  BaseElement.builtin$cls = "BaseElement";
  if (!"name" in BaseElement)
    BaseElement.name = "BaseElement";
  $desc = $collectedClasses.BaseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseElement.prototype = $desc;
  BaseElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  BaseElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function BeforeLoadEvent() {
  }
  BeforeLoadEvent.builtin$cls = "BeforeLoadEvent";
  if (!"name" in BeforeLoadEvent)
    BeforeLoadEvent.name = "BeforeLoadEvent";
  $desc = $collectedClasses.BeforeLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeLoadEvent.prototype = $desc;
  BeforeLoadEvent.prototype.get$url = function(receiver) {
    return receiver.url;
  };
  function BeforeUnloadEvent() {
  }
  BeforeUnloadEvent.builtin$cls = "BeforeUnloadEvent";
  if (!"name" in BeforeUnloadEvent)
    BeforeUnloadEvent.name = "BeforeUnloadEvent";
  $desc = $collectedClasses.BeforeUnloadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeUnloadEvent.prototype = $desc;
  function Blob() {
  }
  Blob.builtin$cls = "Blob";
  if (!"name" in Blob)
    Blob.name = "Blob";
  $desc = $collectedClasses.Blob;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Blob.prototype = $desc;
  Blob.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function BodyElement() {
  }
  BodyElement.builtin$cls = "BodyElement";
  if (!"name" in BodyElement)
    BodyElement.name = "BodyElement";
  $desc = $collectedClasses.BodyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BodyElement.prototype = $desc;
  function ButtonElement() {
  }
  ButtonElement.builtin$cls = "ButtonElement";
  if (!"name" in ButtonElement)
    ButtonElement.name = "ButtonElement";
  $desc = $collectedClasses.ButtonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ButtonElement.prototype = $desc;
  ButtonElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ButtonElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  ButtonElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ButtonElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  ButtonElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  ButtonElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function CDataSection() {
  }
  CDataSection.builtin$cls = "CDataSection";
  if (!"name" in CDataSection)
    CDataSection.name = "CDataSection";
  $desc = $collectedClasses.CDataSection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CDataSection.prototype = $desc;
  function CanvasElement() {
  }
  CanvasElement.builtin$cls = "CanvasElement";
  if (!"name" in CanvasElement)
    CanvasElement.name = "CanvasElement";
  $desc = $collectedClasses.CanvasElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasElement.prototype = $desc;
  CanvasElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  CanvasElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  CanvasElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  CanvasElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function CanvasGradient() {
  }
  CanvasGradient.builtin$cls = "CanvasGradient";
  if (!"name" in CanvasGradient)
    CanvasGradient.name = "CanvasGradient";
  $desc = $collectedClasses.CanvasGradient;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasGradient.prototype = $desc;
  function CanvasPattern() {
  }
  CanvasPattern.builtin$cls = "CanvasPattern";
  if (!"name" in CanvasPattern)
    CanvasPattern.name = "CanvasPattern";
  $desc = $collectedClasses.CanvasPattern;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasPattern.prototype = $desc;
  function CanvasRenderingContext() {
  }
  CanvasRenderingContext.builtin$cls = "CanvasRenderingContext";
  if (!"name" in CanvasRenderingContext)
    CanvasRenderingContext.name = "CanvasRenderingContext";
  $desc = $collectedClasses.CanvasRenderingContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasRenderingContext.prototype = $desc;
  function CanvasRenderingContext2D() {
  }
  CanvasRenderingContext2D.builtin$cls = "CanvasRenderingContext2D";
  if (!"name" in CanvasRenderingContext2D)
    CanvasRenderingContext2D.name = "CanvasRenderingContext2D";
  $desc = $collectedClasses.CanvasRenderingContext2D;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasRenderingContext2D.prototype = $desc;
  function CharacterData() {
  }
  CharacterData.builtin$cls = "CharacterData";
  if (!"name" in CharacterData)
    CharacterData.name = "CharacterData";
  $desc = $collectedClasses.CharacterData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CharacterData.prototype = $desc;
  CharacterData.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  CharacterData.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CloseEvent() {
  }
  CloseEvent.builtin$cls = "CloseEvent";
  if (!"name" in CloseEvent)
    CloseEvent.name = "CloseEvent";
  $desc = $collectedClasses.CloseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CloseEvent.prototype = $desc;
  function Comment() {
  }
  Comment.builtin$cls = "Comment";
  if (!"name" in Comment)
    Comment.name = "Comment";
  $desc = $collectedClasses.Comment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comment.prototype = $desc;
  function CompositionEvent() {
  }
  CompositionEvent.builtin$cls = "CompositionEvent";
  if (!"name" in CompositionEvent)
    CompositionEvent.name = "CompositionEvent";
  $desc = $collectedClasses.CompositionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompositionEvent.prototype = $desc;
  CompositionEvent.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function ContentElement() {
  }
  ContentElement.builtin$cls = "ContentElement";
  if (!"name" in ContentElement)
    ContentElement.name = "ContentElement";
  $desc = $collectedClasses.ContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContentElement.prototype = $desc;
  function CssFontFaceLoadEvent() {
  }
  CssFontFaceLoadEvent.builtin$cls = "CssFontFaceLoadEvent";
  if (!"name" in CssFontFaceLoadEvent)
    CssFontFaceLoadEvent.name = "CssFontFaceLoadEvent";
  $desc = $collectedClasses.CssFontFaceLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssFontFaceLoadEvent.prototype = $desc;
  function CssStyleDeclaration() {
  }
  CssStyleDeclaration.builtin$cls = "CssStyleDeclaration";
  if (!"name" in CssStyleDeclaration)
    CssStyleDeclaration.name = "CssStyleDeclaration";
  $desc = $collectedClasses.CssStyleDeclaration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclaration.prototype = $desc;
  CssStyleDeclaration.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CustomEvent() {
  }
  CustomEvent.builtin$cls = "CustomEvent";
  if (!"name" in CustomEvent)
    CustomEvent.name = "CustomEvent";
  $desc = $collectedClasses.CustomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CustomEvent.prototype = $desc;
  function DListElement() {
  }
  DListElement.builtin$cls = "DListElement";
  if (!"name" in DListElement)
    DListElement.name = "DListElement";
  $desc = $collectedClasses.DListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DListElement.prototype = $desc;
  function DataListElement() {
  }
  DataListElement.builtin$cls = "DataListElement";
  if (!"name" in DataListElement)
    DataListElement.name = "DataListElement";
  $desc = $collectedClasses.DataListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DataListElement.prototype = $desc;
  function DetailsElement() {
  }
  DetailsElement.builtin$cls = "DetailsElement";
  if (!"name" in DetailsElement)
    DetailsElement.name = "DetailsElement";
  $desc = $collectedClasses.DetailsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DetailsElement.prototype = $desc;
  function DeviceMotionEvent() {
  }
  DeviceMotionEvent.builtin$cls = "DeviceMotionEvent";
  if (!"name" in DeviceMotionEvent)
    DeviceMotionEvent.name = "DeviceMotionEvent";
  $desc = $collectedClasses.DeviceMotionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceMotionEvent.prototype = $desc;
  function DeviceOrientationEvent() {
  }
  DeviceOrientationEvent.builtin$cls = "DeviceOrientationEvent";
  if (!"name" in DeviceOrientationEvent)
    DeviceOrientationEvent.name = "DeviceOrientationEvent";
  $desc = $collectedClasses.DeviceOrientationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceOrientationEvent.prototype = $desc;
  function DialogElement() {
  }
  DialogElement.builtin$cls = "DialogElement";
  if (!"name" in DialogElement)
    DialogElement.name = "DialogElement";
  $desc = $collectedClasses.DialogElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DialogElement.prototype = $desc;
  function DivElement() {
  }
  DivElement.builtin$cls = "DivElement";
  if (!"name" in DivElement)
    DivElement.name = "DivElement";
  $desc = $collectedClasses.DivElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DivElement.prototype = $desc;
  function Document() {
  }
  Document.builtin$cls = "Document";
  if (!"name" in Document)
    Document.name = "Document";
  $desc = $collectedClasses.Document;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Document.prototype = $desc;
  function DocumentFragment() {
  }
  DocumentFragment.builtin$cls = "DocumentFragment";
  if (!"name" in DocumentFragment)
    DocumentFragment.name = "DocumentFragment";
  $desc = $collectedClasses.DocumentFragment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentFragment.prototype = $desc;
  function DocumentType() {
  }
  DocumentType.builtin$cls = "DocumentType";
  if (!"name" in DocumentType)
    DocumentType.name = "DocumentType";
  $desc = $collectedClasses.DocumentType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentType.prototype = $desc;
  function DomError() {
  }
  DomError.builtin$cls = "DomError";
  if (!"name" in DomError)
    DomError.name = "DomError";
  $desc = $collectedClasses.DomError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomError.prototype = $desc;
  DomError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  DomError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function DomException() {
  }
  DomException.builtin$cls = "DomException";
  if (!"name" in DomException)
    DomException.name = "DomException";
  $desc = $collectedClasses.DomException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomException.prototype = $desc;
  DomException.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function DomImplementation() {
  }
  DomImplementation.builtin$cls = "DomImplementation";
  if (!"name" in DomImplementation)
    DomImplementation.name = "DomImplementation";
  $desc = $collectedClasses.DomImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomImplementation.prototype = $desc;
  function Element() {
  }
  Element.builtin$cls = "Element";
  if (!"name" in Element)
    Element.name = "Element";
  $desc = $collectedClasses.Element;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element.prototype = $desc;
  Element.prototype.get$className = function(receiver) {
    return receiver.className;
  };
  Element.prototype.set$className = function(receiver, v) {
    return receiver.className = v;
  };
  Element.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  Element.prototype.get$style = function(receiver) {
    return receiver.style;
  };
  function EmbedElement() {
  }
  EmbedElement.builtin$cls = "EmbedElement";
  if (!"name" in EmbedElement)
    EmbedElement.name = "EmbedElement";
  $desc = $collectedClasses.EmbedElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmbedElement.prototype = $desc;
  EmbedElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  EmbedElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  EmbedElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  EmbedElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  EmbedElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  EmbedElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  EmbedElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  EmbedElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  EmbedElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function ErrorEvent() {
  }
  ErrorEvent.builtin$cls = "ErrorEvent";
  if (!"name" in ErrorEvent)
    ErrorEvent.name = "ErrorEvent";
  $desc = $collectedClasses.ErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ErrorEvent.prototype = $desc;
  ErrorEvent.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  ErrorEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function Event() {
  }
  Event.builtin$cls = "Event";
  if (!"name" in Event)
    Event.name = "Event";
  $desc = $collectedClasses.Event;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Event.prototype = $desc;
  Event.prototype.get$timeStamp = function(receiver) {
    return receiver.timeStamp;
  };
  Event.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function EventTarget() {
  }
  EventTarget.builtin$cls = "EventTarget";
  if (!"name" in EventTarget)
    EventTarget.name = "EventTarget";
  $desc = $collectedClasses.EventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventTarget.prototype = $desc;
  function FieldSetElement() {
  }
  FieldSetElement.builtin$cls = "FieldSetElement";
  if (!"name" in FieldSetElement)
    FieldSetElement.name = "FieldSetElement";
  $desc = $collectedClasses.FieldSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FieldSetElement.prototype = $desc;
  FieldSetElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  FieldSetElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  FieldSetElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function File() {
  }
  File.builtin$cls = "File";
  if (!"name" in File)
    File.name = "File";
  $desc = $collectedClasses.File;
  if ($desc instanceof Array)
    $desc = $desc[1];
  File.prototype = $desc;
  File.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function FileError() {
  }
  FileError.builtin$cls = "FileError";
  if (!"name" in FileError)
    FileError.name = "FileError";
  $desc = $collectedClasses.FileError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FileError.prototype = $desc;
  function FocusEvent() {
  }
  FocusEvent.builtin$cls = "FocusEvent";
  if (!"name" in FocusEvent)
    FocusEvent.name = "FocusEvent";
  $desc = $collectedClasses.FocusEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FocusEvent.prototype = $desc;
  function FormElement() {
  }
  FormElement.builtin$cls = "FormElement";
  if (!"name" in FormElement)
    FormElement.name = "FormElement";
  $desc = $collectedClasses.FormElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormElement.prototype = $desc;
  FormElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  FormElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  FormElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  FormElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function HRElement() {
  }
  HRElement.builtin$cls = "HRElement";
  if (!"name" in HRElement)
    HRElement.name = "HRElement";
  $desc = $collectedClasses.HRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HRElement.prototype = $desc;
  function HashChangeEvent() {
  }
  HashChangeEvent.builtin$cls = "HashChangeEvent";
  if (!"name" in HashChangeEvent)
    HashChangeEvent.name = "HashChangeEvent";
  $desc = $collectedClasses.HashChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashChangeEvent.prototype = $desc;
  function HeadElement() {
  }
  HeadElement.builtin$cls = "HeadElement";
  if (!"name" in HeadElement)
    HeadElement.name = "HeadElement";
  $desc = $collectedClasses.HeadElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadElement.prototype = $desc;
  function HeadingElement() {
  }
  HeadingElement.builtin$cls = "HeadingElement";
  if (!"name" in HeadingElement)
    HeadingElement.name = "HeadingElement";
  $desc = $collectedClasses.HeadingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadingElement.prototype = $desc;
  function HtmlCollection() {
  }
  HtmlCollection.builtin$cls = "HtmlCollection";
  if (!"name" in HtmlCollection)
    HtmlCollection.name = "HtmlCollection";
  $desc = $collectedClasses.HtmlCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlCollection.prototype = $desc;
  function HtmlDocument() {
  }
  HtmlDocument.builtin$cls = "HtmlDocument";
  if (!"name" in HtmlDocument)
    HtmlDocument.name = "HtmlDocument";
  $desc = $collectedClasses.HtmlDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlDocument.prototype = $desc;
  function HtmlFormControlsCollection() {
  }
  HtmlFormControlsCollection.builtin$cls = "HtmlFormControlsCollection";
  if (!"name" in HtmlFormControlsCollection)
    HtmlFormControlsCollection.name = "HtmlFormControlsCollection";
  $desc = $collectedClasses.HtmlFormControlsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlFormControlsCollection.prototype = $desc;
  function HtmlHtmlElement() {
  }
  HtmlHtmlElement.builtin$cls = "HtmlHtmlElement";
  if (!"name" in HtmlHtmlElement)
    HtmlHtmlElement.name = "HtmlHtmlElement";
  $desc = $collectedClasses.HtmlHtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlHtmlElement.prototype = $desc;
  function HtmlOptionsCollection() {
  }
  HtmlOptionsCollection.builtin$cls = "HtmlOptionsCollection";
  if (!"name" in HtmlOptionsCollection)
    HtmlOptionsCollection.name = "HtmlOptionsCollection";
  $desc = $collectedClasses.HtmlOptionsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlOptionsCollection.prototype = $desc;
  function HttpRequest() {
  }
  HttpRequest.builtin$cls = "HttpRequest";
  if (!"name" in HttpRequest)
    HttpRequest.name = "HttpRequest";
  $desc = $collectedClasses.HttpRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest.prototype = $desc;
  HttpRequest.prototype.get$responseText = function(receiver) {
    return receiver.responseText;
  };
  function HttpRequestEventTarget() {
  }
  HttpRequestEventTarget.builtin$cls = "HttpRequestEventTarget";
  if (!"name" in HttpRequestEventTarget)
    HttpRequestEventTarget.name = "HttpRequestEventTarget";
  $desc = $collectedClasses.HttpRequestEventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequestEventTarget.prototype = $desc;
  function IFrameElement() {
  }
  IFrameElement.builtin$cls = "IFrameElement";
  if (!"name" in IFrameElement)
    IFrameElement.name = "IFrameElement";
  $desc = $collectedClasses.IFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IFrameElement.prototype = $desc;
  IFrameElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  IFrameElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  IFrameElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  IFrameElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  IFrameElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  IFrameElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  IFrameElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function ImageElement() {
  }
  ImageElement.builtin$cls = "ImageElement";
  if (!"name" in ImageElement)
    ImageElement.name = "ImageElement";
  $desc = $collectedClasses.ImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement.prototype = $desc;
  ImageElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ImageElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  ImageElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  ImageElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ImageElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function InputElement() {
  }
  InputElement.builtin$cls = "InputElement";
  if (!"name" in InputElement)
    InputElement.name = "InputElement";
  $desc = $collectedClasses.InputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InputElement.prototype = $desc;
  InputElement.prototype.get$checked = function(receiver) {
    return receiver.checked;
  };
  InputElement.prototype.set$checked = function(receiver, v) {
    return receiver.checked = v;
  };
  InputElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  InputElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  InputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  InputElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  InputElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  InputElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  InputElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  InputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  InputElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  InputElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  InputElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function KeyboardEvent() {
  }
  KeyboardEvent.builtin$cls = "KeyboardEvent";
  if (!"name" in KeyboardEvent)
    KeyboardEvent.name = "KeyboardEvent";
  $desc = $collectedClasses.KeyboardEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeyboardEvent.prototype = $desc;
  function KeygenElement() {
  }
  KeygenElement.builtin$cls = "KeygenElement";
  if (!"name" in KeygenElement)
    KeygenElement.name = "KeygenElement";
  $desc = $collectedClasses.KeygenElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeygenElement.prototype = $desc;
  KeygenElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  KeygenElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  KeygenElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function LIElement() {
  }
  LIElement.builtin$cls = "LIElement";
  if (!"name" in LIElement)
    LIElement.name = "LIElement";
  $desc = $collectedClasses.LIElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LIElement.prototype = $desc;
  LIElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  LIElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function LabelElement() {
  }
  LabelElement.builtin$cls = "LabelElement";
  if (!"name" in LabelElement)
    LabelElement.name = "LabelElement";
  $desc = $collectedClasses.LabelElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LabelElement.prototype = $desc;
  function LegendElement() {
  }
  LegendElement.builtin$cls = "LegendElement";
  if (!"name" in LegendElement)
    LegendElement.name = "LegendElement";
  $desc = $collectedClasses.LegendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LegendElement.prototype = $desc;
  function LinkElement() {
  }
  LinkElement.builtin$cls = "LinkElement";
  if (!"name" in LinkElement)
    LinkElement.name = "LinkElement";
  $desc = $collectedClasses.LinkElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkElement.prototype = $desc;
  LinkElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  LinkElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  LinkElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function Location() {
  }
  Location.builtin$cls = "Location";
  if (!"name" in Location)
    Location.name = "Location";
  $desc = $collectedClasses.Location;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Location.prototype = $desc;
  Location.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  Location.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  Location.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  function MapElement() {
  }
  MapElement.builtin$cls = "MapElement";
  if (!"name" in MapElement)
    MapElement.name = "MapElement";
  $desc = $collectedClasses.MapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapElement.prototype = $desc;
  MapElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  MapElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  function MediaElement() {
  }
  MediaElement.builtin$cls = "MediaElement";
  if (!"name" in MediaElement)
    MediaElement.name = "MediaElement";
  $desc = $collectedClasses.MediaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaElement.prototype = $desc;
  MediaElement.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  MediaElement.prototype.set$loop = function(receiver, v) {
    return receiver.loop = v;
  };
  MediaElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  MediaElement.prototype.set$volume = function(receiver, v) {
    return receiver.volume = v;
  };
  function MediaError() {
  }
  MediaError.builtin$cls = "MediaError";
  if (!"name" in MediaError)
    MediaError.name = "MediaError";
  $desc = $collectedClasses.MediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaError.prototype = $desc;
  function MediaKeyError() {
  }
  MediaKeyError.builtin$cls = "MediaKeyError";
  if (!"name" in MediaKeyError)
    MediaKeyError.name = "MediaKeyError";
  $desc = $collectedClasses.MediaKeyError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyError.prototype = $desc;
  function MediaKeyEvent() {
  }
  MediaKeyEvent.builtin$cls = "MediaKeyEvent";
  if (!"name" in MediaKeyEvent)
    MediaKeyEvent.name = "MediaKeyEvent";
  $desc = $collectedClasses.MediaKeyEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyEvent.prototype = $desc;
  MediaKeyEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function MediaKeyMessageEvent() {
  }
  MediaKeyMessageEvent.builtin$cls = "MediaKeyMessageEvent";
  if (!"name" in MediaKeyMessageEvent)
    MediaKeyMessageEvent.name = "MediaKeyMessageEvent";
  $desc = $collectedClasses.MediaKeyMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyMessageEvent.prototype = $desc;
  MediaKeyMessageEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function MediaKeyNeededEvent() {
  }
  MediaKeyNeededEvent.builtin$cls = "MediaKeyNeededEvent";
  if (!"name" in MediaKeyNeededEvent)
    MediaKeyNeededEvent.name = "MediaKeyNeededEvent";
  $desc = $collectedClasses.MediaKeyNeededEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyNeededEvent.prototype = $desc;
  function MediaStream() {
  }
  MediaStream.builtin$cls = "MediaStream";
  if (!"name" in MediaStream)
    MediaStream.name = "MediaStream";
  $desc = $collectedClasses.MediaStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStream.prototype = $desc;
  MediaStream.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  function MediaStreamEvent() {
  }
  MediaStreamEvent.builtin$cls = "MediaStreamEvent";
  if (!"name" in MediaStreamEvent)
    MediaStreamEvent.name = "MediaStreamEvent";
  $desc = $collectedClasses.MediaStreamEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamEvent.prototype = $desc;
  function MediaStreamTrackEvent() {
  }
  MediaStreamTrackEvent.builtin$cls = "MediaStreamTrackEvent";
  if (!"name" in MediaStreamTrackEvent)
    MediaStreamTrackEvent.name = "MediaStreamTrackEvent";
  $desc = $collectedClasses.MediaStreamTrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamTrackEvent.prototype = $desc;
  function MenuElement() {
  }
  MenuElement.builtin$cls = "MenuElement";
  if (!"name" in MenuElement)
    MenuElement.name = "MenuElement";
  $desc = $collectedClasses.MenuElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuElement.prototype = $desc;
  function MessageEvent() {
  }
  MessageEvent.builtin$cls = "MessageEvent";
  if (!"name" in MessageEvent)
    MessageEvent.name = "MessageEvent";
  $desc = $collectedClasses.MessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MessageEvent.prototype = $desc;
  function MetaElement() {
  }
  MetaElement.builtin$cls = "MetaElement";
  if (!"name" in MetaElement)
    MetaElement.name = "MetaElement";
  $desc = $collectedClasses.MetaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetaElement.prototype = $desc;
  MetaElement.prototype.get$content = function(receiver) {
    return receiver.content;
  };
  MetaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  MetaElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  function MeterElement() {
  }
  MeterElement.builtin$cls = "MeterElement";
  if (!"name" in MeterElement)
    MeterElement.name = "MeterElement";
  $desc = $collectedClasses.MeterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MeterElement.prototype = $desc;
  MeterElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  MeterElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function MidiConnectionEvent() {
  }
  MidiConnectionEvent.builtin$cls = "MidiConnectionEvent";
  if (!"name" in MidiConnectionEvent)
    MidiConnectionEvent.name = "MidiConnectionEvent";
  $desc = $collectedClasses.MidiConnectionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiConnectionEvent.prototype = $desc;
  function MidiInput() {
  }
  MidiInput.builtin$cls = "MidiInput";
  if (!"name" in MidiInput)
    MidiInput.name = "MidiInput";
  $desc = $collectedClasses.MidiInput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiInput.prototype = $desc;
  function MidiMessageEvent() {
  }
  MidiMessageEvent.builtin$cls = "MidiMessageEvent";
  if (!"name" in MidiMessageEvent)
    MidiMessageEvent.name = "MidiMessageEvent";
  $desc = $collectedClasses.MidiMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiMessageEvent.prototype = $desc;
  MidiMessageEvent.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function MidiOutput() {
  }
  MidiOutput.builtin$cls = "MidiOutput";
  if (!"name" in MidiOutput)
    MidiOutput.name = "MidiOutput";
  $desc = $collectedClasses.MidiOutput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiOutput.prototype = $desc;
  function MidiPort() {
  }
  MidiPort.builtin$cls = "MidiPort";
  if (!"name" in MidiPort)
    MidiPort.name = "MidiPort";
  $desc = $collectedClasses.MidiPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiPort.prototype = $desc;
  MidiPort.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  MidiPort.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  MidiPort.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function ModElement() {
  }
  ModElement.builtin$cls = "ModElement";
  if (!"name" in ModElement)
    ModElement.name = "ModElement";
  $desc = $collectedClasses.ModElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ModElement.prototype = $desc;
  function MouseEvent() {
  }
  MouseEvent.builtin$cls = "MouseEvent";
  if (!"name" in MouseEvent)
    MouseEvent.name = "MouseEvent";
  $desc = $collectedClasses.MouseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MouseEvent.prototype = $desc;
  MouseEvent.prototype.get$button = function(receiver) {
    return receiver.button;
  };
  MouseEvent.prototype.get$_clientX = function(receiver) {
    return receiver.clientX;
  };
  function Navigator() {
  }
  Navigator.builtin$cls = "Navigator";
  if (!"name" in Navigator)
    Navigator.name = "Navigator";
  $desc = $collectedClasses.Navigator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Navigator.prototype = $desc;
  function NavigatorUserMediaError() {
  }
  NavigatorUserMediaError.builtin$cls = "NavigatorUserMediaError";
  if (!"name" in NavigatorUserMediaError)
    NavigatorUserMediaError.name = "NavigatorUserMediaError";
  $desc = $collectedClasses.NavigatorUserMediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NavigatorUserMediaError.prototype = $desc;
  NavigatorUserMediaError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  NavigatorUserMediaError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function Node() {
  }
  Node.builtin$cls = "Node";
  if (!"name" in Node)
    Node.name = "Node";
  $desc = $collectedClasses.Node;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Node.prototype = $desc;
  Node.prototype.get$lastChild = function(receiver) {
    return receiver.lastChild;
  };
  Node.prototype.get$nodeType = function(receiver) {
    return receiver.nodeType;
  };
  Node.prototype.get$text = function(receiver) {
    return receiver.textContent;
  };
  function BoundClosure$i0(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$i0.builtin$cls = "BoundClosure$i0";
  $desc = $collectedClasses.BoundClosure$i0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$i0.prototype = $desc;
  function NodeList() {
  }
  NodeList.builtin$cls = "NodeList";
  if (!"name" in NodeList)
    NodeList.name = "NodeList";
  $desc = $collectedClasses.NodeList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeList.prototype = $desc;
  function OListElement() {
  }
  OListElement.builtin$cls = "OListElement";
  if (!"name" in OListElement)
    OListElement.name = "OListElement";
  $desc = $collectedClasses.OListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OListElement.prototype = $desc;
  OListElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  OListElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function ObjectElement() {
  }
  ObjectElement.builtin$cls = "ObjectElement";
  if (!"name" in ObjectElement)
    ObjectElement.name = "ObjectElement";
  $desc = $collectedClasses.ObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObjectElement.prototype = $desc;
  ObjectElement.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  ObjectElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ObjectElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  ObjectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ObjectElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  ObjectElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ObjectElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  ObjectElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ObjectElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function OptGroupElement() {
  }
  OptGroupElement.builtin$cls = "OptGroupElement";
  if (!"name" in OptGroupElement)
    OptGroupElement.name = "OptGroupElement";
  $desc = $collectedClasses.OptGroupElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptGroupElement.prototype = $desc;
  function OptionElement() {
  }
  OptionElement.builtin$cls = "OptionElement";
  if (!"name" in OptionElement)
    OptionElement.name = "OptionElement";
  $desc = $collectedClasses.OptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptionElement.prototype = $desc;
  OptionElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  OptionElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function OutputElement() {
  }
  OutputElement.builtin$cls = "OutputElement";
  if (!"name" in OutputElement)
    OutputElement.name = "OutputElement";
  $desc = $collectedClasses.OutputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OutputElement.prototype = $desc;
  OutputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  OutputElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  OutputElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  OutputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  OutputElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function OverflowEvent() {
  }
  OverflowEvent.builtin$cls = "OverflowEvent";
  if (!"name" in OverflowEvent)
    OverflowEvent.name = "OverflowEvent";
  $desc = $collectedClasses.OverflowEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OverflowEvent.prototype = $desc;
  function PageTransitionEvent() {
  }
  PageTransitionEvent.builtin$cls = "PageTransitionEvent";
  if (!"name" in PageTransitionEvent)
    PageTransitionEvent.name = "PageTransitionEvent";
  $desc = $collectedClasses.PageTransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PageTransitionEvent.prototype = $desc;
  function ParagraphElement() {
  }
  ParagraphElement.builtin$cls = "ParagraphElement";
  if (!"name" in ParagraphElement)
    ParagraphElement.name = "ParagraphElement";
  $desc = $collectedClasses.ParagraphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParagraphElement.prototype = $desc;
  function ParamElement() {
  }
  ParamElement.builtin$cls = "ParamElement";
  if (!"name" in ParamElement)
    ParamElement.name = "ParamElement";
  $desc = $collectedClasses.ParamElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParamElement.prototype = $desc;
  ParamElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ParamElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  ParamElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  ParamElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function Performance() {
  }
  Performance.builtin$cls = "Performance";
  if (!"name" in Performance)
    Performance.name = "Performance";
  $desc = $collectedClasses.Performance;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Performance.prototype = $desc;
  function PopStateEvent() {
  }
  PopStateEvent.builtin$cls = "PopStateEvent";
  if (!"name" in PopStateEvent)
    PopStateEvent.name = "PopStateEvent";
  $desc = $collectedClasses.PopStateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PopStateEvent.prototype = $desc;
  function PositionError() {
  }
  PositionError.builtin$cls = "PositionError";
  if (!"name" in PositionError)
    PositionError.name = "PositionError";
  $desc = $collectedClasses.PositionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PositionError.prototype = $desc;
  PositionError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function PreElement() {
  }
  PreElement.builtin$cls = "PreElement";
  if (!"name" in PreElement)
    PreElement.name = "PreElement";
  $desc = $collectedClasses.PreElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PreElement.prototype = $desc;
  function ProcessingInstruction() {
  }
  ProcessingInstruction.builtin$cls = "ProcessingInstruction";
  if (!"name" in ProcessingInstruction)
    ProcessingInstruction.name = "ProcessingInstruction";
  $desc = $collectedClasses.ProcessingInstruction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProcessingInstruction.prototype = $desc;
  ProcessingInstruction.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function ProgressElement() {
  }
  ProgressElement.builtin$cls = "ProgressElement";
  if (!"name" in ProgressElement)
    ProgressElement.name = "ProgressElement";
  $desc = $collectedClasses.ProgressElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressElement.prototype = $desc;
  ProgressElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  ProgressElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function ProgressEvent() {
  }
  ProgressEvent.builtin$cls = "ProgressEvent";
  if (!"name" in ProgressEvent)
    ProgressEvent.name = "ProgressEvent";
  $desc = $collectedClasses.ProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressEvent.prototype = $desc;
  function QuoteElement() {
  }
  QuoteElement.builtin$cls = "QuoteElement";
  if (!"name" in QuoteElement)
    QuoteElement.name = "QuoteElement";
  $desc = $collectedClasses.QuoteElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  QuoteElement.prototype = $desc;
  function Range() {
  }
  Range.builtin$cls = "Range";
  if (!"name" in Range)
    Range.name = "Range";
  $desc = $collectedClasses.Range;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Range.prototype = $desc;
  function ResourceProgressEvent() {
  }
  ResourceProgressEvent.builtin$cls = "ResourceProgressEvent";
  if (!"name" in ResourceProgressEvent)
    ResourceProgressEvent.name = "ResourceProgressEvent";
  $desc = $collectedClasses.ResourceProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ResourceProgressEvent.prototype = $desc;
  ResourceProgressEvent.prototype.get$url = function(receiver) {
    return receiver.url;
  };
  function RtcDataChannelEvent() {
  }
  RtcDataChannelEvent.builtin$cls = "RtcDataChannelEvent";
  if (!"name" in RtcDataChannelEvent)
    RtcDataChannelEvent.name = "RtcDataChannelEvent";
  $desc = $collectedClasses.RtcDataChannelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDataChannelEvent.prototype = $desc;
  function RtcDtmfToneChangeEvent() {
  }
  RtcDtmfToneChangeEvent.builtin$cls = "RtcDtmfToneChangeEvent";
  if (!"name" in RtcDtmfToneChangeEvent)
    RtcDtmfToneChangeEvent.name = "RtcDtmfToneChangeEvent";
  $desc = $collectedClasses.RtcDtmfToneChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDtmfToneChangeEvent.prototype = $desc;
  function RtcIceCandidateEvent() {
  }
  RtcIceCandidateEvent.builtin$cls = "RtcIceCandidateEvent";
  if (!"name" in RtcIceCandidateEvent)
    RtcIceCandidateEvent.name = "RtcIceCandidateEvent";
  $desc = $collectedClasses.RtcIceCandidateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcIceCandidateEvent.prototype = $desc;
  function ScriptElement0() {
  }
  ScriptElement0.builtin$cls = "ScriptElement0";
  if (!"name" in ScriptElement0)
    ScriptElement0.name = "ScriptElement0";
  $desc = $collectedClasses.ScriptElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement0.prototype = $desc;
  ScriptElement0.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  ScriptElement0.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ScriptElement0.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SecurityPolicyViolationEvent() {
  }
  SecurityPolicyViolationEvent.builtin$cls = "SecurityPolicyViolationEvent";
  if (!"name" in SecurityPolicyViolationEvent)
    SecurityPolicyViolationEvent.name = "SecurityPolicyViolationEvent";
  $desc = $collectedClasses.SecurityPolicyViolationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SecurityPolicyViolationEvent.prototype = $desc;
  function SelectElement() {
  }
  SelectElement.builtin$cls = "SelectElement";
  if (!"name" in SelectElement)
    SelectElement.name = "SelectElement";
  $desc = $collectedClasses.SelectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SelectElement.prototype = $desc;
  SelectElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  SelectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  SelectElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  SelectElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  SelectElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  SelectElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function ShadowElement() {
  }
  ShadowElement.builtin$cls = "ShadowElement";
  if (!"name" in ShadowElement)
    ShadowElement.name = "ShadowElement";
  $desc = $collectedClasses.ShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowElement.prototype = $desc;
  function ShadowRoot() {
  }
  ShadowRoot.builtin$cls = "ShadowRoot";
  if (!"name" in ShadowRoot)
    ShadowRoot.name = "ShadowRoot";
  $desc = $collectedClasses.ShadowRoot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowRoot.prototype = $desc;
  ShadowRoot.prototype.get$innerHtml = function(receiver) {
    return receiver.innerHTML;
  };
  function SourceElement() {
  }
  SourceElement.builtin$cls = "SourceElement";
  if (!"name" in SourceElement)
    SourceElement.name = "SourceElement";
  $desc = $collectedClasses.SourceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceElement.prototype = $desc;
  SourceElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  SourceElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  SourceElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SpanElement() {
  }
  SpanElement.builtin$cls = "SpanElement";
  if (!"name" in SpanElement)
    SpanElement.name = "SpanElement";
  $desc = $collectedClasses.SpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpanElement.prototype = $desc;
  function SpeechInputEvent() {
  }
  SpeechInputEvent.builtin$cls = "SpeechInputEvent";
  if (!"name" in SpeechInputEvent)
    SpeechInputEvent.name = "SpeechInputEvent";
  $desc = $collectedClasses.SpeechInputEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechInputEvent.prototype = $desc;
  function SpeechRecognitionError() {
  }
  SpeechRecognitionError.builtin$cls = "SpeechRecognitionError";
  if (!"name" in SpeechRecognitionError)
    SpeechRecognitionError.name = "SpeechRecognitionError";
  $desc = $collectedClasses.SpeechRecognitionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionError.prototype = $desc;
  SpeechRecognitionError.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  SpeechRecognitionError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function SpeechRecognitionEvent() {
  }
  SpeechRecognitionEvent.builtin$cls = "SpeechRecognitionEvent";
  if (!"name" in SpeechRecognitionEvent)
    SpeechRecognitionEvent.name = "SpeechRecognitionEvent";
  $desc = $collectedClasses.SpeechRecognitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionEvent.prototype = $desc;
  function SpeechSynthesisEvent() {
  }
  SpeechSynthesisEvent.builtin$cls = "SpeechSynthesisEvent";
  if (!"name" in SpeechSynthesisEvent)
    SpeechSynthesisEvent.name = "SpeechSynthesisEvent";
  $desc = $collectedClasses.SpeechSynthesisEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechSynthesisEvent.prototype = $desc;
  SpeechSynthesisEvent.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function Storage() {
  }
  Storage.builtin$cls = "Storage";
  if (!"name" in Storage)
    Storage.name = "Storage";
  $desc = $collectedClasses.Storage;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Storage.prototype = $desc;
  function StorageEvent() {
  }
  StorageEvent.builtin$cls = "StorageEvent";
  if (!"name" in StorageEvent)
    StorageEvent.name = "StorageEvent";
  $desc = $collectedClasses.StorageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StorageEvent.prototype = $desc;
  StorageEvent.prototype.get$url = function(receiver) {
    return receiver.url;
  };
  function StyleElement() {
  }
  StyleElement.builtin$cls = "StyleElement";
  if (!"name" in StyleElement)
    StyleElement.name = "StyleElement";
  $desc = $collectedClasses.StyleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement.prototype = $desc;
  StyleElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  StyleElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function TableCaptionElement() {
  }
  TableCaptionElement.builtin$cls = "TableCaptionElement";
  if (!"name" in TableCaptionElement)
    TableCaptionElement.name = "TableCaptionElement";
  $desc = $collectedClasses.TableCaptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCaptionElement.prototype = $desc;
  function TableCellElement() {
  }
  TableCellElement.builtin$cls = "TableCellElement";
  if (!"name" in TableCellElement)
    TableCellElement.name = "TableCellElement";
  $desc = $collectedClasses.TableCellElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCellElement.prototype = $desc;
  function TableColElement() {
  }
  TableColElement.builtin$cls = "TableColElement";
  if (!"name" in TableColElement)
    TableColElement.name = "TableColElement";
  $desc = $collectedClasses.TableColElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableColElement.prototype = $desc;
  function TableElement() {
  }
  TableElement.builtin$cls = "TableElement";
  if (!"name" in TableElement)
    TableElement.name = "TableElement";
  $desc = $collectedClasses.TableElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableElement.prototype = $desc;
  function TableRowElement() {
  }
  TableRowElement.builtin$cls = "TableRowElement";
  if (!"name" in TableRowElement)
    TableRowElement.name = "TableRowElement";
  $desc = $collectedClasses.TableRowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableRowElement.prototype = $desc;
  function TableSectionElement() {
  }
  TableSectionElement.builtin$cls = "TableSectionElement";
  if (!"name" in TableSectionElement)
    TableSectionElement.name = "TableSectionElement";
  $desc = $collectedClasses.TableSectionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableSectionElement.prototype = $desc;
  function TemplateElement() {
  }
  TemplateElement.builtin$cls = "TemplateElement";
  if (!"name" in TemplateElement)
    TemplateElement.name = "TemplateElement";
  $desc = $collectedClasses.TemplateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateElement.prototype = $desc;
  TemplateElement.prototype.get$content = function(receiver) {
    return receiver.content;
  };
  function Text() {
  }
  Text.builtin$cls = "Text";
  if (!"name" in Text)
    Text.name = "Text";
  $desc = $collectedClasses.Text;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Text.prototype = $desc;
  function TextAreaElement() {
  }
  TextAreaElement.builtin$cls = "TextAreaElement";
  if (!"name" in TextAreaElement)
    TextAreaElement.name = "TextAreaElement";
  $desc = $collectedClasses.TextAreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextAreaElement.prototype = $desc;
  TextAreaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  TextAreaElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  TextAreaElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  TextAreaElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  TextAreaElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function TextEvent() {
  }
  TextEvent.builtin$cls = "TextEvent";
  if (!"name" in TextEvent)
    TextEvent.name = "TextEvent";
  $desc = $collectedClasses.TextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextEvent.prototype = $desc;
  TextEvent.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function TitleElement() {
  }
  TitleElement.builtin$cls = "TitleElement";
  if (!"name" in TitleElement)
    TitleElement.name = "TitleElement";
  $desc = $collectedClasses.TitleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement.prototype = $desc;
  function Touch() {
  }
  Touch.builtin$cls = "Touch";
  if (!"name" in Touch)
    Touch.name = "Touch";
  $desc = $collectedClasses.Touch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Touch.prototype = $desc;
  Touch.prototype.get$identifier = function(receiver) {
    return receiver.identifier;
  };
  function TouchEvent() {
  }
  TouchEvent.builtin$cls = "TouchEvent";
  if (!"name" in TouchEvent)
    TouchEvent.name = "TouchEvent";
  $desc = $collectedClasses.TouchEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TouchEvent.prototype = $desc;
  TouchEvent.prototype.get$changedTouches = function(receiver) {
    return receiver.changedTouches;
  };
  TouchEvent.prototype.get$touches = function(receiver) {
    return receiver.touches;
  };
  function TouchList() {
  }
  TouchList.builtin$cls = "TouchList";
  if (!"name" in TouchList)
    TouchList.name = "TouchList";
  $desc = $collectedClasses.TouchList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TouchList.prototype = $desc;
  function TrackElement() {
  }
  TrackElement.builtin$cls = "TrackElement";
  if (!"name" in TrackElement)
    TrackElement.name = "TrackElement";
  $desc = $collectedClasses.TrackElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackElement.prototype = $desc;
  TrackElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  function TrackEvent() {
  }
  TrackEvent.builtin$cls = "TrackEvent";
  if (!"name" in TrackEvent)
    TrackEvent.name = "TrackEvent";
  $desc = $collectedClasses.TrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackEvent.prototype = $desc;
  function TransitionEvent() {
  }
  TransitionEvent.builtin$cls = "TransitionEvent";
  if (!"name" in TransitionEvent)
    TransitionEvent.name = "TransitionEvent";
  $desc = $collectedClasses.TransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TransitionEvent.prototype = $desc;
  function UIEvent() {
  }
  UIEvent.builtin$cls = "UIEvent";
  if (!"name" in UIEvent)
    UIEvent.name = "UIEvent";
  $desc = $collectedClasses.UIEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UIEvent.prototype = $desc;
  function UListElement() {
  }
  UListElement.builtin$cls = "UListElement";
  if (!"name" in UListElement)
    UListElement.name = "UListElement";
  $desc = $collectedClasses.UListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UListElement.prototype = $desc;
  function UnknownElement() {
  }
  UnknownElement.builtin$cls = "UnknownElement";
  if (!"name" in UnknownElement)
    UnknownElement.name = "UnknownElement";
  $desc = $collectedClasses.UnknownElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownElement.prototype = $desc;
  function VideoElement() {
  }
  VideoElement.builtin$cls = "VideoElement";
  if (!"name" in VideoElement)
    VideoElement.name = "VideoElement";
  $desc = $collectedClasses.VideoElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VideoElement.prototype = $desc;
  VideoElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  VideoElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  VideoElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  VideoElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function WebSocket() {
  }
  WebSocket.builtin$cls = "WebSocket";
  if (!"name" in WebSocket)
    WebSocket.name = "WebSocket";
  $desc = $collectedClasses.WebSocket;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebSocket.prototype = $desc;
  WebSocket.prototype.get$url = function(receiver) {
    return receiver.url;
  };
  function WheelEvent() {
  }
  WheelEvent.builtin$cls = "WheelEvent";
  if (!"name" in WheelEvent)
    WheelEvent.name = "WheelEvent";
  $desc = $collectedClasses.WheelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WheelEvent.prototype = $desc;
  function Window() {
  }
  Window.builtin$cls = "Window";
  if (!"name" in Window)
    Window.name = "Window";
  $desc = $collectedClasses.Window;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Window.prototype = $desc;
  Window.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function _Attr() {
  }
  _Attr.builtin$cls = "_Attr";
  if (!"name" in _Attr)
    _Attr.name = "_Attr";
  $desc = $collectedClasses._Attr;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Attr.prototype = $desc;
  _Attr.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  _Attr.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function _ClientRect() {
  }
  _ClientRect.builtin$cls = "_ClientRect";
  if (!"name" in _ClientRect)
    _ClientRect.name = "_ClientRect";
  $desc = $collectedClasses._ClientRect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ClientRect.prototype = $desc;
  _ClientRect.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  _ClientRect.prototype.get$left = function(receiver) {
    return receiver.left;
  };
  _ClientRect.prototype.get$top = function(receiver) {
    return receiver.top;
  };
  _ClientRect.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function _Entity() {
  }
  _Entity.builtin$cls = "_Entity";
  if (!"name" in _Entity)
    _Entity.name = "_Entity";
  $desc = $collectedClasses._Entity;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Entity.prototype = $desc;
  function _HTMLAppletElement() {
  }
  _HTMLAppletElement.builtin$cls = "_HTMLAppletElement";
  if (!"name" in _HTMLAppletElement)
    _HTMLAppletElement.name = "_HTMLAppletElement";
  $desc = $collectedClasses._HTMLAppletElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLAppletElement.prototype = $desc;
  function _HTMLBaseFontElement() {
  }
  _HTMLBaseFontElement.builtin$cls = "_HTMLBaseFontElement";
  if (!"name" in _HTMLBaseFontElement)
    _HTMLBaseFontElement.name = "_HTMLBaseFontElement";
  $desc = $collectedClasses._HTMLBaseFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLBaseFontElement.prototype = $desc;
  function _HTMLDirectoryElement() {
  }
  _HTMLDirectoryElement.builtin$cls = "_HTMLDirectoryElement";
  if (!"name" in _HTMLDirectoryElement)
    _HTMLDirectoryElement.name = "_HTMLDirectoryElement";
  $desc = $collectedClasses._HTMLDirectoryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLDirectoryElement.prototype = $desc;
  function _HTMLFontElement() {
  }
  _HTMLFontElement.builtin$cls = "_HTMLFontElement";
  if (!"name" in _HTMLFontElement)
    _HTMLFontElement.name = "_HTMLFontElement";
  $desc = $collectedClasses._HTMLFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFontElement.prototype = $desc;
  function _HTMLFrameElement() {
  }
  _HTMLFrameElement.builtin$cls = "_HTMLFrameElement";
  if (!"name" in _HTMLFrameElement)
    _HTMLFrameElement.name = "_HTMLFrameElement";
  $desc = $collectedClasses._HTMLFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameElement.prototype = $desc;
  function _HTMLFrameSetElement() {
  }
  _HTMLFrameSetElement.builtin$cls = "_HTMLFrameSetElement";
  if (!"name" in _HTMLFrameSetElement)
    _HTMLFrameSetElement.name = "_HTMLFrameSetElement";
  $desc = $collectedClasses._HTMLFrameSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameSetElement.prototype = $desc;
  function _HTMLMarqueeElement() {
  }
  _HTMLMarqueeElement.builtin$cls = "_HTMLMarqueeElement";
  if (!"name" in _HTMLMarqueeElement)
    _HTMLMarqueeElement.name = "_HTMLMarqueeElement";
  $desc = $collectedClasses._HTMLMarqueeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLMarqueeElement.prototype = $desc;
  function _MutationEvent() {
  }
  _MutationEvent.builtin$cls = "_MutationEvent";
  if (!"name" in _MutationEvent)
    _MutationEvent.name = "_MutationEvent";
  $desc = $collectedClasses._MutationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MutationEvent.prototype = $desc;
  function _NamedNodeMap() {
  }
  _NamedNodeMap.builtin$cls = "_NamedNodeMap";
  if (!"name" in _NamedNodeMap)
    _NamedNodeMap.name = "_NamedNodeMap";
  $desc = $collectedClasses._NamedNodeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NamedNodeMap.prototype = $desc;
  function _Notation() {
  }
  _Notation.builtin$cls = "_Notation";
  if (!"name" in _Notation)
    _Notation.name = "_Notation";
  $desc = $collectedClasses._Notation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Notation.prototype = $desc;
  function _XMLHttpRequestProgressEvent() {
  }
  _XMLHttpRequestProgressEvent.builtin$cls = "_XMLHttpRequestProgressEvent";
  if (!"name" in _XMLHttpRequestProgressEvent)
    _XMLHttpRequestProgressEvent.name = "_XMLHttpRequestProgressEvent";
  $desc = $collectedClasses._XMLHttpRequestProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _XMLHttpRequestProgressEvent.prototype = $desc;
  function VersionChangeEvent() {
  }
  VersionChangeEvent.builtin$cls = "VersionChangeEvent";
  if (!"name" in VersionChangeEvent)
    VersionChangeEvent.name = "VersionChangeEvent";
  $desc = $collectedClasses.VersionChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VersionChangeEvent.prototype = $desc;
  function AElement() {
  }
  AElement.builtin$cls = "AElement";
  if (!"name" in AElement)
    AElement.name = "AElement";
  $desc = $collectedClasses.AElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AElement.prototype = $desc;
  AElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function AltGlyphElement() {
  }
  AltGlyphElement.builtin$cls = "AltGlyphElement";
  if (!"name" in AltGlyphElement)
    AltGlyphElement.name = "AltGlyphElement";
  $desc = $collectedClasses.AltGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AltGlyphElement.prototype = $desc;
  function AnimateElement() {
  }
  AnimateElement.builtin$cls = "AnimateElement";
  if (!"name" in AnimateElement)
    AnimateElement.name = "AnimateElement";
  $desc = $collectedClasses.AnimateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateElement.prototype = $desc;
  function AnimateMotionElement() {
  }
  AnimateMotionElement.builtin$cls = "AnimateMotionElement";
  if (!"name" in AnimateMotionElement)
    AnimateMotionElement.name = "AnimateMotionElement";
  $desc = $collectedClasses.AnimateMotionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateMotionElement.prototype = $desc;
  function AnimateTransformElement() {
  }
  AnimateTransformElement.builtin$cls = "AnimateTransformElement";
  if (!"name" in AnimateTransformElement)
    AnimateTransformElement.name = "AnimateTransformElement";
  $desc = $collectedClasses.AnimateTransformElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateTransformElement.prototype = $desc;
  function AnimatedEnumeration() {
  }
  AnimatedEnumeration.builtin$cls = "AnimatedEnumeration";
  if (!"name" in AnimatedEnumeration)
    AnimatedEnumeration.name = "AnimatedEnumeration";
  $desc = $collectedClasses.AnimatedEnumeration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedEnumeration.prototype = $desc;
  function AnimatedLength() {
  }
  AnimatedLength.builtin$cls = "AnimatedLength";
  if (!"name" in AnimatedLength)
    AnimatedLength.name = "AnimatedLength";
  $desc = $collectedClasses.AnimatedLength;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLength.prototype = $desc;
  function AnimatedLengthList() {
  }
  AnimatedLengthList.builtin$cls = "AnimatedLengthList";
  if (!"name" in AnimatedLengthList)
    AnimatedLengthList.name = "AnimatedLengthList";
  $desc = $collectedClasses.AnimatedLengthList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLengthList.prototype = $desc;
  function AnimatedNumber() {
  }
  AnimatedNumber.builtin$cls = "AnimatedNumber";
  if (!"name" in AnimatedNumber)
    AnimatedNumber.name = "AnimatedNumber";
  $desc = $collectedClasses.AnimatedNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumber.prototype = $desc;
  function AnimatedNumberList() {
  }
  AnimatedNumberList.builtin$cls = "AnimatedNumberList";
  if (!"name" in AnimatedNumberList)
    AnimatedNumberList.name = "AnimatedNumberList";
  $desc = $collectedClasses.AnimatedNumberList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumberList.prototype = $desc;
  function AnimatedString() {
  }
  AnimatedString.builtin$cls = "AnimatedString";
  if (!"name" in AnimatedString)
    AnimatedString.name = "AnimatedString";
  $desc = $collectedClasses.AnimatedString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedString.prototype = $desc;
  function AnimationElement() {
  }
  AnimationElement.builtin$cls = "AnimationElement";
  if (!"name" in AnimationElement)
    AnimationElement.name = "AnimationElement";
  $desc = $collectedClasses.AnimationElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationElement.prototype = $desc;
  function CircleElement() {
  }
  CircleElement.builtin$cls = "CircleElement";
  if (!"name" in CircleElement)
    CircleElement.name = "CircleElement";
  $desc = $collectedClasses.CircleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CircleElement.prototype = $desc;
  function ClipPathElement() {
  }
  ClipPathElement.builtin$cls = "ClipPathElement";
  if (!"name" in ClipPathElement)
    ClipPathElement.name = "ClipPathElement";
  $desc = $collectedClasses.ClipPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClipPathElement.prototype = $desc;
  function DefsElement() {
  }
  DefsElement.builtin$cls = "DefsElement";
  if (!"name" in DefsElement)
    DefsElement.name = "DefsElement";
  $desc = $collectedClasses.DefsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DefsElement.prototype = $desc;
  function DescElement() {
  }
  DescElement.builtin$cls = "DescElement";
  if (!"name" in DescElement)
    DescElement.name = "DescElement";
  $desc = $collectedClasses.DescElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DescElement.prototype = $desc;
  function EllipseElement() {
  }
  EllipseElement.builtin$cls = "EllipseElement";
  if (!"name" in EllipseElement)
    EllipseElement.name = "EllipseElement";
  $desc = $collectedClasses.EllipseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EllipseElement.prototype = $desc;
  function FEBlendElement() {
  }
  FEBlendElement.builtin$cls = "FEBlendElement";
  if (!"name" in FEBlendElement)
    FEBlendElement.name = "FEBlendElement";
  $desc = $collectedClasses.FEBlendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEBlendElement.prototype = $desc;
  FEBlendElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEBlendElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEBlendElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEBlendElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEColorMatrixElement() {
  }
  FEColorMatrixElement.builtin$cls = "FEColorMatrixElement";
  if (!"name" in FEColorMatrixElement)
    FEColorMatrixElement.name = "FEColorMatrixElement";
  $desc = $collectedClasses.FEColorMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEColorMatrixElement.prototype = $desc;
  FEColorMatrixElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  FEColorMatrixElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEColorMatrixElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEColorMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEColorMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEComponentTransferElement() {
  }
  FEComponentTransferElement.builtin$cls = "FEComponentTransferElement";
  if (!"name" in FEComponentTransferElement)
    FEComponentTransferElement.name = "FEComponentTransferElement";
  $desc = $collectedClasses.FEComponentTransferElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEComponentTransferElement.prototype = $desc;
  FEComponentTransferElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEComponentTransferElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEComponentTransferElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEComponentTransferElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FECompositeElement() {
  }
  FECompositeElement.builtin$cls = "FECompositeElement";
  if (!"name" in FECompositeElement)
    FECompositeElement.name = "FECompositeElement";
  $desc = $collectedClasses.FECompositeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FECompositeElement.prototype = $desc;
  FECompositeElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FECompositeElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FECompositeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FECompositeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEConvolveMatrixElement() {
  }
  FEConvolveMatrixElement.builtin$cls = "FEConvolveMatrixElement";
  if (!"name" in FEConvolveMatrixElement)
    FEConvolveMatrixElement.name = "FEConvolveMatrixElement";
  $desc = $collectedClasses.FEConvolveMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEConvolveMatrixElement.prototype = $desc;
  FEConvolveMatrixElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEConvolveMatrixElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEConvolveMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEConvolveMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDiffuseLightingElement() {
  }
  FEDiffuseLightingElement.builtin$cls = "FEDiffuseLightingElement";
  if (!"name" in FEDiffuseLightingElement)
    FEDiffuseLightingElement.name = "FEDiffuseLightingElement";
  $desc = $collectedClasses.FEDiffuseLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDiffuseLightingElement.prototype = $desc;
  FEDiffuseLightingElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEDiffuseLightingElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEDiffuseLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDiffuseLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDisplacementMapElement() {
  }
  FEDisplacementMapElement.builtin$cls = "FEDisplacementMapElement";
  if (!"name" in FEDisplacementMapElement)
    FEDisplacementMapElement.name = "FEDisplacementMapElement";
  $desc = $collectedClasses.FEDisplacementMapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDisplacementMapElement.prototype = $desc;
  FEDisplacementMapElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEDisplacementMapElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEDisplacementMapElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDisplacementMapElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDistantLightElement() {
  }
  FEDistantLightElement.builtin$cls = "FEDistantLightElement";
  if (!"name" in FEDistantLightElement)
    FEDistantLightElement.name = "FEDistantLightElement";
  $desc = $collectedClasses.FEDistantLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDistantLightElement.prototype = $desc;
  function FEFloodElement() {
  }
  FEFloodElement.builtin$cls = "FEFloodElement";
  if (!"name" in FEFloodElement)
    FEFloodElement.name = "FEFloodElement";
  $desc = $collectedClasses.FEFloodElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFloodElement.prototype = $desc;
  FEFloodElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEFloodElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEFloodElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEFloodElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEFuncAElement() {
  }
  FEFuncAElement.builtin$cls = "FEFuncAElement";
  if (!"name" in FEFuncAElement)
    FEFuncAElement.name = "FEFuncAElement";
  $desc = $collectedClasses.FEFuncAElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncAElement.prototype = $desc;
  function FEFuncBElement() {
  }
  FEFuncBElement.builtin$cls = "FEFuncBElement";
  if (!"name" in FEFuncBElement)
    FEFuncBElement.name = "FEFuncBElement";
  $desc = $collectedClasses.FEFuncBElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncBElement.prototype = $desc;
  function FEFuncGElement() {
  }
  FEFuncGElement.builtin$cls = "FEFuncGElement";
  if (!"name" in FEFuncGElement)
    FEFuncGElement.name = "FEFuncGElement";
  $desc = $collectedClasses.FEFuncGElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncGElement.prototype = $desc;
  function FEFuncRElement() {
  }
  FEFuncRElement.builtin$cls = "FEFuncRElement";
  if (!"name" in FEFuncRElement)
    FEFuncRElement.name = "FEFuncRElement";
  $desc = $collectedClasses.FEFuncRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncRElement.prototype = $desc;
  function FEGaussianBlurElement() {
  }
  FEGaussianBlurElement.builtin$cls = "FEGaussianBlurElement";
  if (!"name" in FEGaussianBlurElement)
    FEGaussianBlurElement.name = "FEGaussianBlurElement";
  $desc = $collectedClasses.FEGaussianBlurElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEGaussianBlurElement.prototype = $desc;
  FEGaussianBlurElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEGaussianBlurElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEGaussianBlurElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEGaussianBlurElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEImageElement() {
  }
  FEImageElement.builtin$cls = "FEImageElement";
  if (!"name" in FEImageElement)
    FEImageElement.name = "FEImageElement";
  $desc = $collectedClasses.FEImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEImageElement.prototype = $desc;
  FEImageElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEImageElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEImageElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEImageElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeElement() {
  }
  FEMergeElement.builtin$cls = "FEMergeElement";
  if (!"name" in FEMergeElement)
    FEMergeElement.name = "FEMergeElement";
  $desc = $collectedClasses.FEMergeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeElement.prototype = $desc;
  FEMergeElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEMergeElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEMergeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMergeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeNodeElement() {
  }
  FEMergeNodeElement.builtin$cls = "FEMergeNodeElement";
  if (!"name" in FEMergeNodeElement)
    FEMergeNodeElement.name = "FEMergeNodeElement";
  $desc = $collectedClasses.FEMergeNodeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeNodeElement.prototype = $desc;
  function FEMorphologyElement() {
  }
  FEMorphologyElement.builtin$cls = "FEMorphologyElement";
  if (!"name" in FEMorphologyElement)
    FEMorphologyElement.name = "FEMorphologyElement";
  $desc = $collectedClasses.FEMorphologyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMorphologyElement.prototype = $desc;
  FEMorphologyElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEMorphologyElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEMorphologyElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMorphologyElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEOffsetElement() {
  }
  FEOffsetElement.builtin$cls = "FEOffsetElement";
  if (!"name" in FEOffsetElement)
    FEOffsetElement.name = "FEOffsetElement";
  $desc = $collectedClasses.FEOffsetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEOffsetElement.prototype = $desc;
  FEOffsetElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEOffsetElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEOffsetElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEOffsetElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEPointLightElement() {
  }
  FEPointLightElement.builtin$cls = "FEPointLightElement";
  if (!"name" in FEPointLightElement)
    FEPointLightElement.name = "FEPointLightElement";
  $desc = $collectedClasses.FEPointLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEPointLightElement.prototype = $desc;
  FEPointLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEPointLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpecularLightingElement() {
  }
  FESpecularLightingElement.builtin$cls = "FESpecularLightingElement";
  if (!"name" in FESpecularLightingElement)
    FESpecularLightingElement.name = "FESpecularLightingElement";
  $desc = $collectedClasses.FESpecularLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpecularLightingElement.prototype = $desc;
  FESpecularLightingElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FESpecularLightingElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FESpecularLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpecularLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpotLightElement() {
  }
  FESpotLightElement.builtin$cls = "FESpotLightElement";
  if (!"name" in FESpotLightElement)
    FESpotLightElement.name = "FESpotLightElement";
  $desc = $collectedClasses.FESpotLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpotLightElement.prototype = $desc;
  FESpotLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpotLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETileElement() {
  }
  FETileElement.builtin$cls = "FETileElement";
  if (!"name" in FETileElement)
    FETileElement.name = "FETileElement";
  $desc = $collectedClasses.FETileElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETileElement.prototype = $desc;
  FETileElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FETileElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FETileElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETileElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETurbulenceElement() {
  }
  FETurbulenceElement.builtin$cls = "FETurbulenceElement";
  if (!"name" in FETurbulenceElement)
    FETurbulenceElement.name = "FETurbulenceElement";
  $desc = $collectedClasses.FETurbulenceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETurbulenceElement.prototype = $desc;
  FETurbulenceElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  FETurbulenceElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FETurbulenceElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FETurbulenceElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETurbulenceElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FilterElement() {
  }
  FilterElement.builtin$cls = "FilterElement";
  if (!"name" in FilterElement)
    FilterElement.name = "FilterElement";
  $desc = $collectedClasses.FilterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilterElement.prototype = $desc;
  FilterElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FilterElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FilterElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FilterElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ForeignObjectElement() {
  }
  ForeignObjectElement.builtin$cls = "ForeignObjectElement";
  if (!"name" in ForeignObjectElement)
    ForeignObjectElement.name = "ForeignObjectElement";
  $desc = $collectedClasses.ForeignObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ForeignObjectElement.prototype = $desc;
  ForeignObjectElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ForeignObjectElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ForeignObjectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ForeignObjectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function GElement() {
  }
  GElement.builtin$cls = "GElement";
  if (!"name" in GElement)
    GElement.name = "GElement";
  $desc = $collectedClasses.GElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GElement.prototype = $desc;
  function GraphicsElement() {
  }
  GraphicsElement.builtin$cls = "GraphicsElement";
  if (!"name" in GraphicsElement)
    GraphicsElement.name = "GraphicsElement";
  $desc = $collectedClasses.GraphicsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GraphicsElement.prototype = $desc;
  function ImageElement0() {
  }
  ImageElement0.builtin$cls = "ImageElement0";
  if (!"name" in ImageElement0)
    ImageElement0.name = "ImageElement0";
  $desc = $collectedClasses.ImageElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement0.prototype = $desc;
  ImageElement0.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ImageElement0.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ImageElement0.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ImageElement0.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function LineElement() {
  }
  LineElement.builtin$cls = "LineElement";
  if (!"name" in LineElement)
    LineElement.name = "LineElement";
  $desc = $collectedClasses.LineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LineElement.prototype = $desc;
  function LinearGradientElement() {
  }
  LinearGradientElement.builtin$cls = "LinearGradientElement";
  if (!"name" in LinearGradientElement)
    LinearGradientElement.name = "LinearGradientElement";
  $desc = $collectedClasses.LinearGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinearGradientElement.prototype = $desc;
  function MarkerElement() {
  }
  MarkerElement.builtin$cls = "MarkerElement";
  if (!"name" in MarkerElement)
    MarkerElement.name = "MarkerElement";
  $desc = $collectedClasses.MarkerElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MarkerElement.prototype = $desc;
  function MaskElement() {
  }
  MaskElement.builtin$cls = "MaskElement";
  if (!"name" in MaskElement)
    MaskElement.name = "MaskElement";
  $desc = $collectedClasses.MaskElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MaskElement.prototype = $desc;
  MaskElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  MaskElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  MaskElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  MaskElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function MetadataElement() {
  }
  MetadataElement.builtin$cls = "MetadataElement";
  if (!"name" in MetadataElement)
    MetadataElement.name = "MetadataElement";
  $desc = $collectedClasses.MetadataElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetadataElement.prototype = $desc;
  function PathElement() {
  }
  PathElement.builtin$cls = "PathElement";
  if (!"name" in PathElement)
    PathElement.name = "PathElement";
  $desc = $collectedClasses.PathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathElement.prototype = $desc;
  function PatternElement() {
  }
  PatternElement.builtin$cls = "PatternElement";
  if (!"name" in PatternElement)
    PatternElement.name = "PatternElement";
  $desc = $collectedClasses.PatternElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PatternElement.prototype = $desc;
  PatternElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  PatternElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  PatternElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PatternElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PolygonElement() {
  }
  PolygonElement.builtin$cls = "PolygonElement";
  if (!"name" in PolygonElement)
    PolygonElement.name = "PolygonElement";
  $desc = $collectedClasses.PolygonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonElement.prototype = $desc;
  function PolylineElement() {
  }
  PolylineElement.builtin$cls = "PolylineElement";
  if (!"name" in PolylineElement)
    PolylineElement.name = "PolylineElement";
  $desc = $collectedClasses.PolylineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolylineElement.prototype = $desc;
  function RadialGradientElement() {
  }
  RadialGradientElement.builtin$cls = "RadialGradientElement";
  if (!"name" in RadialGradientElement)
    RadialGradientElement.name = "RadialGradientElement";
  $desc = $collectedClasses.RadialGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RadialGradientElement.prototype = $desc;
  function RectElement() {
  }
  RectElement.builtin$cls = "RectElement";
  if (!"name" in RectElement)
    RectElement.name = "RectElement";
  $desc = $collectedClasses.RectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RectElement.prototype = $desc;
  RectElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  RectElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  RectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  RectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ScriptElement() {
  }
  ScriptElement.builtin$cls = "ScriptElement";
  if (!"name" in ScriptElement)
    ScriptElement.name = "ScriptElement";
  $desc = $collectedClasses.ScriptElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement.prototype = $desc;
  ScriptElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ScriptElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SetElement() {
  }
  SetElement.builtin$cls = "SetElement";
  if (!"name" in SetElement)
    SetElement.name = "SetElement";
  $desc = $collectedClasses.SetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SetElement.prototype = $desc;
  function StopElement() {
  }
  StopElement.builtin$cls = "StopElement";
  if (!"name" in StopElement)
    StopElement.name = "StopElement";
  $desc = $collectedClasses.StopElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StopElement.prototype = $desc;
  function StyleElement0() {
  }
  StyleElement0.builtin$cls = "StyleElement0";
  if (!"name" in StyleElement0)
    StyleElement0.name = "StyleElement0";
  $desc = $collectedClasses.StyleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement0.prototype = $desc;
  StyleElement0.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  StyleElement0.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SvgDocument() {
  }
  SvgDocument.builtin$cls = "SvgDocument";
  if (!"name" in SvgDocument)
    SvgDocument.name = "SvgDocument";
  $desc = $collectedClasses.SvgDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgDocument.prototype = $desc;
  function SvgElement() {
  }
  SvgElement.builtin$cls = "SvgElement";
  if (!"name" in SvgElement)
    SvgElement.name = "SvgElement";
  $desc = $collectedClasses.SvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgElement.prototype = $desc;
  function SvgSvgElement() {
  }
  SvgSvgElement.builtin$cls = "SvgSvgElement";
  if (!"name" in SvgSvgElement)
    SvgSvgElement.name = "SvgSvgElement";
  $desc = $collectedClasses.SvgSvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgSvgElement.prototype = $desc;
  SvgSvgElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  SvgSvgElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  SvgSvgElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  SvgSvgElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function SwitchElement() {
  }
  SwitchElement.builtin$cls = "SwitchElement";
  if (!"name" in SwitchElement)
    SwitchElement.name = "SwitchElement";
  $desc = $collectedClasses.SwitchElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SwitchElement.prototype = $desc;
  function SymbolElement() {
  }
  SymbolElement.builtin$cls = "SymbolElement";
  if (!"name" in SymbolElement)
    SymbolElement.name = "SymbolElement";
  $desc = $collectedClasses.SymbolElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SymbolElement.prototype = $desc;
  function TSpanElement() {
  }
  TSpanElement.builtin$cls = "TSpanElement";
  if (!"name" in TSpanElement)
    TSpanElement.name = "TSpanElement";
  $desc = $collectedClasses.TSpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TSpanElement.prototype = $desc;
  function TextContentElement() {
  }
  TextContentElement.builtin$cls = "TextContentElement";
  if (!"name" in TextContentElement)
    TextContentElement.name = "TextContentElement";
  $desc = $collectedClasses.TextContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextContentElement.prototype = $desc;
  function TextElement() {
  }
  TextElement.builtin$cls = "TextElement";
  if (!"name" in TextElement)
    TextElement.name = "TextElement";
  $desc = $collectedClasses.TextElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextElement.prototype = $desc;
  function TextPathElement() {
  }
  TextPathElement.builtin$cls = "TextPathElement";
  if (!"name" in TextPathElement)
    TextPathElement.name = "TextPathElement";
  $desc = $collectedClasses.TextPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPathElement.prototype = $desc;
  function TextPositioningElement() {
  }
  TextPositioningElement.builtin$cls = "TextPositioningElement";
  if (!"name" in TextPositioningElement)
    TextPositioningElement.name = "TextPositioningElement";
  $desc = $collectedClasses.TextPositioningElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPositioningElement.prototype = $desc;
  TextPositioningElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  TextPositioningElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function TitleElement0() {
  }
  TitleElement0.builtin$cls = "TitleElement0";
  if (!"name" in TitleElement0)
    TitleElement0.name = "TitleElement0";
  $desc = $collectedClasses.TitleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement0.prototype = $desc;
  function UseElement() {
  }
  UseElement.builtin$cls = "UseElement";
  if (!"name" in UseElement)
    UseElement.name = "UseElement";
  $desc = $collectedClasses.UseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UseElement.prototype = $desc;
  UseElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  UseElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  UseElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  UseElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ViewElement() {
  }
  ViewElement.builtin$cls = "ViewElement";
  if (!"name" in ViewElement)
    ViewElement.name = "ViewElement";
  $desc = $collectedClasses.ViewElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ViewElement.prototype = $desc;
  function ZoomEvent() {
  }
  ZoomEvent.builtin$cls = "ZoomEvent";
  if (!"name" in ZoomEvent)
    ZoomEvent.name = "ZoomEvent";
  $desc = $collectedClasses.ZoomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoomEvent.prototype = $desc;
  function _GradientElement() {
  }
  _GradientElement.builtin$cls = "_GradientElement";
  if (!"name" in _GradientElement)
    _GradientElement.name = "_GradientElement";
  $desc = $collectedClasses._GradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GradientElement.prototype = $desc;
  function _SVGAltGlyphDefElement() {
  }
  _SVGAltGlyphDefElement.builtin$cls = "_SVGAltGlyphDefElement";
  if (!"name" in _SVGAltGlyphDefElement)
    _SVGAltGlyphDefElement.name = "_SVGAltGlyphDefElement";
  $desc = $collectedClasses._SVGAltGlyphDefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphDefElement.prototype = $desc;
  function _SVGAltGlyphItemElement() {
  }
  _SVGAltGlyphItemElement.builtin$cls = "_SVGAltGlyphItemElement";
  if (!"name" in _SVGAltGlyphItemElement)
    _SVGAltGlyphItemElement.name = "_SVGAltGlyphItemElement";
  $desc = $collectedClasses._SVGAltGlyphItemElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphItemElement.prototype = $desc;
  function _SVGAnimateColorElement() {
  }
  _SVGAnimateColorElement.builtin$cls = "_SVGAnimateColorElement";
  if (!"name" in _SVGAnimateColorElement)
    _SVGAnimateColorElement.name = "_SVGAnimateColorElement";
  $desc = $collectedClasses._SVGAnimateColorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAnimateColorElement.prototype = $desc;
  function _SVGComponentTransferFunctionElement() {
  }
  _SVGComponentTransferFunctionElement.builtin$cls = "_SVGComponentTransferFunctionElement";
  if (!"name" in _SVGComponentTransferFunctionElement)
    _SVGComponentTransferFunctionElement.name = "_SVGComponentTransferFunctionElement";
  $desc = $collectedClasses._SVGComponentTransferFunctionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGComponentTransferFunctionElement.prototype = $desc;
  function _SVGCursorElement() {
  }
  _SVGCursorElement.builtin$cls = "_SVGCursorElement";
  if (!"name" in _SVGCursorElement)
    _SVGCursorElement.name = "_SVGCursorElement";
  $desc = $collectedClasses._SVGCursorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGCursorElement.prototype = $desc;
  function _SVGFEDropShadowElement() {
  }
  _SVGFEDropShadowElement.builtin$cls = "_SVGFEDropShadowElement";
  if (!"name" in _SVGFEDropShadowElement)
    _SVGFEDropShadowElement.name = "_SVGFEDropShadowElement";
  $desc = $collectedClasses._SVGFEDropShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFEDropShadowElement.prototype = $desc;
  function _SVGFontElement() {
  }
  _SVGFontElement.builtin$cls = "_SVGFontElement";
  if (!"name" in _SVGFontElement)
    _SVGFontElement.name = "_SVGFontElement";
  $desc = $collectedClasses._SVGFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontElement.prototype = $desc;
  function _SVGFontFaceElement() {
  }
  _SVGFontFaceElement.builtin$cls = "_SVGFontFaceElement";
  if (!"name" in _SVGFontFaceElement)
    _SVGFontFaceElement.name = "_SVGFontFaceElement";
  $desc = $collectedClasses._SVGFontFaceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceElement.prototype = $desc;
  function _SVGFontFaceFormatElement() {
  }
  _SVGFontFaceFormatElement.builtin$cls = "_SVGFontFaceFormatElement";
  if (!"name" in _SVGFontFaceFormatElement)
    _SVGFontFaceFormatElement.name = "_SVGFontFaceFormatElement";
  $desc = $collectedClasses._SVGFontFaceFormatElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceFormatElement.prototype = $desc;
  function _SVGFontFaceNameElement() {
  }
  _SVGFontFaceNameElement.builtin$cls = "_SVGFontFaceNameElement";
  if (!"name" in _SVGFontFaceNameElement)
    _SVGFontFaceNameElement.name = "_SVGFontFaceNameElement";
  $desc = $collectedClasses._SVGFontFaceNameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceNameElement.prototype = $desc;
  function _SVGFontFaceSrcElement() {
  }
  _SVGFontFaceSrcElement.builtin$cls = "_SVGFontFaceSrcElement";
  if (!"name" in _SVGFontFaceSrcElement)
    _SVGFontFaceSrcElement.name = "_SVGFontFaceSrcElement";
  $desc = $collectedClasses._SVGFontFaceSrcElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceSrcElement.prototype = $desc;
  function _SVGFontFaceUriElement() {
  }
  _SVGFontFaceUriElement.builtin$cls = "_SVGFontFaceUriElement";
  if (!"name" in _SVGFontFaceUriElement)
    _SVGFontFaceUriElement.name = "_SVGFontFaceUriElement";
  $desc = $collectedClasses._SVGFontFaceUriElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceUriElement.prototype = $desc;
  function _SVGGlyphElement() {
  }
  _SVGGlyphElement.builtin$cls = "_SVGGlyphElement";
  if (!"name" in _SVGGlyphElement)
    _SVGGlyphElement.name = "_SVGGlyphElement";
  $desc = $collectedClasses._SVGGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphElement.prototype = $desc;
  function _SVGGlyphRefElement() {
  }
  _SVGGlyphRefElement.builtin$cls = "_SVGGlyphRefElement";
  if (!"name" in _SVGGlyphRefElement)
    _SVGGlyphRefElement.name = "_SVGGlyphRefElement";
  $desc = $collectedClasses._SVGGlyphRefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphRefElement.prototype = $desc;
  function _SVGHKernElement() {
  }
  _SVGHKernElement.builtin$cls = "_SVGHKernElement";
  if (!"name" in _SVGHKernElement)
    _SVGHKernElement.name = "_SVGHKernElement";
  $desc = $collectedClasses._SVGHKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGHKernElement.prototype = $desc;
  function _SVGMPathElement() {
  }
  _SVGMPathElement.builtin$cls = "_SVGMPathElement";
  if (!"name" in _SVGMPathElement)
    _SVGMPathElement.name = "_SVGMPathElement";
  $desc = $collectedClasses._SVGMPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMPathElement.prototype = $desc;
  function _SVGMissingGlyphElement() {
  }
  _SVGMissingGlyphElement.builtin$cls = "_SVGMissingGlyphElement";
  if (!"name" in _SVGMissingGlyphElement)
    _SVGMissingGlyphElement.name = "_SVGMissingGlyphElement";
  $desc = $collectedClasses._SVGMissingGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMissingGlyphElement.prototype = $desc;
  function _SVGVKernElement() {
  }
  _SVGVKernElement.builtin$cls = "_SVGVKernElement";
  if (!"name" in _SVGVKernElement)
    _SVGVKernElement.name = "_SVGVKernElement";
  $desc = $collectedClasses._SVGVKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGVKernElement.prototype = $desc;
  function AudioProcessingEvent() {
  }
  AudioProcessingEvent.builtin$cls = "AudioProcessingEvent";
  if (!"name" in AudioProcessingEvent)
    AudioProcessingEvent.name = "AudioProcessingEvent";
  $desc = $collectedClasses.AudioProcessingEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioProcessingEvent.prototype = $desc;
  function OfflineAudioCompletionEvent() {
  }
  OfflineAudioCompletionEvent.builtin$cls = "OfflineAudioCompletionEvent";
  if (!"name" in OfflineAudioCompletionEvent)
    OfflineAudioCompletionEvent.name = "OfflineAudioCompletionEvent";
  $desc = $collectedClasses.OfflineAudioCompletionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OfflineAudioCompletionEvent.prototype = $desc;
  function ContextEvent() {
  }
  ContextEvent.builtin$cls = "ContextEvent";
  if (!"name" in ContextEvent)
    ContextEvent.name = "ContextEvent";
  $desc = $collectedClasses.ContextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContextEvent.prototype = $desc;
  function SqlError() {
  }
  SqlError.builtin$cls = "SqlError";
  if (!"name" in SqlError)
    SqlError.name = "SqlError";
  $desc = $collectedClasses.SqlError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SqlError.prototype = $desc;
  SqlError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function ByteBuffer() {
  }
  ByteBuffer.builtin$cls = "ByteBuffer";
  if (!"name" in ByteBuffer)
    ByteBuffer.name = "ByteBuffer";
  $desc = $collectedClasses.ByteBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ByteBuffer.prototype = $desc;
  function TypedData() {
  }
  TypedData.builtin$cls = "TypedData";
  if (!"name" in TypedData)
    TypedData.name = "TypedData";
  $desc = $collectedClasses.TypedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData.prototype = $desc;
  function ByteData() {
  }
  ByteData.builtin$cls = "ByteData";
  if (!"name" in ByteData)
    ByteData.name = "ByteData";
  $desc = $collectedClasses.ByteData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ByteData.prototype = $desc;
  function Float32List() {
  }
  Float32List.builtin$cls = "Float32List";
  if (!"name" in Float32List)
    Float32List.name = "Float32List";
  $desc = $collectedClasses.Float32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Float32List.prototype = $desc;
  function Float64List() {
  }
  Float64List.builtin$cls = "Float64List";
  if (!"name" in Float64List)
    Float64List.name = "Float64List";
  $desc = $collectedClasses.Float64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Float64List.prototype = $desc;
  function Int16List() {
  }
  Int16List.builtin$cls = "Int16List";
  if (!"name" in Int16List)
    Int16List.name = "Int16List";
  $desc = $collectedClasses.Int16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int16List.prototype = $desc;
  function Int32List() {
  }
  Int32List.builtin$cls = "Int32List";
  if (!"name" in Int32List)
    Int32List.name = "Int32List";
  $desc = $collectedClasses.Int32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int32List.prototype = $desc;
  function Int8List() {
  }
  Int8List.builtin$cls = "Int8List";
  if (!"name" in Int8List)
    Int8List.name = "Int8List";
  $desc = $collectedClasses.Int8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int8List.prototype = $desc;
  function Uint16List() {
  }
  Uint16List.builtin$cls = "Uint16List";
  if (!"name" in Uint16List)
    Uint16List.name = "Uint16List";
  $desc = $collectedClasses.Uint16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint16List.prototype = $desc;
  function Uint32List() {
  }
  Uint32List.builtin$cls = "Uint32List";
  if (!"name" in Uint32List)
    Uint32List.name = "Uint32List";
  $desc = $collectedClasses.Uint32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint32List.prototype = $desc;
  function Uint8ClampedList() {
  }
  Uint8ClampedList.builtin$cls = "Uint8ClampedList";
  if (!"name" in Uint8ClampedList)
    Uint8ClampedList.name = "Uint8ClampedList";
  $desc = $collectedClasses.Uint8ClampedList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint8ClampedList.prototype = $desc;
  function Uint8List() {
  }
  Uint8List.builtin$cls = "Uint8List";
  if (!"name" in Uint8List)
    Uint8List.name = "Uint8List";
  $desc = $collectedClasses.Uint8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint8List.prototype = $desc;
  function JS_CONST(code) {
    this.code = code;
  }
  JS_CONST.builtin$cls = "JS_CONST";
  if (!"name" in JS_CONST)
    JS_CONST.name = "JS_CONST";
  $desc = $collectedClasses.JS_CONST;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JS_CONST.prototype = $desc;
  function Interceptor() {
  }
  Interceptor.builtin$cls = "Interceptor";
  if (!"name" in Interceptor)
    Interceptor.name = "Interceptor";
  $desc = $collectedClasses.Interceptor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor.prototype = $desc;
  function JSBool() {
  }
  JSBool.builtin$cls = "bool";
  if (!"name" in JSBool)
    JSBool.name = "JSBool";
  $desc = $collectedClasses.JSBool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSBool.prototype = $desc;
  function JSNull() {
  }
  JSNull.builtin$cls = "JSNull";
  if (!"name" in JSNull)
    JSNull.name = "JSNull";
  $desc = $collectedClasses.JSNull;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNull.prototype = $desc;
  function JavaScriptObject() {
  }
  JavaScriptObject.builtin$cls = "JavaScriptObject";
  if (!"name" in JavaScriptObject)
    JavaScriptObject.name = "JavaScriptObject";
  $desc = $collectedClasses.JavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JavaScriptObject.prototype = $desc;
  function PlainJavaScriptObject() {
  }
  PlainJavaScriptObject.builtin$cls = "PlainJavaScriptObject";
  if (!"name" in PlainJavaScriptObject)
    PlainJavaScriptObject.name = "PlainJavaScriptObject";
  $desc = $collectedClasses.PlainJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PlainJavaScriptObject.prototype = $desc;
  function UnknownJavaScriptObject() {
  }
  UnknownJavaScriptObject.builtin$cls = "UnknownJavaScriptObject";
  if (!"name" in UnknownJavaScriptObject)
    UnknownJavaScriptObject.name = "UnknownJavaScriptObject";
  $desc = $collectedClasses.UnknownJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJavaScriptObject.prototype = $desc;
  function JSArray() {
  }
  JSArray.builtin$cls = "List";
  if (!"name" in JSArray)
    JSArray.name = "JSArray";
  $desc = $collectedClasses.JSArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSArray.prototype = $desc;
  function JSMutableArray() {
  }
  JSMutableArray.builtin$cls = "JSMutableArray";
  if (!"name" in JSMutableArray)
    JSMutableArray.name = "JSMutableArray";
  $desc = $collectedClasses.JSMutableArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSMutableArray.prototype = $desc;
  function JSFixedArray() {
  }
  JSFixedArray.builtin$cls = "JSFixedArray";
  if (!"name" in JSFixedArray)
    JSFixedArray.name = "JSFixedArray";
  $desc = $collectedClasses.JSFixedArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSFixedArray.prototype = $desc;
  function JSExtendableArray() {
  }
  JSExtendableArray.builtin$cls = "JSExtendableArray";
  if (!"name" in JSExtendableArray)
    JSExtendableArray.name = "JSExtendableArray";
  $desc = $collectedClasses.JSExtendableArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSExtendableArray.prototype = $desc;
  function JSNumber() {
  }
  JSNumber.builtin$cls = "num";
  if (!"name" in JSNumber)
    JSNumber.name = "JSNumber";
  $desc = $collectedClasses.JSNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNumber.prototype = $desc;
  function JSInt() {
  }
  JSInt.builtin$cls = "int";
  if (!"name" in JSInt)
    JSInt.name = "JSInt";
  $desc = $collectedClasses.JSInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInt.prototype = $desc;
  function JSDouble() {
  }
  JSDouble.builtin$cls = "double";
  if (!"name" in JSDouble)
    JSDouble.name = "JSDouble";
  $desc = $collectedClasses.JSDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSDouble.prototype = $desc;
  function JSString() {
  }
  JSString.builtin$cls = "String";
  if (!"name" in JSString)
    JSString.name = "JSString";
  $desc = $collectedClasses.JSString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSString.prototype = $desc;
  function _CodeUnits(__interceptors$_string) {
    this.__interceptors$_string = __interceptors$_string;
  }
  _CodeUnits.builtin$cls = "_CodeUnits";
  if (!"name" in _CodeUnits)
    _CodeUnits.name = "_CodeUnits";
  $desc = $collectedClasses._CodeUnits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CodeUnits.prototype = $desc;
  function startRootIsolate_closure(entry_0) {
    this.entry_0 = entry_0;
  }
  startRootIsolate_closure.builtin$cls = "startRootIsolate_closure";
  if (!"name" in startRootIsolate_closure)
    startRootIsolate_closure.name = "startRootIsolate_closure";
  $desc = $collectedClasses.startRootIsolate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure.prototype = $desc;
  function startRootIsolate_closure0(entry_1) {
    this.entry_1 = entry_1;
  }
  startRootIsolate_closure0.builtin$cls = "startRootIsolate_closure0";
  if (!"name" in startRootIsolate_closure0)
    startRootIsolate_closure0.name = "startRootIsolate_closure0";
  $desc = $collectedClasses.startRootIsolate_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure0.prototype = $desc;
  function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers, entry) {
    this.nextIsolateId = nextIsolateId;
    this.currentManagerId = currentManagerId;
    this.nextManagerId = nextManagerId;
    this.currentContext = currentContext;
    this.rootContext = rootContext;
    this.topEventLoop = topEventLoop;
    this.fromCommandLine = fromCommandLine;
    this.isWorker = isWorker;
    this.supportsWorkers = supportsWorkers;
    this.isolates = isolates;
    this.mainManager = mainManager;
    this.managers = managers;
    this.entry = entry;
  }
  _Manager.builtin$cls = "_Manager";
  if (!"name" in _Manager)
    _Manager.name = "_Manager";
  $desc = $collectedClasses._Manager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Manager.prototype = $desc;
  function _IsolateContext(id, ports, isolateStatics) {
    this.id = id;
    this.ports = ports;
    this.isolateStatics = isolateStatics;
  }
  _IsolateContext.builtin$cls = "_IsolateContext";
  if (!"name" in _IsolateContext)
    _IsolateContext.name = "_IsolateContext";
  $desc = $collectedClasses._IsolateContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateContext.prototype = $desc;
  _IsolateContext.prototype.get$id = function(receiver) {
    return this.id;
  };
  _IsolateContext.prototype.get$isolateStatics = function() {
    return this.isolateStatics;
  };
  function _EventLoop(events, activeTimerCount) {
    this.events = events;
    this.activeTimerCount = activeTimerCount;
  }
  _EventLoop.builtin$cls = "_EventLoop";
  if (!"name" in _EventLoop)
    _EventLoop.name = "_EventLoop";
  $desc = $collectedClasses._EventLoop;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop.prototype = $desc;
  function _EventLoop__runHelper_next(this_0) {
    this.this_0 = this_0;
  }
  _EventLoop__runHelper_next.builtin$cls = "_EventLoop__runHelper_next";
  if (!"name" in _EventLoop__runHelper_next)
    _EventLoop__runHelper_next.name = "_EventLoop__runHelper_next";
  $desc = $collectedClasses._EventLoop__runHelper_next;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop__runHelper_next.prototype = $desc;
  function _IsolateEvent(isolate, fn, message) {
    this.isolate = isolate;
    this.fn = fn;
    this.message = message;
  }
  _IsolateEvent.builtin$cls = "_IsolateEvent";
  if (!"name" in _IsolateEvent)
    _IsolateEvent.name = "_IsolateEvent";
  $desc = $collectedClasses._IsolateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateEvent.prototype = $desc;
  _IsolateEvent.prototype.get$message = function(receiver) {
    return this.message;
  };
  function _MainManagerStub() {
  }
  _MainManagerStub.builtin$cls = "_MainManagerStub";
  if (!"name" in _MainManagerStub)
    _MainManagerStub.name = "_MainManagerStub";
  $desc = $collectedClasses._MainManagerStub;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MainManagerStub.prototype = $desc;
  function IsolateNatives__processWorkerMessage_closure(entryPoint_0, args_1, message_2, isSpawnUri_3, replyTo_4) {
    this.entryPoint_0 = entryPoint_0;
    this.args_1 = args_1;
    this.message_2 = message_2;
    this.isSpawnUri_3 = isSpawnUri_3;
    this.replyTo_4 = replyTo_4;
  }
  IsolateNatives__processWorkerMessage_closure.builtin$cls = "IsolateNatives__processWorkerMessage_closure";
  if (!"name" in IsolateNatives__processWorkerMessage_closure)
    IsolateNatives__processWorkerMessage_closure.name = "IsolateNatives__processWorkerMessage_closure";
  $desc = $collectedClasses.IsolateNatives__processWorkerMessage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IsolateNatives__processWorkerMessage_closure.prototype = $desc;
  function _BaseSendPort() {
  }
  _BaseSendPort.builtin$cls = "_BaseSendPort";
  if (!"name" in _BaseSendPort)
    _BaseSendPort.name = "_BaseSendPort";
  $desc = $collectedClasses._BaseSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseSendPort.prototype = $desc;
  function _NativeJsSendPort(_receivePort, _isolateId) {
    this._receivePort = _receivePort;
    this._isolateId = _isolateId;
  }
  _NativeJsSendPort.builtin$cls = "_NativeJsSendPort";
  if (!"name" in _NativeJsSendPort)
    _NativeJsSendPort.name = "_NativeJsSendPort";
  $desc = $collectedClasses._NativeJsSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort.prototype = $desc;
  function _NativeJsSendPort_send_closure(this_1, message_2) {
    this.this_1 = this_1;
    this.message_2 = message_2;
  }
  _NativeJsSendPort_send_closure.builtin$cls = "_NativeJsSendPort_send_closure";
  if (!"name" in _NativeJsSendPort_send_closure)
    _NativeJsSendPort_send_closure.name = "_NativeJsSendPort_send_closure";
  $desc = $collectedClasses._NativeJsSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send_closure.prototype = $desc;
  function _NativeJsSendPort_send__closure(box_0, this_3, shouldSerialize_4) {
    this.box_0 = box_0;
    this.this_3 = this_3;
    this.shouldSerialize_4 = shouldSerialize_4;
  }
  _NativeJsSendPort_send__closure.builtin$cls = "_NativeJsSendPort_send__closure";
  if (!"name" in _NativeJsSendPort_send__closure)
    _NativeJsSendPort_send__closure.name = "_NativeJsSendPort_send__closure";
  $desc = $collectedClasses._NativeJsSendPort_send__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send__closure.prototype = $desc;
  function _WorkerSendPort(_workerId, _receivePortId, _isolateId) {
    this._workerId = _workerId;
    this._receivePortId = _receivePortId;
    this._isolateId = _isolateId;
  }
  _WorkerSendPort.builtin$cls = "_WorkerSendPort";
  if (!"name" in _WorkerSendPort)
    _WorkerSendPort.name = "_WorkerSendPort";
  $desc = $collectedClasses._WorkerSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort.prototype = $desc;
  function _WorkerSendPort_send_closure(this_0, message_1) {
    this.this_0 = this_0;
    this.message_1 = message_1;
  }
  _WorkerSendPort_send_closure.builtin$cls = "_WorkerSendPort_send_closure";
  if (!"name" in _WorkerSendPort_send_closure)
    _WorkerSendPort_send_closure.name = "_WorkerSendPort_send_closure";
  $desc = $collectedClasses._WorkerSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort_send_closure.prototype = $desc;
  function ReceivePortImpl(_id, __isolate_helper$_controller) {
    this._id = _id;
    this.__isolate_helper$_controller = __isolate_helper$_controller;
  }
  ReceivePortImpl.builtin$cls = "ReceivePortImpl";
  if (!"name" in ReceivePortImpl)
    ReceivePortImpl.name = "ReceivePortImpl";
  $desc = $collectedClasses.ReceivePortImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReceivePortImpl.prototype = $desc;
  ReceivePortImpl.prototype.get$_id = function() {
    return this._id;
  };
  ReceivePortImpl.prototype.get$__isolate_helper$_controller = function() {
    return this.__isolate_helper$_controller;
  };
  function _waitForPendingPorts_closure(callback_0) {
    this.callback_0 = callback_0;
  }
  _waitForPendingPorts_closure.builtin$cls = "_waitForPendingPorts_closure";
  if (!"name" in _waitForPendingPorts_closure)
    _waitForPendingPorts_closure.name = "_waitForPendingPorts_closure";
  $desc = $collectedClasses._waitForPendingPorts_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _waitForPendingPorts_closure.prototype = $desc;
  function _PendingSendPortFinder(ports, _visited) {
    this.ports = ports;
    this._visited = _visited;
  }
  _PendingSendPortFinder.builtin$cls = "_PendingSendPortFinder";
  if (!"name" in _PendingSendPortFinder)
    _PendingSendPortFinder.name = "_PendingSendPortFinder";
  $desc = $collectedClasses._PendingSendPortFinder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingSendPortFinder.prototype = $desc;
  function _JsSerializer(_nextFreeRefId, _visited) {
    this._nextFreeRefId = _nextFreeRefId;
    this._visited = _visited;
  }
  _JsSerializer.builtin$cls = "_JsSerializer";
  if (!"name" in _JsSerializer)
    _JsSerializer.name = "_JsSerializer";
  $desc = $collectedClasses._JsSerializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsSerializer.prototype = $desc;
  function _JsCopier(_visited) {
    this._visited = _visited;
  }
  _JsCopier.builtin$cls = "_JsCopier";
  if (!"name" in _JsCopier)
    _JsCopier.name = "_JsCopier";
  $desc = $collectedClasses._JsCopier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsCopier.prototype = $desc;
  function _JsDeserializer(_deserialized) {
    this._deserialized = _deserialized;
  }
  _JsDeserializer.builtin$cls = "_JsDeserializer";
  if (!"name" in _JsDeserializer)
    _JsDeserializer.name = "_JsDeserializer";
  $desc = $collectedClasses._JsDeserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsDeserializer.prototype = $desc;
  function _JsVisitedMap(tagged) {
    this.tagged = tagged;
  }
  _JsVisitedMap.builtin$cls = "_JsVisitedMap";
  if (!"name" in _JsVisitedMap)
    _JsVisitedMap.name = "_JsVisitedMap";
  $desc = $collectedClasses._JsVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsVisitedMap.prototype = $desc;
  function _MessageTraverserVisitedMap() {
  }
  _MessageTraverserVisitedMap.builtin$cls = "_MessageTraverserVisitedMap";
  if (!"name" in _MessageTraverserVisitedMap)
    _MessageTraverserVisitedMap.name = "_MessageTraverserVisitedMap";
  $desc = $collectedClasses._MessageTraverserVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverserVisitedMap.prototype = $desc;
  function _MessageTraverser() {
  }
  _MessageTraverser.builtin$cls = "_MessageTraverser";
  if (!"name" in _MessageTraverser)
    _MessageTraverser.name = "_MessageTraverser";
  $desc = $collectedClasses._MessageTraverser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverser.prototype = $desc;
  function BoundClosure$1(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$1.builtin$cls = "BoundClosure$1";
  $desc = $collectedClasses.BoundClosure$1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$1.prototype = $desc;
  function _Copier() {
  }
  _Copier.builtin$cls = "_Copier";
  if (!"name" in _Copier)
    _Copier.name = "_Copier";
  $desc = $collectedClasses._Copier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier.prototype = $desc;
  function _Copier_visitMap_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  _Copier_visitMap_closure.builtin$cls = "_Copier_visitMap_closure";
  if (!"name" in _Copier_visitMap_closure)
    _Copier_visitMap_closure.name = "_Copier_visitMap_closure";
  $desc = $collectedClasses._Copier_visitMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier_visitMap_closure.prototype = $desc;
  function _Serializer() {
  }
  _Serializer.builtin$cls = "_Serializer";
  if (!"name" in _Serializer)
    _Serializer.name = "_Serializer";
  $desc = $collectedClasses._Serializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Serializer.prototype = $desc;
  function _Deserializer() {
  }
  _Deserializer.builtin$cls = "_Deserializer";
  if (!"name" in _Deserializer)
    _Deserializer.name = "_Deserializer";
  $desc = $collectedClasses._Deserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Deserializer.prototype = $desc;
  function TimerImpl(_once, _inEventLoop, _handle) {
    this._once = _once;
    this._inEventLoop = _inEventLoop;
    this._handle = _handle;
  }
  TimerImpl.builtin$cls = "TimerImpl";
  if (!"name" in TimerImpl)
    TimerImpl.name = "TimerImpl";
  $desc = $collectedClasses.TimerImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl.prototype = $desc;
  function TimerImpl_internalCallback(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  }
  TimerImpl_internalCallback.builtin$cls = "TimerImpl_internalCallback";
  if (!"name" in TimerImpl_internalCallback)
    TimerImpl_internalCallback.name = "TimerImpl_internalCallback";
  $desc = $collectedClasses.TimerImpl_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback.prototype = $desc;
  function TimerImpl_internalCallback0(this_2, callback_3) {
    this.this_2 = this_2;
    this.callback_3 = callback_3;
  }
  TimerImpl_internalCallback0.builtin$cls = "TimerImpl_internalCallback0";
  if (!"name" in TimerImpl_internalCallback0)
    TimerImpl_internalCallback0.name = "TimerImpl_internalCallback0";
  $desc = $collectedClasses.TimerImpl_internalCallback0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback0.prototype = $desc;
  function ConstantMap() {
  }
  ConstantMap.builtin$cls = "ConstantMap";
  if (!"name" in ConstantMap)
    ConstantMap.name = "ConstantMap";
  $desc = $collectedClasses.ConstantMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConstantMap.prototype = $desc;
  function ConstantStringMap(length, _jsObject, _keys) {
    this.length = length;
    this._jsObject = _jsObject;
    this._keys = _keys;
  }
  ConstantStringMap.builtin$cls = "ConstantStringMap";
  if (!"name" in ConstantStringMap)
    ConstantStringMap.name = "ConstantStringMap";
  $desc = $collectedClasses.ConstantStringMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConstantStringMap.prototype = $desc;
  ConstantStringMap.prototype.get$length = function(receiver) {
    return this.length;
  };
  function ConstantStringMap_forEach_closure(this_0, f_1) {
    this.this_0 = this_0;
    this.f_1 = f_1;
  }
  ConstantStringMap_forEach_closure.builtin$cls = "ConstantStringMap_forEach_closure";
  if (!"name" in ConstantStringMap_forEach_closure)
    ConstantStringMap_forEach_closure.name = "ConstantStringMap_forEach_closure";
  $desc = $collectedClasses.ConstantStringMap_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConstantStringMap_forEach_closure.prototype = $desc;
  function ConstantStringMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  ConstantStringMap_values_closure.builtin$cls = "ConstantStringMap_values_closure";
  if (!"name" in ConstantStringMap_values_closure)
    ConstantStringMap_values_closure.name = "ConstantStringMap_values_closure";
  $desc = $collectedClasses.ConstantStringMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConstantStringMap_values_closure.prototype = $desc;
  function _ConstantMapKeyIterable(__js_helper$_map) {
    this.__js_helper$_map = __js_helper$_map;
  }
  _ConstantMapKeyIterable.builtin$cls = "_ConstantMapKeyIterable";
  if (!"name" in _ConstantMapKeyIterable)
    _ConstantMapKeyIterable.name = "_ConstantMapKeyIterable";
  $desc = $collectedClasses._ConstantMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ConstantMapKeyIterable.prototype = $desc;
  function TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver) {
    this._pattern = _pattern;
    this._arguments = _arguments;
    this._argumentsExpr = _argumentsExpr;
    this._expr = _expr;
    this._method = _method;
    this._receiver = _receiver;
  }
  TypeErrorDecoder.builtin$cls = "TypeErrorDecoder";
  if (!"name" in TypeErrorDecoder)
    TypeErrorDecoder.name = "TypeErrorDecoder";
  $desc = $collectedClasses.TypeErrorDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeErrorDecoder.prototype = $desc;
  function NullError(_message, _method) {
    this._message = _message;
    this._method = _method;
  }
  NullError.builtin$cls = "NullError";
  if (!"name" in NullError)
    NullError.name = "NullError";
  $desc = $collectedClasses.NullError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullError.prototype = $desc;
  function JsNoSuchMethodError(_message, _method, _receiver) {
    this._message = _message;
    this._method = _method;
    this._receiver = _receiver;
  }
  JsNoSuchMethodError.builtin$cls = "JsNoSuchMethodError";
  if (!"name" in JsNoSuchMethodError)
    JsNoSuchMethodError.name = "JsNoSuchMethodError";
  $desc = $collectedClasses.JsNoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsNoSuchMethodError.prototype = $desc;
  function UnknownJsTypeError(_message) {
    this._message = _message;
  }
  UnknownJsTypeError.builtin$cls = "UnknownJsTypeError";
  if (!"name" in UnknownJsTypeError)
    UnknownJsTypeError.name = "UnknownJsTypeError";
  $desc = $collectedClasses.UnknownJsTypeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJsTypeError.prototype = $desc;
  function unwrapException_saveStackTrace(ex_0) {
    this.ex_0 = ex_0;
  }
  unwrapException_saveStackTrace.builtin$cls = "unwrapException_saveStackTrace";
  if (!"name" in unwrapException_saveStackTrace)
    unwrapException_saveStackTrace.name = "unwrapException_saveStackTrace";
  $desc = $collectedClasses.unwrapException_saveStackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  unwrapException_saveStackTrace.prototype = $desc;
  function _StackTrace(_exception, _trace) {
    this._exception = _exception;
    this._trace = _trace;
  }
  _StackTrace.builtin$cls = "_StackTrace";
  if (!"name" in _StackTrace)
    _StackTrace.name = "_StackTrace";
  $desc = $collectedClasses._StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StackTrace.prototype = $desc;
  function invokeClosure_closure(closure_0) {
    this.closure_0 = closure_0;
  }
  invokeClosure_closure.builtin$cls = "invokeClosure_closure";
  if (!"name" in invokeClosure_closure)
    invokeClosure_closure.name = "invokeClosure_closure";
  $desc = $collectedClasses.invokeClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure.prototype = $desc;
  function invokeClosure_closure0(closure_1, arg1_2) {
    this.closure_1 = closure_1;
    this.arg1_2 = arg1_2;
  }
  invokeClosure_closure0.builtin$cls = "invokeClosure_closure0";
  if (!"name" in invokeClosure_closure0)
    invokeClosure_closure0.name = "invokeClosure_closure0";
  $desc = $collectedClasses.invokeClosure_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure0.prototype = $desc;
  function invokeClosure_closure1(closure_3, arg1_4, arg2_5) {
    this.closure_3 = closure_3;
    this.arg1_4 = arg1_4;
    this.arg2_5 = arg2_5;
  }
  invokeClosure_closure1.builtin$cls = "invokeClosure_closure1";
  if (!"name" in invokeClosure_closure1)
    invokeClosure_closure1.name = "invokeClosure_closure1";
  $desc = $collectedClasses.invokeClosure_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure1.prototype = $desc;
  function invokeClosure_closure2(closure_6, arg1_7, arg2_8, arg3_9) {
    this.closure_6 = closure_6;
    this.arg1_7 = arg1_7;
    this.arg2_8 = arg2_8;
    this.arg3_9 = arg3_9;
  }
  invokeClosure_closure2.builtin$cls = "invokeClosure_closure2";
  if (!"name" in invokeClosure_closure2)
    invokeClosure_closure2.name = "invokeClosure_closure2";
  $desc = $collectedClasses.invokeClosure_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure2.prototype = $desc;
  function invokeClosure_closure3(closure_10, arg1_11, arg2_12, arg3_13, arg4_14) {
    this.closure_10 = closure_10;
    this.arg1_11 = arg1_11;
    this.arg2_12 = arg2_12;
    this.arg3_13 = arg3_13;
    this.arg4_14 = arg4_14;
  }
  invokeClosure_closure3.builtin$cls = "invokeClosure_closure3";
  if (!"name" in invokeClosure_closure3)
    invokeClosure_closure3.name = "invokeClosure_closure3";
  $desc = $collectedClasses.invokeClosure_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure3.prototype = $desc;
  function Closure() {
  }
  Closure.builtin$cls = "Closure";
  if (!"name" in Closure)
    Closure.name = "Closure";
  $desc = $collectedClasses.Closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure.prototype = $desc;
  function BoundClosure(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure.builtin$cls = "BoundClosure";
  if (!"name" in BoundClosure)
    BoundClosure.name = "BoundClosure";
  $desc = $collectedClasses.BoundClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure.prototype = $desc;
  function CastErrorImplementation(message) {
    this.message = message;
  }
  CastErrorImplementation.builtin$cls = "CastErrorImplementation";
  if (!"name" in CastErrorImplementation)
    CastErrorImplementation.name = "CastErrorImplementation";
  $desc = $collectedClasses.CastErrorImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CastErrorImplementation.prototype = $desc;
  CastErrorImplementation.prototype.get$message = function(receiver) {
    return this.message;
  };
  function TypeImpl(_typeName, _unmangledName) {
    this._typeName = _typeName;
    this._unmangledName = _unmangledName;
  }
  TypeImpl.builtin$cls = "TypeImpl";
  if (!"name" in TypeImpl)
    TypeImpl.name = "TypeImpl";
  $desc = $collectedClasses.TypeImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeImpl.prototype = $desc;
  function initHooks_closure(getTag_0) {
    this.getTag_0 = getTag_0;
  }
  initHooks_closure.builtin$cls = "initHooks_closure";
  if (!"name" in initHooks_closure)
    initHooks_closure.name = "initHooks_closure";
  $desc = $collectedClasses.initHooks_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure.prototype = $desc;
  function initHooks_closure0(getUnknownTag_1) {
    this.getUnknownTag_1 = getUnknownTag_1;
  }
  initHooks_closure0.builtin$cls = "initHooks_closure0";
  if (!"name" in initHooks_closure0)
    initHooks_closure0.name = "initHooks_closure0";
  $desc = $collectedClasses.initHooks_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure0.prototype = $desc;
  function initHooks_closure1(prototypeForTag_2) {
    this.prototypeForTag_2 = prototypeForTag_2;
  }
  initHooks_closure1.builtin$cls = "initHooks_closure1";
  if (!"name" in initHooks_closure1)
    initHooks_closure1.name = "initHooks_closure1";
  $desc = $collectedClasses.initHooks_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure1.prototype = $desc;
  function JSSyntaxRegExp(_nativeRegExp, _nativeGlobalRegExp, _nativeAnchoredRegExp) {
    this._nativeRegExp = _nativeRegExp;
    this._nativeGlobalRegExp = _nativeGlobalRegExp;
    this._nativeAnchoredRegExp = _nativeAnchoredRegExp;
  }
  JSSyntaxRegExp.builtin$cls = "JSSyntaxRegExp";
  if (!"name" in JSSyntaxRegExp)
    JSSyntaxRegExp.name = "JSSyntaxRegExp";
  $desc = $collectedClasses.JSSyntaxRegExp;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSSyntaxRegExp.prototype = $desc;
  function _MatchImplementation(pattern, _match) {
    this.pattern = pattern;
    this._match = _match;
  }
  _MatchImplementation.builtin$cls = "_MatchImplementation";
  if (!"name" in _MatchImplementation)
    _MatchImplementation.name = "_MatchImplementation";
  $desc = $collectedClasses._MatchImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MatchImplementation.prototype = $desc;
  function _AllMatchesIterable(_re, _string) {
    this._re = _re;
    this._string = _string;
  }
  _AllMatchesIterable.builtin$cls = "_AllMatchesIterable";
  if (!"name" in _AllMatchesIterable)
    _AllMatchesIterable.name = "_AllMatchesIterable";
  $desc = $collectedClasses._AllMatchesIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AllMatchesIterable.prototype = $desc;
  function _AllMatchesIterator(_regExp, _string, __js_helper$_current) {
    this._regExp = _regExp;
    this._string = _string;
    this.__js_helper$_current = __js_helper$_current;
  }
  _AllMatchesIterator.builtin$cls = "_AllMatchesIterator";
  if (!"name" in _AllMatchesIterator)
    _AllMatchesIterator.name = "_AllMatchesIterator";
  $desc = $collectedClasses._AllMatchesIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AllMatchesIterator.prototype = $desc;
  function StringMatch(start, input, pattern) {
    this.start = start;
    this.input = input;
    this.pattern = pattern;
  }
  StringMatch.builtin$cls = "StringMatch";
  if (!"name" in StringMatch)
    StringMatch.name = "StringMatch";
  $desc = $collectedClasses.StringMatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringMatch.prototype = $desc;
  function Asset(pack, name, type, loader, importer, loaderArguments, importerArguments, url, _status, _imported) {
    this.pack = pack;
    this.name = name;
    this.type = type;
    this.loader = loader;
    this.importer = importer;
    this.loaderArguments = loaderArguments;
    this.importerArguments = importerArguments;
    this.url = url;
    this._status = _status;
    this._imported = _imported;
  }
  Asset.builtin$cls = "Asset";
  if (!"name" in Asset)
    Asset.name = "Asset";
  $desc = $collectedClasses.Asset;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Asset.prototype = $desc;
  Asset.prototype.get$name = function(receiver) {
    return this.name;
  };
  Asset.prototype.get$type = function(receiver) {
    return this.type;
  };
  Asset.prototype.get$url = function(receiver) {
    return this.url;
  };
  Asset.prototype.get$_imported = function() {
    return this._imported;
  };
  Asset.prototype.set$_imported = function(v) {
    return this._imported = v;
  };
  function AssetImporter() {
  }
  AssetImporter.builtin$cls = "AssetImporter";
  if (!"name" in AssetImporter)
    AssetImporter.name = "AssetImporter";
  $desc = $collectedClasses.AssetImporter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AssetImporter.prototype = $desc;
  function AssetLoader() {
  }
  AssetLoader.builtin$cls = "AssetLoader";
  if (!"name" in AssetLoader)
    AssetLoader.name = "AssetLoader";
  $desc = $collectedClasses.AssetLoader;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AssetLoader.prototype = $desc;
  function AssetLoader_httpLoad_closure(asset_0, extractResponse_1, tracer_2, completer_3, xhr_4) {
    this.asset_0 = asset_0;
    this.extractResponse_1 = extractResponse_1;
    this.tracer_2 = tracer_2;
    this.completer_3 = completer_3;
    this.xhr_4 = xhr_4;
  }
  AssetLoader_httpLoad_closure.builtin$cls = "AssetLoader_httpLoad_closure";
  if (!"name" in AssetLoader_httpLoad_closure)
    AssetLoader_httpLoad_closure.name = "AssetLoader_httpLoad_closure";
  $desc = $collectedClasses.AssetLoader_httpLoad_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AssetLoader_httpLoad_closure.prototype = $desc;
  function AssetLoader_httpLoad_closure0(asset_5, tracer_6, completer_7, xhr_8) {
    this.asset_5 = asset_5;
    this.tracer_6 = tracer_6;
    this.completer_7 = completer_7;
    this.xhr_8 = xhr_8;
  }
  AssetLoader_httpLoad_closure0.builtin$cls = "AssetLoader_httpLoad_closure0";
  if (!"name" in AssetLoader_httpLoad_closure0)
    AssetLoader_httpLoad_closure0.name = "AssetLoader_httpLoad_closure0";
  $desc = $collectedClasses.AssetLoader_httpLoad_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AssetLoader_httpLoad_closure0.prototype = $desc;
  function AssetManager(importers, loaders, tracer, _root) {
    this.importers = importers;
    this.loaders = loaders;
    this.tracer = tracer;
    this._root = _root;
  }
  AssetManager.builtin$cls = "AssetManager";
  if (!"name" in AssetManager)
    AssetManager.name = "AssetManager";
  $desc = $collectedClasses.AssetManager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AssetManager.prototype = $desc;
  function AssetManager__loadAndImport_closure(this_0, asset_1) {
    this.this_0 = this_0;
    this.asset_1 = asset_1;
  }
  AssetManager__loadAndImport_closure.builtin$cls = "AssetManager__loadAndImport_closure";
  if (!"name" in AssetManager__loadAndImport_closure)
    AssetManager__loadAndImport_closure.name = "AssetManager__loadAndImport_closure";
  $desc = $collectedClasses.AssetManager__loadAndImport_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AssetManager__loadAndImport_closure.prototype = $desc;
  function AssetPack(manager, name, assets, _parent) {
    this.manager = manager;
    this.name = name;
    this.assets = assets;
    this._parent = _parent;
  }
  AssetPack.builtin$cls = "AssetPack";
  if (!"name" in AssetPack)
    AssetPack.name = "AssetPack";
  $desc = $collectedClasses.AssetPack;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AssetPack.prototype = $desc;
  AssetPack.prototype.get$name = function(receiver) {
    return this.name;
  };
  AssetPack.prototype.set$_parent = function(v) {
    return this._parent = v;
  };
  function BoundClosure$i1(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$i1.builtin$cls = "BoundClosure$i1";
  $desc = $collectedClasses.BoundClosure$i1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$i1.prototype = $desc;
  function AssetPack_loadPack_closure(asset_0) {
    this.asset_0 = asset_0;
  }
  AssetPack_loadPack_closure.builtin$cls = "AssetPack_loadPack_closure";
  if (!"name" in AssetPack_loadPack_closure)
    AssetPack_loadPack_closure.name = "AssetPack_loadPack_closure";
  $desc = $collectedClasses.AssetPack_loadPack_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AssetPack_loadPack_closure.prototype = $desc;
  function AssetPackTraceEvent() {
  }
  AssetPackTraceEvent.builtin$cls = "AssetPackTraceEvent";
  if (!"name" in AssetPackTraceEvent)
    AssetPackTraceEvent.name = "AssetPackTraceEvent";
  $desc = $collectedClasses.AssetPackTraceEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AssetPackTraceEvent.prototype = $desc;
  function AssetPackTrace() {
  }
  AssetPackTrace.builtin$cls = "AssetPackTrace";
  if (!"name" in AssetPackTrace)
    AssetPackTrace.name = "AssetPackTrace";
  $desc = $collectedClasses.AssetPackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AssetPackTrace.prototype = $desc;
  function NullAssetPackTrace(_streamCtrl) {
    this._streamCtrl = _streamCtrl;
  }
  NullAssetPackTrace.builtin$cls = "NullAssetPackTrace";
  if (!"name" in NullAssetPackTrace)
    NullAssetPackTrace.name = "NullAssetPackTrace";
  $desc = $collectedClasses.NullAssetPackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullAssetPackTrace.prototype = $desc;
  function JsonImporter() {
  }
  JsonImporter.builtin$cls = "JsonImporter";
  if (!"name" in JsonImporter)
    JsonImporter.name = "JsonImporter";
  $desc = $collectedClasses.JsonImporter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonImporter.prototype = $desc;
  function NoopImporter() {
  }
  NoopImporter.builtin$cls = "NoopImporter";
  if (!"name" in NoopImporter)
    NoopImporter.name = "NoopImporter";
  $desc = $collectedClasses.NoopImporter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoopImporter.prototype = $desc;
  function PackImporter(manager) {
    this.manager = manager;
  }
  PackImporter.builtin$cls = "PackImporter";
  if (!"name" in PackImporter)
    PackImporter.name = "PackImporter";
  $desc = $collectedClasses.PackImporter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PackImporter.prototype = $desc;
  function PackImporter_import_closure(this_0, baseUri_1, pack_2, futureAssets_3) {
    this.this_0 = this_0;
    this.baseUri_1 = baseUri_1;
    this.pack_2 = pack_2;
    this.futureAssets_3 = futureAssets_3;
  }
  PackImporter_import_closure.builtin$cls = "PackImporter_import_closure";
  if (!"name" in PackImporter_import_closure)
    PackImporter_import_closure.name = "PackImporter_import_closure";
  $desc = $collectedClasses.PackImporter_import_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PackImporter_import_closure.prototype = $desc;
  function PackImporter_import__closure(childAsset_4) {
    this.childAsset_4 = childAsset_4;
  }
  PackImporter_import__closure.builtin$cls = "PackImporter_import__closure";
  if (!"name" in PackImporter_import__closure)
    PackImporter_import__closure.name = "PackImporter_import__closure";
  $desc = $collectedClasses.PackImporter_import__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PackImporter_import__closure.prototype = $desc;
  function PackImporter_import_closure0(asset_5, tracer_6, pack_7) {
    this.asset_5 = asset_5;
    this.tracer_6 = tracer_6;
    this.pack_7 = pack_7;
  }
  PackImporter_import_closure0.builtin$cls = "PackImporter_import_closure0";
  if (!"name" in PackImporter_import_closure0)
    PackImporter_import_closure0.name = "PackImporter_import_closure0";
  $desc = $collectedClasses.PackImporter_import_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PackImporter_import_closure0.prototype = $desc;
  function TextImporter() {
  }
  TextImporter.builtin$cls = "TextImporter";
  if (!"name" in TextImporter)
    TextImporter.name = "TextImporter";
  $desc = $collectedClasses.TextImporter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextImporter.prototype = $desc;
  function ImageLoader() {
  }
  ImageLoader.builtin$cls = "ImageLoader";
  if (!"name" in ImageLoader)
    ImageLoader.name = "ImageLoader";
  $desc = $collectedClasses.ImageLoader;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageLoader.prototype = $desc;
  function ImageLoader_load_closure(asset_0, tracer_1, completer_2, image_3) {
    this.asset_0 = asset_0;
    this.tracer_1 = tracer_1;
    this.completer_2 = completer_2;
    this.image_3 = image_3;
  }
  ImageLoader_load_closure.builtin$cls = "ImageLoader_load_closure";
  if (!"name" in ImageLoader_load_closure)
    ImageLoader_load_closure.name = "ImageLoader_load_closure";
  $desc = $collectedClasses.ImageLoader_load_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageLoader_load_closure.prototype = $desc;
  function ImageLoader_load_closure0(asset_4, tracer_5, completer_6) {
    this.asset_4 = asset_4;
    this.tracer_5 = tracer_5;
    this.completer_6 = completer_6;
  }
  ImageLoader_load_closure0.builtin$cls = "ImageLoader_load_closure0";
  if (!"name" in ImageLoader_load_closure0)
    ImageLoader_load_closure0.name = "ImageLoader_load_closure0";
  $desc = $collectedClasses.ImageLoader_load_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageLoader_load_closure0.prototype = $desc;
  function MapLoader(_loader) {
    this._loader = _loader;
  }
  MapLoader.builtin$cls = "MapLoader";
  if (!"name" in MapLoader)
    MapLoader.name = "MapLoader";
  $desc = $collectedClasses.MapLoader;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLoader.prototype = $desc;
  function MapLoader_load_closure(this_0, asset_1, tracer_2) {
    this.this_0 = this_0;
    this.asset_1 = asset_1;
    this.tracer_2 = tracer_2;
  }
  MapLoader_load_closure.builtin$cls = "MapLoader_load_closure";
  if (!"name" in MapLoader_load_closure)
    MapLoader_load_closure.name = "MapLoader_load_closure";
  $desc = $collectedClasses.MapLoader_load_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLoader_load_closure.prototype = $desc;
  function MapLoader_load__closure(this_3, tracer_4, loadedMap_5, futures_6, baseUri_7) {
    this.this_3 = this_3;
    this.tracer_4 = tracer_4;
    this.loadedMap_5 = loadedMap_5;
    this.futures_6 = futures_6;
    this.baseUri_7 = baseUri_7;
  }
  MapLoader_load__closure.builtin$cls = "MapLoader_load__closure";
  if (!"name" in MapLoader_load__closure)
    MapLoader_load__closure.name = "MapLoader_load__closure";
  $desc = $collectedClasses.MapLoader_load__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLoader_load__closure.prototype = $desc;
  function MapLoader_load___closure(loadedMap_8, name_9) {
    this.loadedMap_8 = loadedMap_8;
    this.name_9 = name_9;
  }
  MapLoader_load___closure.builtin$cls = "MapLoader_load___closure";
  if (!"name" in MapLoader_load___closure)
    MapLoader_load___closure.name = "MapLoader_load___closure";
  $desc = $collectedClasses.MapLoader_load___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLoader_load___closure.prototype = $desc;
  function MapLoader_load__closure0(loadedMap_10) {
    this.loadedMap_10 = loadedMap_10;
  }
  MapLoader_load__closure0.builtin$cls = "MapLoader_load__closure0";
  if (!"name" in MapLoader_load__closure0)
    MapLoader_load__closure0.name = "MapLoader_load__closure0";
  $desc = $collectedClasses.MapLoader_load__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLoader_load__closure0.prototype = $desc;
  function TextLoader() {
  }
  TextLoader.builtin$cls = "TextLoader";
  if (!"name" in TextLoader)
    TextLoader.name = "TextLoader";
  $desc = $collectedClasses.TextLoader;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextLoader.prototype = $desc;
  function TextLoader_load_closure() {
  }
  TextLoader_load_closure.builtin$cls = "TextLoader_load_closure";
  if (!"name" in TextLoader_load_closure)
    TextLoader_load_closure.name = "TextLoader_load_closure";
  $desc = $collectedClasses.TextLoader_load_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextLoader_load_closure.prototype = $desc;
  function AssetPackFileAsset(name, url, type, loadArguments, importArguments) {
    this.name = name;
    this.url = url;
    this.type = type;
    this.loadArguments = loadArguments;
    this.importArguments = importArguments;
  }
  AssetPackFileAsset.builtin$cls = "AssetPackFileAsset";
  if (!"name" in AssetPackFileAsset)
    AssetPackFileAsset.name = "AssetPackFileAsset";
  $desc = $collectedClasses.AssetPackFileAsset;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AssetPackFileAsset.prototype = $desc;
  AssetPackFileAsset.prototype.get$name = function(receiver) {
    return this.name;
  };
  AssetPackFileAsset.prototype.get$url = function(receiver) {
    return this.url;
  };
  AssetPackFileAsset.prototype.get$type = function(receiver) {
    return this.type;
  };
  AssetPackFileAsset.prototype.set$type = function(receiver, v) {
    return this.type = v;
  };
  AssetPackFileAsset.prototype.get$loadArguments = function() {
    return this.loadArguments;
  };
  function AssetPackFile(assets) {
    this.assets = assets;
  }
  AssetPackFile.builtin$cls = "AssetPackFile";
  if (!"name" in AssetPackFile)
    AssetPackFile.name = "AssetPackFile";
  $desc = $collectedClasses.AssetPackFile;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AssetPackFile.prototype = $desc;
  function AssetPackFile_toJson_closure(json_0) {
    this.json_0 = json_0;
  }
  AssetPackFile_toJson_closure.builtin$cls = "AssetPackFile_toJson_closure";
  if (!"name" in AssetPackFile_toJson_closure)
    AssetPackFile_toJson_closure.name = "AssetPackFile_toJson_closure";
  $desc = $collectedClasses.AssetPackFile_toJson_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AssetPackFile_toJson_closure.prototype = $desc;
  function AssetPackFile$fromJson_closure(this_0) {
    this.this_0 = this_0;
  }
  AssetPackFile$fromJson_closure.builtin$cls = "AssetPackFile$fromJson_closure";
  if (!"name" in AssetPackFile$fromJson_closure)
    AssetPackFile$fromJson_closure.name = "AssetPackFile$fromJson_closure";
  $desc = $collectedClasses.AssetPackFile$fromJson_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AssetPackFile$fromJson_closure.prototype = $desc;
  function load_audio_closure(c_0) {
    this.c_0 = c_0;
  }
  load_audio_closure.builtin$cls = "load_audio_closure";
  if (!"name" in load_audio_closure)
    load_audio_closure.name = "load_audio_closure";
  $desc = $collectedClasses.load_audio_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  load_audio_closure.prototype = $desc;
  function load_audio__closure(song_1) {
    this.song_1 = song_1;
  }
  load_audio__closure.builtin$cls = "load_audio__closure";
  if (!"name" in load_audio__closure)
    load_audio__closure.name = "load_audio__closure";
  $desc = $collectedClasses.load_audio__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  load_audio__closure.prototype = $desc;
  function Chat(_showJoinMessages, _playMentionSound, tabContentMap) {
    this._showJoinMessages = _showJoinMessages;
    this._playMentionSound = _playMentionSound;
    this.tabContentMap = tabContentMap;
  }
  Chat.builtin$cls = "Chat";
  if (!"name" in Chat)
    Chat.name = "Chat";
  $desc = $collectedClasses.Chat;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Chat.prototype = $desc;
  function Chat_init_closure(chatMenu_0) {
    this.chatMenu_0 = chatMenu_0;
  }
  Chat_init_closure.builtin$cls = "Chat_init_closure";
  if (!"name" in Chat_init_closure)
    Chat_init_closure.name = "Chat_init_closure";
  $desc = $collectedClasses.Chat_init_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Chat_init_closure.prototype = $desc;
  function Chat_init_closure0(this_1) {
    this.this_1 = this_1;
  }
  Chat_init_closure0.builtin$cls = "Chat_init_closure0";
  if (!"name" in Chat_init_closure0)
    Chat_init_closure0.name = "Chat_init_closure0";
  $desc = $collectedClasses.Chat_init_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Chat_init_closure0.prototype = $desc;
  function TabContent(connectedUsers, _username, channelName, lastWord, useSpanForTitle, tabInserted, webSocket, chatDiv, chatHistory, unreadMessages, tabSearchIndex, numMessages, _chatServerUrl) {
    this.connectedUsers = connectedUsers;
    this._username = _username;
    this.channelName = channelName;
    this.lastWord = lastWord;
    this.useSpanForTitle = useSpanForTitle;
    this.tabInserted = tabInserted;
    this.webSocket = webSocket;
    this.chatDiv = chatDiv;
    this.chatHistory = chatHistory;
    this.unreadMessages = unreadMessages;
    this.tabSearchIndex = tabSearchIndex;
    this.numMessages = numMessages;
    this._chatServerUrl = _chatServerUrl;
  }
  TabContent.builtin$cls = "TabContent";
  if (!"name" in TabContent)
    TabContent.name = "TabContent";
  $desc = $collectedClasses.TabContent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TabContent.prototype = $desc;
  function TabContent_processInput_closure(this_0, input_1) {
    this.this_0 = this_0;
    this.input_1 = input_1;
  }
  TabContent_processInput_closure.builtin$cls = "TabContent_processInput_closure";
  if (!"name" in TabContent_processInput_closure)
    TabContent_processInput_closure.name = "TabContent_processInput_closure";
  $desc = $collectedClasses.TabContent_processInput_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TabContent_processInput_closure.prototype = $desc;
  function TabContent_processInput_closure0(this_2, input_3) {
    this.this_2 = this_2;
    this.input_3 = input_3;
  }
  TabContent_processInput_closure0.builtin$cls = "TabContent_processInput_closure0";
  if (!"name" in TabContent_processInput_closure0)
    TabContent_processInput_closure0.name = "TabContent_processInput_closure0";
  $desc = $collectedClasses.TabContent_processInput_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TabContent_processInput_closure0.prototype = $desc;
  function TabContent_processInput_closure1(this_4, input_5) {
    this.this_4 = this_4;
    this.input_5 = input_5;
  }
  TabContent_processInput_closure1.builtin$cls = "TabContent_processInput_closure1";
  if (!"name" in TabContent_processInput_closure1)
    TabContent_processInput_closure1.name = "TabContent_processInput_closure1";
  $desc = $collectedClasses.TabContent_processInput_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TabContent_processInput_closure1.prototype = $desc;
  function TabContent_setupWebSocket_closure(this_0, channelName_1) {
    this.this_0 = this_0;
    this.channelName_1 = channelName_1;
  }
  TabContent_setupWebSocket_closure.builtin$cls = "TabContent_setupWebSocket_closure";
  if (!"name" in TabContent_setupWebSocket_closure)
    TabContent_setupWebSocket_closure.name = "TabContent_setupWebSocket_closure";
  $desc = $collectedClasses.TabContent_setupWebSocket_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TabContent_setupWebSocket_closure.prototype = $desc;
  function TabContent_setupWebSocket_closure0(this_2, channelName_3) {
    this.this_2 = this_2;
    this.channelName_3 = channelName_3;
  }
  TabContent_setupWebSocket_closure0.builtin$cls = "TabContent_setupWebSocket_closure0";
  if (!"name" in TabContent_setupWebSocket_closure0)
    TabContent_setupWebSocket_closure0.name = "TabContent_setupWebSocket_closure0";
  $desc = $collectedClasses.TabContent_setupWebSocket_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TabContent_setupWebSocket_closure0.prototype = $desc;
  function TabContent_setupWebSocket_closure1(this_4, chatHistory_5, channelName_6) {
    this.this_4 = this_4;
    this.chatHistory_5 = chatHistory_5;
    this.channelName_6 = channelName_6;
  }
  TabContent_setupWebSocket_closure1.builtin$cls = "TabContent_setupWebSocket_closure1";
  if (!"name" in TabContent_setupWebSocket_closure1)
    TabContent_setupWebSocket_closure1.name = "TabContent_setupWebSocket_closure1";
  $desc = $collectedClasses.TabContent_setupWebSocket_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TabContent_setupWebSocket_closure1.prototype = $desc;
  function TabContent_setupWebSocket__closure(this_7, chatHistory_8, channelName_9) {
    this.this_7 = this_7;
    this.chatHistory_8 = chatHistory_8;
    this.channelName_9 = channelName_9;
  }
  TabContent_setupWebSocket__closure.builtin$cls = "TabContent_setupWebSocket__closure";
  if (!"name" in TabContent_setupWebSocket__closure)
    TabContent_setupWebSocket__closure.name = "TabContent_setupWebSocket__closure";
  $desc = $collectedClasses.TabContent_setupWebSocket__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TabContent_setupWebSocket__closure.prototype = $desc;
  function TabContent__addmessage_closure(this_0, chatString_1) {
    this.this_0 = this_0;
    this.chatString_1 = chatString_1;
  }
  TabContent__addmessage_closure.builtin$cls = "TabContent__addmessage_closure";
  if (!"name" in TabContent__addmessage_closure)
    TabContent__addmessage_closure.name = "TabContent__addmessage_closure";
  $desc = $collectedClasses.TabContent__addmessage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TabContent__addmessage_closure.prototype = $desc;
  function TabContent__parseForUrls_closure(box_0) {
    this.box_0 = box_0;
  }
  TabContent__parseForUrls_closure.builtin$cls = "TabContent__parseForUrls_closure";
  if (!"name" in TabContent__parseForUrls_closure)
    TabContent__parseForUrls_closure.name = "TabContent__parseForUrls_closure";
  $desc = $collectedClasses.TabContent__parseForUrls_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TabContent__parseForUrls_closure.prototype = $desc;
  function TabContent__parseForUrls_closure0(box_0) {
    this.box_0 = box_0;
  }
  TabContent__parseForUrls_closure0.builtin$cls = "TabContent__parseForUrls_closure0";
  if (!"name" in TabContent__parseForUrls_closure0)
    TabContent__parseForUrls_closure0.name = "TabContent__parseForUrls_closure0";
  $desc = $collectedClasses.TabContent__parseForUrls_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TabContent__parseForUrls_closure0.prototype = $desc;
  function NullTreeSanitizer() {
  }
  NullTreeSanitizer.builtin$cls = "NullTreeSanitizer";
  if (!"name" in NullTreeSanitizer)
    NullTreeSanitizer.name = "NullTreeSanitizer";
  $desc = $collectedClasses.NullTreeSanitizer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullTreeSanitizer.prototype = $desc;
  function showConsole_closure() {
  }
  showConsole_closure.builtin$cls = "showConsole_closure";
  if (!"name" in showConsole_closure)
    showConsole_closure.name = "showConsole_closure";
  $desc = $collectedClasses.showConsole_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  showConsole_closure.prototype = $desc;
  function main_closure() {
  }
  main_closure.builtin$cls = "main_closure";
  if (!"name" in main_closure)
    main_closure.name = "main_closure";
  $desc = $collectedClasses.main_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure.prototype = $desc;
  function main_closure0() {
  }
  main_closure0.builtin$cls = "main_closure0";
  if (!"name" in main_closure0)
    main_closure0.name = "main_closure0";
  $desc = $collectedClasses.main_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure0.prototype = $desc;
  function main__closure(doneLoading_0) {
    this.doneLoading_0 = doneLoading_0;
  }
  main__closure.builtin$cls = "main__closure";
  if (!"name" in main__closure)
    main__closure.name = "main__closure";
  $desc = $collectedClasses.main__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure.prototype = $desc;
  function Input(leftKey, rightKey, upKey, downKey, spaceKey, ignoreKeys) {
    this.leftKey = leftKey;
    this.rightKey = rightKey;
    this.upKey = upKey;
    this.downKey = downKey;
    this.spaceKey = spaceKey;
    this.ignoreKeys = ignoreKeys;
  }
  Input.builtin$cls = "Input";
  if (!"name" in Input)
    Input.name = "Input";
  $desc = $collectedClasses.Input;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input.prototype = $desc;
  function Input_init_closure() {
  }
  Input_init_closure.builtin$cls = "Input_init_closure";
  if (!"name" in Input_init_closure)
    Input_init_closure.name = "Input_init_closure";
  $desc = $collectedClasses.Input_init_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure.prototype = $desc;
  function Input_init_closure0() {
  }
  Input_init_closure0.builtin$cls = "Input_init_closure0";
  if (!"name" in Input_init_closure0)
    Input_init_closure0.name = "Input_init_closure0";
  $desc = $collectedClasses.Input_init_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure0.prototype = $desc;
  function Input_init_closure1() {
  }
  Input_init_closure1.builtin$cls = "Input_init_closure1";
  if (!"name" in Input_init_closure1)
    Input_init_closure1.name = "Input_init_closure1";
  $desc = $collectedClasses.Input_init_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure1.prototype = $desc;
  function Input_init_closure2() {
  }
  Input_init_closure2.builtin$cls = "Input_init_closure2";
  if (!"name" in Input_init_closure2)
    Input_init_closure2.name = "Input_init_closure2";
  $desc = $collectedClasses.Input_init_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure2.prototype = $desc;
  function Input_init_closure3() {
  }
  Input_init_closure3.builtin$cls = "Input_init_closure3";
  if (!"name" in Input_init_closure3)
    Input_init_closure3.name = "Input_init_closure3";
  $desc = $collectedClasses.Input_init_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure3.prototype = $desc;
  function Input_init_closure4() {
  }
  Input_init_closure4.builtin$cls = "Input_init_closure4";
  if (!"name" in Input_init_closure4)
    Input_init_closure4.name = "Input_init_closure4";
  $desc = $collectedClasses.Input_init_closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure4.prototype = $desc;
  function Input_init_closure5(volumeSlider_0) {
    this.volumeSlider_0 = volumeSlider_0;
  }
  Input_init_closure5.builtin$cls = "Input_init_closure5";
  if (!"name" in Input_init_closure5)
    Input_init_closure5.name = "Input_init_closure5";
  $desc = $collectedClasses.Input_init_closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure5.prototype = $desc;
  function Input_init_closure6(this_1) {
    this.this_1 = this_1;
  }
  Input_init_closure6.builtin$cls = "Input_init_closure6";
  if (!"name" in Input_init_closure6)
    Input_init_closure6.name = "Input_init_closure6";
  $desc = $collectedClasses.Input_init_closure6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure6.prototype = $desc;
  function Input_init_closure7(this_2) {
    this.this_2 = this_2;
  }
  Input_init_closure7.builtin$cls = "Input_init_closure7";
  if (!"name" in Input_init_closure7)
    Input_init_closure7.name = "Input_init_closure7";
  $desc = $collectedClasses.Input_init_closure7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure7.prototype = $desc;
  function Input_init_closure8(this_3) {
    this.this_3 = this_3;
  }
  Input_init_closure8.builtin$cls = "Input_init_closure8";
  if (!"name" in Input_init_closure8)
    Input_init_closure8.name = "Input_init_closure8";
  $desc = $collectedClasses.Input_init_closure8;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure8.prototype = $desc;
  function Input_init_closure9(this_4) {
    this.this_4 = this_4;
  }
  Input_init_closure9.builtin$cls = "Input_init_closure9";
  if (!"name" in Input_init_closure9)
    Input_init_closure9.name = "Input_init_closure9";
  $desc = $collectedClasses.Input_init_closure9;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure9.prototype = $desc;
  function Input_init_closure10(this_5, joystick_6) {
    this.this_5 = this_5;
    this.joystick_6 = joystick_6;
  }
  Input_init_closure10.builtin$cls = "Input_init_closure10";
  if (!"name" in Input_init_closure10)
    Input_init_closure10.name = "Input_init_closure10";
  $desc = $collectedClasses.Input_init_closure10;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure10.prototype = $desc;
  function Input_init_closure11(this_7) {
    this.this_7 = this_7;
  }
  Input_init_closure11.builtin$cls = "Input_init_closure11";
  if (!"name" in Input_init_closure11)
    Input_init_closure11.name = "Input_init_closure11";
  $desc = $collectedClasses.Input_init_closure11;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure11.prototype = $desc;
  function Input_init_closure12(this_8) {
    this.this_8 = this_8;
  }
  Input_init_closure12.builtin$cls = "Input_init_closure12";
  if (!"name" in Input_init_closure12)
    Input_init_closure12.name = "Input_init_closure12";
  $desc = $collectedClasses.Input_init_closure12;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure12.prototype = $desc;
  function Input_init_closure13(this_9) {
    this.this_9 = this_9;
  }
  Input_init_closure13.builtin$cls = "Input_init_closure13";
  if (!"name" in Input_init_closure13)
    Input_init_closure13.name = "Input_init_closure13";
  $desc = $collectedClasses.Input_init_closure13;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure13.prototype = $desc;
  function Input_init_closure14() {
  }
  Input_init_closure14.builtin$cls = "Input_init_closure14";
  if (!"name" in Input_init_closure14)
    Input_init_closure14.name = "Input_init_closure14";
  $desc = $collectedClasses.Input_init_closure14;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure14.prototype = $desc;
  function Input_init_closure15() {
  }
  Input_init_closure15.builtin$cls = "Input_init_closure15";
  if (!"name" in Input_init_closure15)
    Input_init_closure15.name = "Input_init_closure15";
  $desc = $collectedClasses.Input_init_closure15;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure15.prototype = $desc;
  function Input_init_closure16() {
  }
  Input_init_closure16.builtin$cls = "Input_init_closure16";
  if (!"name" in Input_init_closure16)
    Input_init_closure16.name = "Input_init_closure16";
  $desc = $collectedClasses.Input_init_closure16;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure16.prototype = $desc;
  function Input_init_closure17() {
  }
  Input_init_closure17.builtin$cls = "Input_init_closure17";
  if (!"name" in Input_init_closure17)
    Input_init_closure17.name = "Input_init_closure17";
  $desc = $collectedClasses.Input_init_closure17;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure17.prototype = $desc;
  function Input_init__closure(element_10) {
    this.element_10 = element_10;
  }
  Input_init__closure.builtin$cls = "Input_init__closure";
  if (!"name" in Input_init__closure)
    Input_init__closure.name = "Input_init__closure";
  $desc = $collectedClasses.Input_init__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init__closure.prototype = $desc;
  function Input_init_closure18(this_11) {
    this.this_11 = this_11;
  }
  Input_init_closure18.builtin$cls = "Input_init_closure18";
  if (!"name" in Input_init_closure18)
    Input_init_closure18.name = "Input_init_closure18";
  $desc = $collectedClasses.Input_init_closure18;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_init_closure18.prototype = $desc;
  function Input_showClickMenu_closure(option_0) {
    this.option_0 = option_0;
  }
  Input_showClickMenu_closure.builtin$cls = "Input_showClickMenu_closure";
  if (!"name" in Input_showClickMenu_closure)
    Input_showClickMenu_closure.name = "Input_showClickMenu_closure";
  $desc = $collectedClasses.Input_showClickMenu_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_showClickMenu_closure.prototype = $desc;
  function Input_showClickMenu_closure0(this_1) {
    this.this_1 = this_1;
  }
  Input_showClickMenu_closure0.builtin$cls = "Input_showClickMenu_closure0";
  if (!"name" in Input_showClickMenu_closure0)
    Input_showClickMenu_closure0.name = "Input_showClickMenu_closure0";
  $desc = $collectedClasses.Input_showClickMenu_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Input_showClickMenu_closure0.prototype = $desc;
  function Joystick(_joystick, _knob, _neutralX, _neutralY, _initialTouchX, _initialTouchY, UP, DOWN, LEFT, RIGHT, _moveController, _releaseController) {
    this._joystick = _joystick;
    this._knob = _knob;
    this._neutralX = _neutralX;
    this._neutralY = _neutralY;
    this._initialTouchX = _initialTouchX;
    this._initialTouchY = _initialTouchY;
    this.UP = UP;
    this.DOWN = DOWN;
    this.LEFT = LEFT;
    this.RIGHT = RIGHT;
    this._moveController = _moveController;
    this._releaseController = _releaseController;
  }
  Joystick.builtin$cls = "Joystick";
  if (!"name" in Joystick)
    Joystick.name = "Joystick";
  $desc = $collectedClasses.Joystick;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Joystick.prototype = $desc;
  function Joystick_closure(this_0) {
    this.this_0 = this_0;
  }
  Joystick_closure.builtin$cls = "Joystick_closure";
  if (!"name" in Joystick_closure)
    Joystick_closure.name = "Joystick_closure";
  $desc = $collectedClasses.Joystick_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Joystick_closure.prototype = $desc;
  function Joystick_closure0(this_1) {
    this.this_1 = this_1;
  }
  Joystick_closure0.builtin$cls = "Joystick_closure0";
  if (!"name" in Joystick_closure0)
    Joystick_closure0.name = "Joystick_closure0";
  $desc = $collectedClasses.Joystick_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Joystick_closure0.prototype = $desc;
  function Joystick_closure1(this_2) {
    this.this_2 = this_2;
  }
  Joystick_closure1.builtin$cls = "Joystick_closure1";
  if (!"name" in Joystick_closure1)
    Joystick_closure1.name = "Joystick_closure1";
  $desc = $collectedClasses.Joystick_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Joystick_closure1.prototype = $desc;
  function JoystickEvent() {
  }
  JoystickEvent.builtin$cls = "JoystickEvent";
  if (!"name" in JoystickEvent)
    JoystickEvent.name = "JoystickEvent";
  $desc = $collectedClasses.JoystickEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JoystickEvent.prototype = $desc;
  function Camera(x, y) {
    this.x = x;
    this.y = y;
  }
  Camera.builtin$cls = "Camera";
  if (!"name" in Camera)
    Camera.name = "Camera";
  $desc = $collectedClasses.Camera;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Camera.prototype = $desc;
  Camera.prototype.get$x = function(receiver) {
    return this.x;
  };
  Camera.prototype.get$y = function(receiver) {
    return this.y;
  };
  function UserInterface(commaFormatter, nameMeter, currantMeter, imgMeter, titleMeter, artistMeter, sc, jukebox, currentSong, _energymeterImage, _energymeterImageLow, _currEnergyText, _maxEnergyText, _energy, _maxenergy, _emptyAngle, _angleRange, _moodmeterImageLow, _moodmeterImageEmpty, _mood, _maxmood, _currMoodText, _maxMoodText, _moodPercent) {
    this.commaFormatter = commaFormatter;
    this.nameMeter = nameMeter;
    this.currantMeter = currantMeter;
    this.imgMeter = imgMeter;
    this.titleMeter = titleMeter;
    this.artistMeter = artistMeter;
    this.sc = sc;
    this.jukebox = jukebox;
    this.currentSong = currentSong;
    this._energymeterImage = _energymeterImage;
    this._energymeterImageLow = _energymeterImageLow;
    this._currEnergyText = _currEnergyText;
    this._maxEnergyText = _maxEnergyText;
    this._energy = _energy;
    this._maxenergy = _maxenergy;
    this._emptyAngle = _emptyAngle;
    this._angleRange = _angleRange;
    this._moodmeterImageLow = _moodmeterImageLow;
    this._moodmeterImageEmpty = _moodmeterImageEmpty;
    this._mood = _mood;
    this._maxmood = _maxmood;
    this._currMoodText = _currMoodText;
    this._maxMoodText = _maxMoodText;
    this._moodPercent = _moodPercent;
  }
  UserInterface.builtin$cls = "UserInterface";
  if (!"name" in UserInterface)
    UserInterface.name = "UserInterface";
  $desc = $collectedClasses.UserInterface;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UserInterface.prototype = $desc;
  function UserInterface_init_closure() {
  }
  UserInterface_init_closure.builtin$cls = "UserInterface_init_closure";
  if (!"name" in UserInterface_init_closure)
    UserInterface_init_closure.name = "UserInterface_init_closure";
  $desc = $collectedClasses.UserInterface_init_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UserInterface_init_closure.prototype = $desc;
  function UserInterface_init_closure0() {
  }
  UserInterface_init_closure0.builtin$cls = "UserInterface_init_closure0";
  if (!"name" in UserInterface_init_closure0)
    UserInterface_init_closure0.name = "UserInterface_init_closure0";
  $desc = $collectedClasses.UserInterface_init_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UserInterface_init_closure0.prototype = $desc;
  function UserInterface__setEnergy_closure(this_0) {
    this.this_0 = this_0;
  }
  UserInterface__setEnergy_closure.builtin$cls = "UserInterface__setEnergy_closure";
  if (!"name" in UserInterface__setEnergy_closure)
    UserInterface__setEnergy_closure.name = "UserInterface__setEnergy_closure";
  $desc = $collectedClasses.UserInterface__setEnergy_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UserInterface__setEnergy_closure.prototype = $desc;
  function UserInterface__setMood_closure(this_0) {
    this.this_0 = this_0;
  }
  UserInterface__setMood_closure.builtin$cls = "UserInterface__setMood_closure";
  if (!"name" in UserInterface__setMood_closure)
    UserInterface__setMood_closure.name = "UserInterface__setMood_closure";
  $desc = $collectedClasses.UserInterface__setMood_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UserInterface__setMood_closure.prototype = $desc;
  function Player(posX, posY, width, height, avatar, doPhysicsApply, playerCanvas) {
    this.posX = posX;
    this.posY = posY;
    this.width = width;
    this.height = height;
    this.avatar = avatar;
    this.doPhysicsApply = doPhysicsApply;
    this.playerCanvas = playerCanvas;
  }
  Player.builtin$cls = "Player";
  if (!"name" in Player)
    Player.name = "Player";
  $desc = $collectedClasses.Player;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Player.prototype = $desc;
  Player.prototype.get$width = function(receiver) {
    return this.width;
  };
  Player.prototype.get$height = function(receiver) {
    return this.height;
  };
  function Street(ID, _data, label, width, height, top, bottom, left, right, gradientTop, gradientBottom, currentPercentX, currentPercentY) {
    this.ID = ID;
    this._data = _data;
    this.label = label;
    this.width = width;
    this.height = height;
    this.top = top;
    this.bottom = bottom;
    this.left = left;
    this.right = right;
    this.gradientTop = gradientTop;
    this.gradientBottom = gradientBottom;
    this.currentPercentX = currentPercentX;
    this.currentPercentY = currentPercentY;
  }
  Street.builtin$cls = "Street";
  if (!"name" in Street)
    Street.name = "Street";
  $desc = $collectedClasses.Street;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Street.prototype = $desc;
  Street.prototype.get$width = function(receiver) {
    return this.width;
  };
  Street.prototype.get$height = function(receiver) {
    return this.height;
  };
  function Street_load_closure(layersOrdered_0) {
    this.layersOrdered_0 = layersOrdered_0;
  }
  Street_load_closure.builtin$cls = "Street_load_closure";
  if (!"name" in Street_load_closure)
    Street_load_closure.name = "Street_load_closure";
  $desc = $collectedClasses.Street_load_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Street_load_closure.prototype = $desc;
  function Street_load_closure0(this_1) {
    this.this_1 = this_1;
  }
  Street_load_closure0.builtin$cls = "Street_load_closure0";
  if (!"name" in Street_load_closure0)
    Street_load_closure0.name = "Street_load_closure0";
  $desc = $collectedClasses.Street_load_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Street_load_closure0.prototype = $desc;
  function Street_load_closure1() {
  }
  Street_load_closure1.builtin$cls = "Street_load_closure1";
  if (!"name" in Street_load_closure1)
    Street_load_closure1.name = "Street_load_closure1";
  $desc = $collectedClasses.Street_load_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Street_load_closure1.prototype = $desc;
  function closure() {
  }
  closure.builtin$cls = "closure";
  if (!"name" in closure)
    closure.name = "closure";
  $desc = $collectedClasses.closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure.prototype = $desc;
  function closure0() {
  }
  closure0.builtin$cls = "closure0";
  if (!"name" in closure0)
    closure0.name = "closure0";
  $desc = $collectedClasses.closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure0.prototype = $desc;
  function ListIterable() {
  }
  ListIterable.builtin$cls = "ListIterable";
  if (!"name" in ListIterable)
    ListIterable.name = "ListIterable";
  $desc = $collectedClasses.ListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterable.prototype = $desc;
  function ListIterator(_iterable, _dev$_length, _index, _dev$_current) {
    this._iterable = _iterable;
    this._dev$_length = _dev$_length;
    this._index = _index;
    this._dev$_current = _dev$_current;
  }
  ListIterator.builtin$cls = "ListIterator";
  if (!"name" in ListIterator)
    ListIterator.name = "ListIterator";
  $desc = $collectedClasses.ListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterator.prototype = $desc;
  function MappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  MappedIterable.builtin$cls = "MappedIterable";
  if (!"name" in MappedIterable)
    MappedIterable.name = "MappedIterable";
  $desc = $collectedClasses.MappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterable.prototype = $desc;
  function EfficientLengthMappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  EfficientLengthMappedIterable.builtin$cls = "EfficientLengthMappedIterable";
  if (!"name" in EfficientLengthMappedIterable)
    EfficientLengthMappedIterable.name = "EfficientLengthMappedIterable";
  $desc = $collectedClasses.EfficientLengthMappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EfficientLengthMappedIterable.prototype = $desc;
  function MappedIterator(_dev$_current, _iterator, _f) {
    this._dev$_current = _dev$_current;
    this._iterator = _iterator;
    this._f = _f;
  }
  MappedIterator.builtin$cls = "MappedIterator";
  if (!"name" in MappedIterator)
    MappedIterator.name = "MappedIterator";
  $desc = $collectedClasses.MappedIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterator.prototype = $desc;
  function MappedListIterable(_source, _f) {
    this._source = _source;
    this._f = _f;
  }
  MappedListIterable.builtin$cls = "MappedListIterable";
  if (!"name" in MappedListIterable)
    MappedListIterable.name = "MappedListIterable";
  $desc = $collectedClasses.MappedListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedListIterable.prototype = $desc;
  function WhereIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  WhereIterable.builtin$cls = "WhereIterable";
  if (!"name" in WhereIterable)
    WhereIterable.name = "WhereIterable";
  $desc = $collectedClasses.WhereIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterable.prototype = $desc;
  function WhereIterator(_iterator, _f) {
    this._iterator = _iterator;
    this._f = _f;
  }
  WhereIterator.builtin$cls = "WhereIterator";
  if (!"name" in WhereIterator)
    WhereIterator.name = "WhereIterator";
  $desc = $collectedClasses.WhereIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterator.prototype = $desc;
  function ExpandIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  ExpandIterable.builtin$cls = "ExpandIterable";
  if (!"name" in ExpandIterable)
    ExpandIterable.name = "ExpandIterable";
  $desc = $collectedClasses.ExpandIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ExpandIterable.prototype = $desc;
  function ExpandIterator(_iterator, _f, _currentExpansion, _dev$_current) {
    this._iterator = _iterator;
    this._f = _f;
    this._currentExpansion = _currentExpansion;
    this._dev$_current = _dev$_current;
  }
  ExpandIterator.builtin$cls = "ExpandIterator";
  if (!"name" in ExpandIterator)
    ExpandIterator.name = "ExpandIterator";
  $desc = $collectedClasses.ExpandIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ExpandIterator.prototype = $desc;
  function EmptyIterator() {
  }
  EmptyIterator.builtin$cls = "EmptyIterator";
  if (!"name" in EmptyIterator)
    EmptyIterator.name = "EmptyIterator";
  $desc = $collectedClasses.EmptyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmptyIterator.prototype = $desc;
  function FixedLengthListMixin() {
  }
  FixedLengthListMixin.builtin$cls = "FixedLengthListMixin";
  if (!"name" in FixedLengthListMixin)
    FixedLengthListMixin.name = "FixedLengthListMixin";
  $desc = $collectedClasses.FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedLengthListMixin.prototype = $desc;
  function UnmodifiableListMixin() {
  }
  UnmodifiableListMixin.builtin$cls = "UnmodifiableListMixin";
  if (!"name" in UnmodifiableListMixin)
    UnmodifiableListMixin.name = "UnmodifiableListMixin";
  $desc = $collectedClasses.UnmodifiableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListMixin.prototype = $desc;
  function UnmodifiableListBase() {
  }
  UnmodifiableListBase.builtin$cls = "UnmodifiableListBase";
  if (!"name" in UnmodifiableListBase)
    UnmodifiableListBase.name = "UnmodifiableListBase";
  $desc = $collectedClasses.UnmodifiableListBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListBase.prototype = $desc;
  function _AsyncError(error, stackTrace) {
    this.error = error;
    this.stackTrace = stackTrace;
  }
  _AsyncError.builtin$cls = "_AsyncError";
  if (!"name" in _AsyncError)
    _AsyncError.name = "_AsyncError";
  $desc = $collectedClasses._AsyncError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncError.prototype = $desc;
  _AsyncError.prototype.get$error = function(receiver) {
    return this.error;
  };
  _AsyncError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _BroadcastStream(_controller) {
    this._controller = _controller;
  }
  _BroadcastStream.builtin$cls = "_BroadcastStream";
  if (!"name" in _BroadcastStream)
    _BroadcastStream.name = "_BroadcastStream";
  $desc = $collectedClasses._BroadcastStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastStream.prototype = $desc;
  function _BroadcastSubscription(_eventState, _async$_next, _async$_previous, _controller, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._eventState = _eventState;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._controller = _controller;
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BroadcastSubscription.builtin$cls = "_BroadcastSubscription";
  if (!"name" in _BroadcastSubscription)
    _BroadcastSubscription.name = "_BroadcastSubscription";
  $desc = $collectedClasses._BroadcastSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastSubscription.prototype = $desc;
  _BroadcastSubscription.prototype.get$_async$_next = function() {
    return this._async$_next;
  };
  _BroadcastSubscription.prototype.set$_async$_next = function(v) {
    return this._async$_next = v;
  };
  _BroadcastSubscription.prototype.set$_async$_previous = function(v) {
    return this._async$_previous = v;
  };
  function BoundClosure$0(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$0.builtin$cls = "BoundClosure$0";
  $desc = $collectedClasses.BoundClosure$0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$0.prototype = $desc;
  function _BroadcastStreamController(_async$_next, _async$_previous) {
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
  }
  _BroadcastStreamController.builtin$cls = "_BroadcastStreamController";
  if (!"name" in _BroadcastStreamController)
    _BroadcastStreamController.name = "_BroadcastStreamController";
  $desc = $collectedClasses._BroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastStreamController.prototype = $desc;
  _BroadcastStreamController.prototype.set$_async$_next = function(v) {
    return this._async$_next = v;
  };
  _BroadcastStreamController.prototype.set$_async$_previous = function(v) {
    return this._async$_previous = v;
  };
  function BoundClosure$2(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$2.builtin$cls = "BoundClosure$2";
  $desc = $collectedClasses.BoundClosure$2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$2.prototype = $desc;
  function _SyncBroadcastStreamController(_onListen, _onCancel, _state, _async$_next, _async$_previous, _addStreamState, _doneFuture) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._state = _state;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._addStreamState = _addStreamState;
    this._doneFuture = _doneFuture;
  }
  _SyncBroadcastStreamController.builtin$cls = "_SyncBroadcastStreamController";
  if (!"name" in _SyncBroadcastStreamController)
    _SyncBroadcastStreamController.name = "_SyncBroadcastStreamController";
  $desc = $collectedClasses._SyncBroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController.prototype = $desc;
  function _SyncBroadcastStreamController__sendData_closure(this_0, data_1) {
    this.this_0 = this_0;
    this.data_1 = data_1;
  }
  _SyncBroadcastStreamController__sendData_closure.builtin$cls = "_SyncBroadcastStreamController__sendData_closure";
  if (!"name" in _SyncBroadcastStreamController__sendData_closure)
    _SyncBroadcastStreamController__sendData_closure.name = "_SyncBroadcastStreamController__sendData_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendData_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendData_closure.prototype = $desc;
  function _SyncBroadcastStreamController__sendError_closure(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _SyncBroadcastStreamController__sendError_closure.builtin$cls = "_SyncBroadcastStreamController__sendError_closure";
  if (!"name" in _SyncBroadcastStreamController__sendError_closure)
    _SyncBroadcastStreamController__sendError_closure.name = "_SyncBroadcastStreamController__sendError_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendError_closure.prototype = $desc;
  function _SyncBroadcastStreamController__sendDone_closure(this_0) {
    this.this_0 = this_0;
  }
  _SyncBroadcastStreamController__sendDone_closure.builtin$cls = "_SyncBroadcastStreamController__sendDone_closure";
  if (!"name" in _SyncBroadcastStreamController__sendDone_closure)
    _SyncBroadcastStreamController__sendDone_closure.name = "_SyncBroadcastStreamController__sendDone_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendDone_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendDone_closure.prototype = $desc;
  function _AsyncBroadcastStreamController(_onListen, _onCancel, _state, _async$_next, _async$_previous, _addStreamState, _doneFuture) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._state = _state;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._addStreamState = _addStreamState;
    this._doneFuture = _doneFuture;
  }
  _AsyncBroadcastStreamController.builtin$cls = "_AsyncBroadcastStreamController";
  if (!"name" in _AsyncBroadcastStreamController)
    _AsyncBroadcastStreamController.name = "_AsyncBroadcastStreamController";
  $desc = $collectedClasses._AsyncBroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncBroadcastStreamController.prototype = $desc;
  function Future() {
  }
  Future.builtin$cls = "Future";
  if (!"name" in Future)
    Future.name = "Future";
  $desc = $collectedClasses.Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future.prototype = $desc;
  function Future_wait_handleError(box_0) {
    this.box_0 = box_0;
  }
  Future_wait_handleError.builtin$cls = "Future_wait_handleError";
  if (!"name" in Future_wait_handleError)
    Future_wait_handleError.name = "Future_wait_handleError";
  $desc = $collectedClasses.Future_wait_handleError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_wait_handleError.prototype = $desc;
  function Future_wait_closure(box_0, pos_1) {
    this.box_0 = box_0;
    this.pos_1 = pos_1;
  }
  Future_wait_closure.builtin$cls = "Future_wait_closure";
  if (!"name" in Future_wait_closure)
    Future_wait_closure.name = "Future_wait_closure";
  $desc = $collectedClasses.Future_wait_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_wait_closure.prototype = $desc;
  function _Completer() {
  }
  _Completer.builtin$cls = "_Completer";
  if (!"name" in _Completer)
    _Completer.name = "_Completer";
  $desc = $collectedClasses._Completer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Completer.prototype = $desc;
  function _AsyncCompleter(future) {
    this.future = future;
  }
  _AsyncCompleter.builtin$cls = "_AsyncCompleter";
  if (!"name" in _AsyncCompleter)
    _AsyncCompleter.name = "_AsyncCompleter";
  $desc = $collectedClasses._AsyncCompleter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncCompleter.prototype = $desc;
  function _Future(_state, _zone, _resultOrListeners, _nextListener, _onValueCallback, _errorTestCallback, _onErrorCallback, _whenCompleteActionCallback) {
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
    this._nextListener = _nextListener;
    this._onValueCallback = _onValueCallback;
    this._errorTestCallback = _errorTestCallback;
    this._onErrorCallback = _onErrorCallback;
    this._whenCompleteActionCallback = _whenCompleteActionCallback;
  }
  _Future.builtin$cls = "_Future";
  if (!"name" in _Future)
    _Future.name = "_Future";
  $desc = $collectedClasses._Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future.prototype = $desc;
  _Future.prototype.get$_zone = function() {
    return this._zone;
  };
  _Future.prototype.get$_nextListener = function() {
    return this._nextListener;
  };
  function _Future__addListener_closure(this_0, listener_1) {
    this.this_0 = this_0;
    this.listener_1 = listener_1;
  }
  _Future__addListener_closure.builtin$cls = "_Future__addListener_closure";
  if (!"name" in _Future__addListener_closure)
    _Future__addListener_closure.name = "_Future__addListener_closure";
  $desc = $collectedClasses._Future__addListener_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__addListener_closure.prototype = $desc;
  function _Future__chainFutures_closure(target_0) {
    this.target_0 = target_0;
  }
  _Future__chainFutures_closure.builtin$cls = "_Future__chainFutures_closure";
  if (!"name" in _Future__chainFutures_closure)
    _Future__chainFutures_closure.name = "_Future__chainFutures_closure";
  $desc = $collectedClasses._Future__chainFutures_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainFutures_closure.prototype = $desc;
  function _Future__chainFutures_closure0(target_1) {
    this.target_1 = target_1;
  }
  _Future__chainFutures_closure0.builtin$cls = "_Future__chainFutures_closure0";
  if (!"name" in _Future__chainFutures_closure0)
    _Future__chainFutures_closure0.name = "_Future__chainFutures_closure0";
  $desc = $collectedClasses._Future__chainFutures_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainFutures_closure0.prototype = $desc;
  function _Future__asyncComplete_closure(this_0, value_1) {
    this.this_0 = this_0;
    this.value_1 = value_1;
  }
  _Future__asyncComplete_closure.builtin$cls = "_Future__asyncComplete_closure";
  if (!"name" in _Future__asyncComplete_closure)
    _Future__asyncComplete_closure.name = "_Future__asyncComplete_closure";
  $desc = $collectedClasses._Future__asyncComplete_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncComplete_closure.prototype = $desc;
  function _Future__asyncCompleteError_closure(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _Future__asyncCompleteError_closure.builtin$cls = "_Future__asyncCompleteError_closure";
  if (!"name" in _Future__asyncCompleteError_closure)
    _Future__asyncCompleteError_closure.name = "_Future__asyncCompleteError_closure";
  $desc = $collectedClasses._Future__asyncCompleteError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncCompleteError_closure.prototype = $desc;
  function _Future__propagateToListeners_closure(box_2, listener_3) {
    this.box_2 = box_2;
    this.listener_3 = listener_3;
  }
  _Future__propagateToListeners_closure.builtin$cls = "_Future__propagateToListeners_closure";
  if (!"name" in _Future__propagateToListeners_closure)
    _Future__propagateToListeners_closure.name = "_Future__propagateToListeners_closure";
  $desc = $collectedClasses._Future__propagateToListeners_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_closure.prototype = $desc;
  function _Future__propagateToListeners_closure0(box_2, box_1, hasError_4, listener_5) {
    this.box_2 = box_2;
    this.box_1 = box_1;
    this.hasError_4 = hasError_4;
    this.listener_5 = listener_5;
  }
  _Future__propagateToListeners_closure0.builtin$cls = "_Future__propagateToListeners_closure0";
  if (!"name" in _Future__propagateToListeners_closure0)
    _Future__propagateToListeners_closure0.name = "_Future__propagateToListeners_closure0";
  $desc = $collectedClasses._Future__propagateToListeners_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_closure0.prototype = $desc;
  function _Future__propagateToListeners__closure(box_2, listener_6) {
    this.box_2 = box_2;
    this.listener_6 = listener_6;
  }
  _Future__propagateToListeners__closure.builtin$cls = "_Future__propagateToListeners__closure";
  if (!"name" in _Future__propagateToListeners__closure)
    _Future__propagateToListeners__closure.name = "_Future__propagateToListeners__closure";
  $desc = $collectedClasses._Future__propagateToListeners__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners__closure.prototype = $desc;
  function _Future__propagateToListeners__closure0(box_0, listener_7) {
    this.box_0 = box_0;
    this.listener_7 = listener_7;
  }
  _Future__propagateToListeners__closure0.builtin$cls = "_Future__propagateToListeners__closure0";
  if (!"name" in _Future__propagateToListeners__closure0)
    _Future__propagateToListeners__closure0.name = "_Future__propagateToListeners__closure0";
  $desc = $collectedClasses._Future__propagateToListeners__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners__closure0.prototype = $desc;
  function Stream() {
  }
  Stream.builtin$cls = "Stream";
  if (!"name" in Stream)
    Stream.name = "Stream";
  $desc = $collectedClasses.Stream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream.prototype = $desc;
  function Stream_contains_closure(box_0, this_1, needle_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.needle_2 = needle_2;
    this.future_3 = future_3;
  }
  Stream_contains_closure.builtin$cls = "Stream_contains_closure";
  if (!"name" in Stream_contains_closure)
    Stream_contains_closure.name = "Stream_contains_closure";
  $desc = $collectedClasses.Stream_contains_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains_closure.prototype = $desc;
  function Stream_contains__closure(needle_4, element_5) {
    this.needle_4 = needle_4;
    this.element_5 = element_5;
  }
  Stream_contains__closure.builtin$cls = "Stream_contains__closure";
  if (!"name" in Stream_contains__closure)
    Stream_contains__closure.name = "Stream_contains__closure";
  $desc = $collectedClasses.Stream_contains__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains__closure.prototype = $desc;
  function Stream_contains__closure0(box_0, future_6) {
    this.box_0 = box_0;
    this.future_6 = future_6;
  }
  Stream_contains__closure0.builtin$cls = "Stream_contains__closure0";
  if (!"name" in Stream_contains__closure0)
    Stream_contains__closure0.name = "Stream_contains__closure0";
  $desc = $collectedClasses.Stream_contains__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains__closure0.prototype = $desc;
  function Stream_contains_closure0(future_7) {
    this.future_7 = future_7;
  }
  Stream_contains_closure0.builtin$cls = "Stream_contains_closure0";
  if (!"name" in Stream_contains_closure0)
    Stream_contains_closure0.name = "Stream_contains_closure0";
  $desc = $collectedClasses.Stream_contains_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains_closure0.prototype = $desc;
  function Stream_forEach_closure(box_0, this_1, action_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.action_2 = action_2;
    this.future_3 = future_3;
  }
  Stream_forEach_closure.builtin$cls = "Stream_forEach_closure";
  if (!"name" in Stream_forEach_closure)
    Stream_forEach_closure.name = "Stream_forEach_closure";
  $desc = $collectedClasses.Stream_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure.prototype = $desc;
  function Stream_forEach__closure(action_4, element_5) {
    this.action_4 = action_4;
    this.element_5 = element_5;
  }
  Stream_forEach__closure.builtin$cls = "Stream_forEach__closure";
  if (!"name" in Stream_forEach__closure)
    Stream_forEach__closure.name = "Stream_forEach__closure";
  $desc = $collectedClasses.Stream_forEach__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure.prototype = $desc;
  function Stream_forEach__closure0() {
  }
  Stream_forEach__closure0.builtin$cls = "Stream_forEach__closure0";
  if (!"name" in Stream_forEach__closure0)
    Stream_forEach__closure0.name = "Stream_forEach__closure0";
  $desc = $collectedClasses.Stream_forEach__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure0.prototype = $desc;
  function Stream_forEach_closure0(future_6) {
    this.future_6 = future_6;
  }
  Stream_forEach_closure0.builtin$cls = "Stream_forEach_closure0";
  if (!"name" in Stream_forEach_closure0)
    Stream_forEach_closure0.name = "Stream_forEach_closure0";
  $desc = $collectedClasses.Stream_forEach_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure0.prototype = $desc;
  function Stream_length_closure(box_0) {
    this.box_0 = box_0;
  }
  Stream_length_closure.builtin$cls = "Stream_length_closure";
  if (!"name" in Stream_length_closure)
    Stream_length_closure.name = "Stream_length_closure";
  $desc = $collectedClasses.Stream_length_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure.prototype = $desc;
  function Stream_length_closure0(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_length_closure0.builtin$cls = "Stream_length_closure0";
  if (!"name" in Stream_length_closure0)
    Stream_length_closure0.name = "Stream_length_closure0";
  $desc = $collectedClasses.Stream_length_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure0.prototype = $desc;
  function Stream_isEmpty_closure(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_isEmpty_closure.builtin$cls = "Stream_isEmpty_closure";
  if (!"name" in Stream_isEmpty_closure)
    Stream_isEmpty_closure.name = "Stream_isEmpty_closure";
  $desc = $collectedClasses.Stream_isEmpty_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_isEmpty_closure.prototype = $desc;
  function Stream_isEmpty_closure0(future_2) {
    this.future_2 = future_2;
  }
  Stream_isEmpty_closure0.builtin$cls = "Stream_isEmpty_closure0";
  if (!"name" in Stream_isEmpty_closure0)
    Stream_isEmpty_closure0.name = "Stream_isEmpty_closure0";
  $desc = $collectedClasses.Stream_isEmpty_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_isEmpty_closure0.prototype = $desc;
  function Stream_toList_closure(this_0, result_1) {
    this.this_0 = this_0;
    this.result_1 = result_1;
  }
  Stream_toList_closure.builtin$cls = "Stream_toList_closure";
  if (!"name" in Stream_toList_closure)
    Stream_toList_closure.name = "Stream_toList_closure";
  $desc = $collectedClasses.Stream_toList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_toList_closure.prototype = $desc;
  function Stream_toList_closure0(result_2, future_3) {
    this.result_2 = result_2;
    this.future_3 = future_3;
  }
  Stream_toList_closure0.builtin$cls = "Stream_toList_closure0";
  if (!"name" in Stream_toList_closure0)
    Stream_toList_closure0.name = "Stream_toList_closure0";
  $desc = $collectedClasses.Stream_toList_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_toList_closure0.prototype = $desc;
  function Stream_last_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  Stream_last_closure.builtin$cls = "Stream_last_closure";
  if (!"name" in Stream_last_closure)
    Stream_last_closure.name = "Stream_last_closure";
  $desc = $collectedClasses.Stream_last_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_last_closure.prototype = $desc;
  function Stream_last_closure0(box_0, future_2) {
    this.box_0 = box_0;
    this.future_2 = future_2;
  }
  Stream_last_closure0.builtin$cls = "Stream_last_closure0";
  if (!"name" in Stream_last_closure0)
    Stream_last_closure0.name = "Stream_last_closure0";
  $desc = $collectedClasses.Stream_last_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_last_closure0.prototype = $desc;
  function Stream_elementAt_closure(box_0, this_1, future_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.future_2 = future_2;
  }
  Stream_elementAt_closure.builtin$cls = "Stream_elementAt_closure";
  if (!"name" in Stream_elementAt_closure)
    Stream_elementAt_closure.name = "Stream_elementAt_closure";
  $desc = $collectedClasses.Stream_elementAt_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_elementAt_closure.prototype = $desc;
  function Stream_elementAt_closure0(box_0, future_3) {
    this.box_0 = box_0;
    this.future_3 = future_3;
  }
  Stream_elementAt_closure0.builtin$cls = "Stream_elementAt_closure0";
  if (!"name" in Stream_elementAt_closure0)
    Stream_elementAt_closure0.name = "Stream_elementAt_closure0";
  $desc = $collectedClasses.Stream_elementAt_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_elementAt_closure0.prototype = $desc;
  function StreamSubscription() {
  }
  StreamSubscription.builtin$cls = "StreamSubscription";
  if (!"name" in StreamSubscription)
    StreamSubscription.name = "StreamSubscription";
  $desc = $collectedClasses.StreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamSubscription.prototype = $desc;
  function _StreamController() {
  }
  _StreamController.builtin$cls = "_StreamController";
  if (!"name" in _StreamController)
    _StreamController.name = "_StreamController";
  $desc = $collectedClasses._StreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController.prototype = $desc;
  function _StreamController__subscribe_closure(this_0) {
    this.this_0 = this_0;
  }
  _StreamController__subscribe_closure.builtin$cls = "_StreamController__subscribe_closure";
  if (!"name" in _StreamController__subscribe_closure)
    _StreamController__subscribe_closure.name = "_StreamController__subscribe_closure";
  $desc = $collectedClasses._StreamController__subscribe_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__subscribe_closure.prototype = $desc;
  function _StreamController__recordCancel_complete(this_0) {
    this.this_0 = this_0;
  }
  _StreamController__recordCancel_complete.builtin$cls = "_StreamController__recordCancel_complete";
  if (!"name" in _StreamController__recordCancel_complete)
    _StreamController__recordCancel_complete.name = "_StreamController__recordCancel_complete";
  $desc = $collectedClasses._StreamController__recordCancel_complete;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__recordCancel_complete.prototype = $desc;
  function _SyncStreamControllerDispatch() {
  }
  _SyncStreamControllerDispatch.builtin$cls = "_SyncStreamControllerDispatch";
  if (!"name" in _SyncStreamControllerDispatch)
    _SyncStreamControllerDispatch.name = "_SyncStreamControllerDispatch";
  $desc = $collectedClasses._SyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncStreamControllerDispatch.prototype = $desc;
  function _AsyncStreamControllerDispatch() {
  }
  _AsyncStreamControllerDispatch.builtin$cls = "_AsyncStreamControllerDispatch";
  if (!"name" in _AsyncStreamControllerDispatch)
    _AsyncStreamControllerDispatch.name = "_AsyncStreamControllerDispatch";
  $desc = $collectedClasses._AsyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncStreamControllerDispatch.prototype = $desc;
  function _AsyncStreamController(_onListen, _onPause, _onResume, _onCancel, _varData, _state, _doneFuture) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _AsyncStreamController.builtin$cls = "_AsyncStreamController";
  if (!"name" in _AsyncStreamController)
    _AsyncStreamController.name = "_AsyncStreamController";
  $desc = $collectedClasses._AsyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncStreamController.prototype = $desc;
  _AsyncStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _AsyncStreamController.prototype.get$_onPause = function() {
    return this._onPause;
  };
  _AsyncStreamController.prototype.get$_onResume = function() {
    return this._onResume;
  };
  _AsyncStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  function _StreamController__AsyncStreamControllerDispatch() {
  }
  _StreamController__AsyncStreamControllerDispatch.builtin$cls = "_StreamController__AsyncStreamControllerDispatch";
  if (!"name" in _StreamController__AsyncStreamControllerDispatch)
    _StreamController__AsyncStreamControllerDispatch.name = "_StreamController__AsyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__AsyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__AsyncStreamControllerDispatch.prototype = $desc;
  function _SyncStreamController(_onListen, _onPause, _onResume, _onCancel, _varData, _state, _doneFuture) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _SyncStreamController.builtin$cls = "_SyncStreamController";
  if (!"name" in _SyncStreamController)
    _SyncStreamController.name = "_SyncStreamController";
  $desc = $collectedClasses._SyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncStreamController.prototype = $desc;
  _SyncStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _SyncStreamController.prototype.get$_onPause = function() {
    return this._onPause;
  };
  _SyncStreamController.prototype.get$_onResume = function() {
    return this._onResume;
  };
  _SyncStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  function _StreamController__SyncStreamControllerDispatch() {
  }
  _StreamController__SyncStreamControllerDispatch.builtin$cls = "_StreamController__SyncStreamControllerDispatch";
  if (!"name" in _StreamController__SyncStreamControllerDispatch)
    _StreamController__SyncStreamControllerDispatch.name = "_StreamController__SyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__SyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__SyncStreamControllerDispatch.prototype = $desc;
  function _NoCallbacks() {
  }
  _NoCallbacks.builtin$cls = "_NoCallbacks";
  if (!"name" in _NoCallbacks)
    _NoCallbacks.name = "_NoCallbacks";
  $desc = $collectedClasses._NoCallbacks;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NoCallbacks.prototype = $desc;
  function _NoCallbackAsyncStreamController(_varData, _state, _doneFuture) {
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _NoCallbackAsyncStreamController.builtin$cls = "_NoCallbackAsyncStreamController";
  if (!"name" in _NoCallbackAsyncStreamController)
    _NoCallbackAsyncStreamController.name = "_NoCallbackAsyncStreamController";
  $desc = $collectedClasses._NoCallbackAsyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NoCallbackAsyncStreamController.prototype = $desc;
  function _StreamController__AsyncStreamControllerDispatch0() {
  }
  _StreamController__AsyncStreamControllerDispatch0.builtin$cls = "_StreamController__AsyncStreamControllerDispatch0";
  if (!"name" in _StreamController__AsyncStreamControllerDispatch0)
    _StreamController__AsyncStreamControllerDispatch0.name = "_StreamController__AsyncStreamControllerDispatch0";
  $desc = $collectedClasses._StreamController__AsyncStreamControllerDispatch0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__AsyncStreamControllerDispatch0.prototype = $desc;
  function _NoCallbackSyncStreamController(_varData, _state, _doneFuture) {
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _NoCallbackSyncStreamController.builtin$cls = "_NoCallbackSyncStreamController";
  if (!"name" in _NoCallbackSyncStreamController)
    _NoCallbackSyncStreamController.name = "_NoCallbackSyncStreamController";
  $desc = $collectedClasses._NoCallbackSyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NoCallbackSyncStreamController.prototype = $desc;
  function _StreamController__SyncStreamControllerDispatch0() {
  }
  _StreamController__SyncStreamControllerDispatch0.builtin$cls = "_StreamController__SyncStreamControllerDispatch0";
  if (!"name" in _StreamController__SyncStreamControllerDispatch0)
    _StreamController__SyncStreamControllerDispatch0.name = "_StreamController__SyncStreamControllerDispatch0";
  $desc = $collectedClasses._StreamController__SyncStreamControllerDispatch0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__SyncStreamControllerDispatch0.prototype = $desc;
  function _ControllerStream(_controller) {
    this._controller = _controller;
  }
  _ControllerStream.builtin$cls = "_ControllerStream";
  if (!"name" in _ControllerStream)
    _ControllerStream.name = "_ControllerStream";
  $desc = $collectedClasses._ControllerStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerStream.prototype = $desc;
  function _ControllerSubscription(_controller, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._controller = _controller;
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _ControllerSubscription.builtin$cls = "_ControllerSubscription";
  if (!"name" in _ControllerSubscription)
    _ControllerSubscription.name = "_ControllerSubscription";
  $desc = $collectedClasses._ControllerSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerSubscription.prototype = $desc;
  _ControllerSubscription.prototype.get$_controller = function() {
    return this._controller;
  };
  function _EventSink() {
  }
  _EventSink.builtin$cls = "_EventSink";
  if (!"name" in _EventSink)
    _EventSink.name = "_EventSink";
  $desc = $collectedClasses._EventSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventSink.prototype = $desc;
  function _BufferingStreamSubscription(_async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BufferingStreamSubscription.builtin$cls = "_BufferingStreamSubscription";
  if (!"name" in _BufferingStreamSubscription)
    _BufferingStreamSubscription.name = "_BufferingStreamSubscription";
  $desc = $collectedClasses._BufferingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription.prototype = $desc;
  _BufferingStreamSubscription.prototype.get$_zone = function() {
    return this._zone;
  };
  function _BufferingStreamSubscription__sendError_sendError(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _BufferingStreamSubscription__sendError_sendError.builtin$cls = "_BufferingStreamSubscription__sendError_sendError";
  if (!"name" in _BufferingStreamSubscription__sendError_sendError)
    _BufferingStreamSubscription__sendError_sendError.name = "_BufferingStreamSubscription__sendError_sendError";
  $desc = $collectedClasses._BufferingStreamSubscription__sendError_sendError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendError_sendError.prototype = $desc;
  function _BufferingStreamSubscription__sendDone_sendDone(this_0) {
    this.this_0 = this_0;
  }
  _BufferingStreamSubscription__sendDone_sendDone.builtin$cls = "_BufferingStreamSubscription__sendDone_sendDone";
  if (!"name" in _BufferingStreamSubscription__sendDone_sendDone)
    _BufferingStreamSubscription__sendDone_sendDone.name = "_BufferingStreamSubscription__sendDone_sendDone";
  $desc = $collectedClasses._BufferingStreamSubscription__sendDone_sendDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendDone_sendDone.prototype = $desc;
  function _StreamImpl() {
  }
  _StreamImpl.builtin$cls = "_StreamImpl";
  if (!"name" in _StreamImpl)
    _StreamImpl.name = "_StreamImpl";
  $desc = $collectedClasses._StreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImpl.prototype = $desc;
  function _DelayedEvent(next) {
    this.next = next;
  }
  _DelayedEvent.builtin$cls = "_DelayedEvent";
  if (!"name" in _DelayedEvent)
    _DelayedEvent.name = "_DelayedEvent";
  $desc = $collectedClasses._DelayedEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedEvent.prototype = $desc;
  _DelayedEvent.prototype.get$next = function() {
    return this.next;
  };
  _DelayedEvent.prototype.set$next = function(v) {
    return this.next = v;
  };
  function _DelayedData(value, next) {
    this.value = value;
    this.next = next;
  }
  _DelayedData.builtin$cls = "_DelayedData";
  if (!"name" in _DelayedData)
    _DelayedData.name = "_DelayedData";
  $desc = $collectedClasses._DelayedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedData.prototype = $desc;
  function _DelayedError(error, stackTrace, next) {
    this.error = error;
    this.stackTrace = stackTrace;
    this.next = next;
  }
  _DelayedError.builtin$cls = "_DelayedError";
  if (!"name" in _DelayedError)
    _DelayedError.name = "_DelayedError";
  $desc = $collectedClasses._DelayedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedError.prototype = $desc;
  _DelayedError.prototype.get$error = function(receiver) {
    return this.error;
  };
  _DelayedError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _DelayedDone() {
  }
  _DelayedDone.builtin$cls = "_DelayedDone";
  if (!"name" in _DelayedDone)
    _DelayedDone.name = "_DelayedDone";
  $desc = $collectedClasses._DelayedDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedDone.prototype = $desc;
  function _PendingEvents() {
  }
  _PendingEvents.builtin$cls = "_PendingEvents";
  if (!"name" in _PendingEvents)
    _PendingEvents.name = "_PendingEvents";
  $desc = $collectedClasses._PendingEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents.prototype = $desc;
  function _PendingEvents_schedule_closure(this_0, dispatch_1) {
    this.this_0 = this_0;
    this.dispatch_1 = dispatch_1;
  }
  _PendingEvents_schedule_closure.builtin$cls = "_PendingEvents_schedule_closure";
  if (!"name" in _PendingEvents_schedule_closure)
    _PendingEvents_schedule_closure.name = "_PendingEvents_schedule_closure";
  $desc = $collectedClasses._PendingEvents_schedule_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents_schedule_closure.prototype = $desc;
  function _StreamImplEvents(firstPendingEvent, lastPendingEvent, _state) {
    this.firstPendingEvent = firstPendingEvent;
    this.lastPendingEvent = lastPendingEvent;
    this._state = _state;
  }
  _StreamImplEvents.builtin$cls = "_StreamImplEvents";
  if (!"name" in _StreamImplEvents)
    _StreamImplEvents.name = "_StreamImplEvents";
  $desc = $collectedClasses._StreamImplEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImplEvents.prototype = $desc;
  function _cancelAndError_closure(future_0, error_1, stackTrace_2) {
    this.future_0 = future_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _cancelAndError_closure.builtin$cls = "_cancelAndError_closure";
  if (!"name" in _cancelAndError_closure)
    _cancelAndError_closure.name = "_cancelAndError_closure";
  $desc = $collectedClasses._cancelAndError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndError_closure.prototype = $desc;
  function _cancelAndErrorClosure_closure(subscription_0, future_1) {
    this.subscription_0 = subscription_0;
    this.future_1 = future_1;
  }
  _cancelAndErrorClosure_closure.builtin$cls = "_cancelAndErrorClosure_closure";
  if (!"name" in _cancelAndErrorClosure_closure)
    _cancelAndErrorClosure_closure.name = "_cancelAndErrorClosure_closure";
  $desc = $collectedClasses._cancelAndErrorClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndErrorClosure_closure.prototype = $desc;
  function _cancelAndValue_closure(future_0, value_1) {
    this.future_0 = future_0;
    this.value_1 = value_1;
  }
  _cancelAndValue_closure.builtin$cls = "_cancelAndValue_closure";
  if (!"name" in _cancelAndValue_closure)
    _cancelAndValue_closure.name = "_cancelAndValue_closure";
  $desc = $collectedClasses._cancelAndValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndValue_closure.prototype = $desc;
  function _ForwardingStream() {
  }
  _ForwardingStream.builtin$cls = "_ForwardingStream";
  if (!"name" in _ForwardingStream)
    _ForwardingStream.name = "_ForwardingStream";
  $desc = $collectedClasses._ForwardingStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ForwardingStream.prototype = $desc;
  function _ForwardingStreamSubscription(_stream, _subscription, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._stream = _stream;
    this._subscription = _subscription;
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _ForwardingStreamSubscription.builtin$cls = "_ForwardingStreamSubscription";
  if (!"name" in _ForwardingStreamSubscription)
    _ForwardingStreamSubscription.name = "_ForwardingStreamSubscription";
  $desc = $collectedClasses._ForwardingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ForwardingStreamSubscription.prototype = $desc;
  function BoundClosure$20(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$20.builtin$cls = "BoundClosure$20";
  $desc = $collectedClasses.BoundClosure$20;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$20.prototype = $desc;
  function _MapStream(_transform, _async$_source) {
    this._transform = _transform;
    this._async$_source = _async$_source;
  }
  _MapStream.builtin$cls = "_MapStream";
  if (!"name" in _MapStream)
    _MapStream.name = "_MapStream";
  $desc = $collectedClasses._MapStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MapStream.prototype = $desc;
  function _BaseZone() {
  }
  _BaseZone.builtin$cls = "_BaseZone";
  if (!"name" in _BaseZone)
    _BaseZone.name = "_BaseZone";
  $desc = $collectedClasses._BaseZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone.prototype = $desc;
  function _BaseZone_bindCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindCallback_closure.builtin$cls = "_BaseZone_bindCallback_closure";
  if (!"name" in _BaseZone_bindCallback_closure)
    _BaseZone_bindCallback_closure.name = "_BaseZone_bindCallback_closure";
  $desc = $collectedClasses._BaseZone_bindCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure.prototype = $desc;
  function _BaseZone_bindCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindCallback_closure0.builtin$cls = "_BaseZone_bindCallback_closure0";
  if (!"name" in _BaseZone_bindCallback_closure0)
    _BaseZone_bindCallback_closure0.name = "_BaseZone_bindCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure0.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindUnaryCallback_closure.builtin$cls = "_BaseZone_bindUnaryCallback_closure";
  if (!"name" in _BaseZone_bindUnaryCallback_closure)
    _BaseZone_bindUnaryCallback_closure.name = "_BaseZone_bindUnaryCallback_closure";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindUnaryCallback_closure0.builtin$cls = "_BaseZone_bindUnaryCallback_closure0";
  if (!"name" in _BaseZone_bindUnaryCallback_closure0)
    _BaseZone_bindUnaryCallback_closure0.name = "_BaseZone_bindUnaryCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure0.prototype = $desc;
  function _rootHandleUncaughtError_closure(error_0, stackTrace_1) {
    this.error_0 = error_0;
    this.stackTrace_1 = stackTrace_1;
  }
  _rootHandleUncaughtError_closure.builtin$cls = "_rootHandleUncaughtError_closure";
  if (!"name" in _rootHandleUncaughtError_closure)
    _rootHandleUncaughtError_closure.name = "_rootHandleUncaughtError_closure";
  $desc = $collectedClasses._rootHandleUncaughtError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError_closure.prototype = $desc;
  function _rootHandleUncaughtError__closure(error_2, stackTrace_3) {
    this.error_2 = error_2;
    this.stackTrace_3 = stackTrace_3;
  }
  _rootHandleUncaughtError__closure.builtin$cls = "_rootHandleUncaughtError__closure";
  if (!"name" in _rootHandleUncaughtError__closure)
    _rootHandleUncaughtError__closure.name = "_rootHandleUncaughtError__closure";
  $desc = $collectedClasses._rootHandleUncaughtError__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError__closure.prototype = $desc;
  function _RootZone() {
  }
  _RootZone.builtin$cls = "_RootZone";
  if (!"name" in _RootZone)
    _RootZone.name = "_RootZone";
  $desc = $collectedClasses._RootZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone.prototype = $desc;
  function _HashMap(_collection$_length, _strings, _nums, _rest, _collection$_keys) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._collection$_keys = _collection$_keys;
  }
  _HashMap.builtin$cls = "_HashMap";
  if (!"name" in _HashMap)
    _HashMap.name = "_HashMap";
  $desc = $collectedClasses._HashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap.prototype = $desc;
  function _HashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _HashMap_values_closure.builtin$cls = "_HashMap_values_closure";
  if (!"name" in _HashMap_values_closure)
    _HashMap_values_closure.name = "_HashMap_values_closure";
  $desc = $collectedClasses._HashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap_values_closure.prototype = $desc;
  function HashMapKeyIterable(_map) {
    this._map = _map;
  }
  HashMapKeyIterable.builtin$cls = "HashMapKeyIterable";
  if (!"name" in HashMapKeyIterable)
    HashMapKeyIterable.name = "HashMapKeyIterable";
  $desc = $collectedClasses.HashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterable.prototype = $desc;
  function HashMapKeyIterator(_map, _collection$_keys, _offset, _collection$_current) {
    this._map = _map;
    this._collection$_keys = _collection$_keys;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashMapKeyIterator.builtin$cls = "HashMapKeyIterator";
  if (!"name" in HashMapKeyIterator)
    HashMapKeyIterator.name = "HashMapKeyIterator";
  $desc = $collectedClasses.HashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterator.prototype = $desc;
  function _LinkedHashMap(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashMap.builtin$cls = "_LinkedHashMap";
  if (!"name" in _LinkedHashMap)
    _LinkedHashMap.name = "_LinkedHashMap";
  $desc = $collectedClasses._LinkedHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap.prototype = $desc;
  function _LinkedHashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _LinkedHashMap_values_closure.builtin$cls = "_LinkedHashMap_values_closure";
  if (!"name" in _LinkedHashMap_values_closure)
    _LinkedHashMap_values_closure.name = "_LinkedHashMap_values_closure";
  $desc = $collectedClasses._LinkedHashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap_values_closure.prototype = $desc;
  function _LinkedIdentityHashMap(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedIdentityHashMap.builtin$cls = "_LinkedIdentityHashMap";
  if (!"name" in _LinkedIdentityHashMap)
    _LinkedIdentityHashMap.name = "_LinkedIdentityHashMap";
  $desc = $collectedClasses._LinkedIdentityHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedIdentityHashMap.prototype = $desc;
  function _LinkedCustomHashMap(_equals, _hashCode, _validKey, _collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._equals = _equals;
    this._hashCode = _hashCode;
    this._validKey = _validKey;
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedCustomHashMap.builtin$cls = "_LinkedCustomHashMap";
  if (!"name" in _LinkedCustomHashMap)
    _LinkedCustomHashMap.name = "_LinkedCustomHashMap";
  $desc = $collectedClasses._LinkedCustomHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedCustomHashMap.prototype = $desc;
  function _LinkedCustomHashMap_closure(K_0) {
    this.K_0 = K_0;
  }
  _LinkedCustomHashMap_closure.builtin$cls = "_LinkedCustomHashMap_closure";
  if (!"name" in _LinkedCustomHashMap_closure)
    _LinkedCustomHashMap_closure.name = "_LinkedCustomHashMap_closure";
  $desc = $collectedClasses._LinkedCustomHashMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedCustomHashMap_closure.prototype = $desc;
  function LinkedHashMapCell(_key, _collection$_value, _next, _previous) {
    this._key = _key;
    this._collection$_value = _collection$_value;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashMapCell.builtin$cls = "LinkedHashMapCell";
  if (!"name" in LinkedHashMapCell)
    LinkedHashMapCell.name = "LinkedHashMapCell";
  $desc = $collectedClasses.LinkedHashMapCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapCell.prototype = $desc;
  LinkedHashMapCell.prototype.get$_key = function(receiver) {
    return this._key;
  };
  LinkedHashMapCell.prototype.get$_collection$_value = function() {
    return this._collection$_value;
  };
  LinkedHashMapCell.prototype.set$_collection$_value = function(v) {
    return this._collection$_value = v;
  };
  LinkedHashMapCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashMapCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashMapCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashMapCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashMapKeyIterable(_map) {
    this._map = _map;
  }
  LinkedHashMapKeyIterable.builtin$cls = "LinkedHashMapKeyIterable";
  if (!"name" in LinkedHashMapKeyIterable)
    LinkedHashMapKeyIterable.name = "LinkedHashMapKeyIterable";
  $desc = $collectedClasses.LinkedHashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterable.prototype = $desc;
  function LinkedHashMapKeyIterator(_map, _modifications, _cell, _collection$_current) {
    this._map = _map;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashMapKeyIterator.builtin$cls = "LinkedHashMapKeyIterator";
  if (!"name" in LinkedHashMapKeyIterator)
    LinkedHashMapKeyIterator.name = "LinkedHashMapKeyIterator";
  $desc = $collectedClasses.LinkedHashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterator.prototype = $desc;
  function _HashSet() {
  }
  _HashSet.builtin$cls = "_HashSet";
  if (!"name" in _HashSet)
    _HashSet.name = "_HashSet";
  $desc = $collectedClasses._HashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSet.prototype = $desc;
  function _IdentityHashSet(_collection$_length, _strings, _nums, _rest, _elements) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._elements = _elements;
  }
  _IdentityHashSet.builtin$cls = "_IdentityHashSet";
  if (!"name" in _IdentityHashSet)
    _IdentityHashSet.name = "_IdentityHashSet";
  $desc = $collectedClasses._IdentityHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IdentityHashSet.prototype = $desc;
  function HashSetIterator(_set, _elements, _offset, _collection$_current) {
    this._set = _set;
    this._elements = _elements;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashSetIterator.builtin$cls = "HashSetIterator";
  if (!"name" in HashSetIterator)
    HashSetIterator.name = "HashSetIterator";
  $desc = $collectedClasses.HashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashSetIterator.prototype = $desc;
  function _LinkedHashSet(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashSet.builtin$cls = "_LinkedHashSet";
  if (!"name" in _LinkedHashSet)
    _LinkedHashSet.name = "_LinkedHashSet";
  $desc = $collectedClasses._LinkedHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashSet.prototype = $desc;
  function LinkedHashSetCell(_collection$_element, _next, _previous) {
    this._collection$_element = _collection$_element;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashSetCell.builtin$cls = "LinkedHashSetCell";
  if (!"name" in LinkedHashSetCell)
    LinkedHashSetCell.name = "LinkedHashSetCell";
  $desc = $collectedClasses.LinkedHashSetCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetCell.prototype = $desc;
  LinkedHashSetCell.prototype.get$_collection$_element = function() {
    return this._collection$_element;
  };
  LinkedHashSetCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashSetCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashSetCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashSetCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashSetIterator(_set, _modifications, _cell, _collection$_current) {
    this._set = _set;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashSetIterator.builtin$cls = "LinkedHashSetIterator";
  if (!"name" in LinkedHashSetIterator)
    LinkedHashSetIterator.name = "LinkedHashSetIterator";
  $desc = $collectedClasses.LinkedHashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetIterator.prototype = $desc;
  function _HashSetBase() {
  }
  _HashSetBase.builtin$cls = "_HashSetBase";
  if (!"name" in _HashSetBase)
    _HashSetBase.name = "_HashSetBase";
  $desc = $collectedClasses._HashSetBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSetBase.prototype = $desc;
  function IterableBase() {
  }
  IterableBase.builtin$cls = "IterableBase";
  if (!"name" in IterableBase)
    IterableBase.name = "IterableBase";
  $desc = $collectedClasses.IterableBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IterableBase.prototype = $desc;
  function ListBase() {
  }
  ListBase.builtin$cls = "ListBase";
  if (!"name" in ListBase)
    ListBase.name = "ListBase";
  $desc = $collectedClasses.ListBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListBase.prototype = $desc;
  function ListMixin() {
  }
  ListMixin.builtin$cls = "ListMixin";
  if (!"name" in ListMixin)
    ListMixin.name = "ListMixin";
  $desc = $collectedClasses.ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListMixin.prototype = $desc;
  function Maps_mapToString_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Maps_mapToString_closure.builtin$cls = "Maps_mapToString_closure";
  if (!"name" in Maps_mapToString_closure)
    Maps_mapToString_closure.name = "Maps_mapToString_closure";
  $desc = $collectedClasses.Maps_mapToString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Maps_mapToString_closure.prototype = $desc;
  function ListQueue(_table, _head, _tail, _modificationCount) {
    this._table = _table;
    this._head = _head;
    this._tail = _tail;
    this._modificationCount = _modificationCount;
  }
  ListQueue.builtin$cls = "ListQueue";
  if (!"name" in ListQueue)
    ListQueue.name = "ListQueue";
  $desc = $collectedClasses.ListQueue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListQueue.prototype = $desc;
  function _ListQueueIterator(_queue, _end, _modificationCount, _collection$_position, _collection$_current) {
    this._queue = _queue;
    this._end = _end;
    this._modificationCount = _modificationCount;
    this._collection$_position = _collection$_position;
    this._collection$_current = _collection$_current;
  }
  _ListQueueIterator.builtin$cls = "_ListQueueIterator";
  if (!"name" in _ListQueueIterator)
    _ListQueueIterator.name = "_ListQueueIterator";
  $desc = $collectedClasses._ListQueueIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ListQueueIterator.prototype = $desc;
  function _convertJsonToDart_closure() {
  }
  _convertJsonToDart_closure.builtin$cls = "_convertJsonToDart_closure";
  if (!"name" in _convertJsonToDart_closure)
    _convertJsonToDart_closure.name = "_convertJsonToDart_closure";
  $desc = $collectedClasses._convertJsonToDart_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertJsonToDart_closure.prototype = $desc;
  function _convertJsonToDart_walk(revive_0) {
    this.revive_0 = revive_0;
  }
  _convertJsonToDart_walk.builtin$cls = "_convertJsonToDart_walk";
  if (!"name" in _convertJsonToDart_walk)
    _convertJsonToDart_walk.name = "_convertJsonToDart_walk";
  $desc = $collectedClasses._convertJsonToDart_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertJsonToDart_walk.prototype = $desc;
  function Codec() {
  }
  Codec.builtin$cls = "Codec";
  if (!"name" in Codec)
    Codec.name = "Codec";
  $desc = $collectedClasses.Codec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Codec.prototype = $desc;
  function Converter() {
  }
  Converter.builtin$cls = "Converter";
  if (!"name" in Converter)
    Converter.name = "Converter";
  $desc = $collectedClasses.Converter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Converter.prototype = $desc;
  function Encoding() {
  }
  Encoding.builtin$cls = "Encoding";
  if (!"name" in Encoding)
    Encoding.name = "Encoding";
  $desc = $collectedClasses.Encoding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Encoding.prototype = $desc;
  function JsonUnsupportedObjectError(unsupportedObject, cause) {
    this.unsupportedObject = unsupportedObject;
    this.cause = cause;
  }
  JsonUnsupportedObjectError.builtin$cls = "JsonUnsupportedObjectError";
  if (!"name" in JsonUnsupportedObjectError)
    JsonUnsupportedObjectError.name = "JsonUnsupportedObjectError";
  $desc = $collectedClasses.JsonUnsupportedObjectError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonUnsupportedObjectError.prototype = $desc;
  function JsonCyclicError(unsupportedObject, cause) {
    this.unsupportedObject = unsupportedObject;
    this.cause = cause;
  }
  JsonCyclicError.builtin$cls = "JsonCyclicError";
  if (!"name" in JsonCyclicError)
    JsonCyclicError.name = "JsonCyclicError";
  $desc = $collectedClasses.JsonCyclicError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonCyclicError.prototype = $desc;
  function JsonCodec() {
  }
  JsonCodec.builtin$cls = "JsonCodec";
  if (!"name" in JsonCodec)
    JsonCodec.name = "JsonCodec";
  $desc = $collectedClasses.JsonCodec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonCodec.prototype = $desc;
  function JsonEncoder(_toEncodableFunction) {
    this._toEncodableFunction = _toEncodableFunction;
  }
  JsonEncoder.builtin$cls = "JsonEncoder";
  if (!"name" in JsonEncoder)
    JsonEncoder.name = "JsonEncoder";
  $desc = $collectedClasses.JsonEncoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonEncoder.prototype = $desc;
  function JsonDecoder(_reviver) {
    this._reviver = _reviver;
  }
  JsonDecoder.builtin$cls = "JsonDecoder";
  if (!"name" in JsonDecoder)
    JsonDecoder.name = "JsonDecoder";
  $desc = $collectedClasses.JsonDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonDecoder.prototype = $desc;
  function _JsonStringifier(toEncodable, sink, seen) {
    this.toEncodable = toEncodable;
    this.sink = sink;
    this.seen = seen;
  }
  _JsonStringifier.builtin$cls = "_JsonStringifier";
  if (!"name" in _JsonStringifier)
    _JsonStringifier.name = "_JsonStringifier";
  $desc = $collectedClasses._JsonStringifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsonStringifier.prototype = $desc;
  function _JsonStringifier_stringifyJsonValue_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  _JsonStringifier_stringifyJsonValue_closure.builtin$cls = "_JsonStringifier_stringifyJsonValue_closure";
  if (!"name" in _JsonStringifier_stringifyJsonValue_closure)
    _JsonStringifier_stringifyJsonValue_closure.name = "_JsonStringifier_stringifyJsonValue_closure";
  $desc = $collectedClasses._JsonStringifier_stringifyJsonValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsonStringifier_stringifyJsonValue_closure.prototype = $desc;
  function Utf8Codec(_allowMalformed) {
    this._allowMalformed = _allowMalformed;
  }
  Utf8Codec.builtin$cls = "Utf8Codec";
  if (!"name" in Utf8Codec)
    Utf8Codec.name = "Utf8Codec";
  $desc = $collectedClasses.Utf8Codec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Codec.prototype = $desc;
  function Utf8Encoder() {
  }
  Utf8Encoder.builtin$cls = "Utf8Encoder";
  if (!"name" in Utf8Encoder)
    Utf8Encoder.name = "Utf8Encoder";
  $desc = $collectedClasses.Utf8Encoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Encoder.prototype = $desc;
  function _Utf8Encoder(_carry, _bufferIndex, _buffer) {
    this._carry = _carry;
    this._bufferIndex = _bufferIndex;
    this._buffer = _buffer;
  }
  _Utf8Encoder.builtin$cls = "_Utf8Encoder";
  if (!"name" in _Utf8Encoder)
    _Utf8Encoder.name = "_Utf8Encoder";
  $desc = $collectedClasses._Utf8Encoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Encoder.prototype = $desc;
  function NoSuchMethodError_toString_closure(box_0) {
    this.box_0 = box_0;
  }
  NoSuchMethodError_toString_closure.builtin$cls = "NoSuchMethodError_toString_closure";
  if (!"name" in NoSuchMethodError_toString_closure)
    NoSuchMethodError_toString_closure.name = "NoSuchMethodError_toString_closure";
  $desc = $collectedClasses.NoSuchMethodError_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchMethodError_toString_closure.prototype = $desc;
  function Comparable() {
  }
  Comparable.builtin$cls = "Comparable";
  if (!"name" in Comparable)
    Comparable.name = "Comparable";
  $desc = $collectedClasses.Comparable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comparable.prototype = $desc;
  function DateTime(millisecondsSinceEpoch, isUtc) {
    this.millisecondsSinceEpoch = millisecondsSinceEpoch;
    this.isUtc = isUtc;
  }
  DateTime.builtin$cls = "DateTime";
  if (!"name" in DateTime)
    DateTime.name = "DateTime";
  $desc = $collectedClasses.DateTime;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime.prototype = $desc;
  DateTime.prototype.get$millisecondsSinceEpoch = function() {
    return this.millisecondsSinceEpoch;
  };
  function DateTime_toString_fourDigits() {
  }
  DateTime_toString_fourDigits.builtin$cls = "DateTime_toString_fourDigits";
  if (!"name" in DateTime_toString_fourDigits)
    DateTime_toString_fourDigits.name = "DateTime_toString_fourDigits";
  $desc = $collectedClasses.DateTime_toString_fourDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_toString_fourDigits.prototype = $desc;
  function DateTime_toString_threeDigits() {
  }
  DateTime_toString_threeDigits.builtin$cls = "DateTime_toString_threeDigits";
  if (!"name" in DateTime_toString_threeDigits)
    DateTime_toString_threeDigits.name = "DateTime_toString_threeDigits";
  $desc = $collectedClasses.DateTime_toString_threeDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_toString_threeDigits.prototype = $desc;
  function DateTime_toString_twoDigits() {
  }
  DateTime_toString_twoDigits.builtin$cls = "DateTime_toString_twoDigits";
  if (!"name" in DateTime_toString_twoDigits)
    DateTime_toString_twoDigits.name = "DateTime_toString_twoDigits";
  $desc = $collectedClasses.DateTime_toString_twoDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_toString_twoDigits.prototype = $desc;
  function Duration(_duration) {
    this._duration = _duration;
  }
  Duration.builtin$cls = "Duration";
  if (!"name" in Duration)
    Duration.name = "Duration";
  $desc = $collectedClasses.Duration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration.prototype = $desc;
  Duration.prototype.get$_duration = function() {
    return this._duration;
  };
  function Duration_toString_sixDigits() {
  }
  Duration_toString_sixDigits.builtin$cls = "Duration_toString_sixDigits";
  if (!"name" in Duration_toString_sixDigits)
    Duration_toString_sixDigits.name = "Duration_toString_sixDigits";
  $desc = $collectedClasses.Duration_toString_sixDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_sixDigits.prototype = $desc;
  function Duration_toString_twoDigits() {
  }
  Duration_toString_twoDigits.builtin$cls = "Duration_toString_twoDigits";
  if (!"name" in Duration_toString_twoDigits)
    Duration_toString_twoDigits.name = "Duration_toString_twoDigits";
  $desc = $collectedClasses.Duration_toString_twoDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_twoDigits.prototype = $desc;
  function Error() {
  }
  Error.builtin$cls = "Error";
  if (!"name" in Error)
    Error.name = "Error";
  $desc = $collectedClasses.Error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Error.prototype = $desc;
  function NullThrownError() {
  }
  NullThrownError.builtin$cls = "NullThrownError";
  if (!"name" in NullThrownError)
    NullThrownError.name = "NullThrownError";
  $desc = $collectedClasses.NullThrownError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullThrownError.prototype = $desc;
  function ArgumentError(message) {
    this.message = message;
  }
  ArgumentError.builtin$cls = "ArgumentError";
  if (!"name" in ArgumentError)
    ArgumentError.name = "ArgumentError";
  $desc = $collectedClasses.ArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ArgumentError.prototype = $desc;
  ArgumentError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function RangeError(message) {
    this.message = message;
  }
  RangeError.builtin$cls = "RangeError";
  if (!"name" in RangeError)
    RangeError.name = "RangeError";
  $desc = $collectedClasses.RangeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RangeError.prototype = $desc;
  function UnsupportedError(message) {
    this.message = message;
  }
  UnsupportedError.builtin$cls = "UnsupportedError";
  if (!"name" in UnsupportedError)
    UnsupportedError.name = "UnsupportedError";
  $desc = $collectedClasses.UnsupportedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnsupportedError.prototype = $desc;
  UnsupportedError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function UnimplementedError(message) {
    this.message = message;
  }
  UnimplementedError.builtin$cls = "UnimplementedError";
  if (!"name" in UnimplementedError)
    UnimplementedError.name = "UnimplementedError";
  $desc = $collectedClasses.UnimplementedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnimplementedError.prototype = $desc;
  UnimplementedError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function StateError(message) {
    this.message = message;
  }
  StateError.builtin$cls = "StateError";
  if (!"name" in StateError)
    StateError.name = "StateError";
  $desc = $collectedClasses.StateError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StateError.prototype = $desc;
  StateError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function ConcurrentModificationError(modifiedObject) {
    this.modifiedObject = modifiedObject;
  }
  ConcurrentModificationError.builtin$cls = "ConcurrentModificationError";
  if (!"name" in ConcurrentModificationError)
    ConcurrentModificationError.name = "ConcurrentModificationError";
  $desc = $collectedClasses.ConcurrentModificationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConcurrentModificationError.prototype = $desc;
  function StackOverflowError() {
  }
  StackOverflowError.builtin$cls = "StackOverflowError";
  if (!"name" in StackOverflowError)
    StackOverflowError.name = "StackOverflowError";
  $desc = $collectedClasses.StackOverflowError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackOverflowError.prototype = $desc;
  function CyclicInitializationError(variableName) {
    this.variableName = variableName;
  }
  CyclicInitializationError.builtin$cls = "CyclicInitializationError";
  if (!"name" in CyclicInitializationError)
    CyclicInitializationError.name = "CyclicInitializationError";
  $desc = $collectedClasses.CyclicInitializationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CyclicInitializationError.prototype = $desc;
  function _ExceptionImplementation(message) {
    this.message = message;
  }
  _ExceptionImplementation.builtin$cls = "_ExceptionImplementation";
  if (!"name" in _ExceptionImplementation)
    _ExceptionImplementation.name = "_ExceptionImplementation";
  $desc = $collectedClasses._ExceptionImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ExceptionImplementation.prototype = $desc;
  _ExceptionImplementation.prototype.get$message = function(receiver) {
    return this.message;
  };
  function FormatException(message) {
    this.message = message;
  }
  FormatException.builtin$cls = "FormatException";
  if (!"name" in FormatException)
    FormatException.name = "FormatException";
  $desc = $collectedClasses.FormatException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormatException.prototype = $desc;
  FormatException.prototype.get$message = function(receiver) {
    return this.message;
  };
  function IntegerDivisionByZeroException() {
  }
  IntegerDivisionByZeroException.builtin$cls = "IntegerDivisionByZeroException";
  if (!"name" in IntegerDivisionByZeroException)
    IntegerDivisionByZeroException.name = "IntegerDivisionByZeroException";
  $desc = $collectedClasses.IntegerDivisionByZeroException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IntegerDivisionByZeroException.prototype = $desc;
  function Expando(name) {
    this.name = name;
  }
  Expando.builtin$cls = "Expando";
  if (!"name" in Expando)
    Expando.name = "Expando";
  $desc = $collectedClasses.Expando;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Expando.prototype = $desc;
  Expando.prototype.get$name = function(receiver) {
    return this.name;
  };
  function Function() {
  }
  Function.builtin$cls = "Function";
  if (!"name" in Function)
    Function.name = "Function";
  $desc = $collectedClasses.Function;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Function.prototype = $desc;
  function Iterator() {
  }
  Iterator.builtin$cls = "Iterator";
  if (!"name" in Iterator)
    Iterator.name = "Iterator";
  $desc = $collectedClasses.Iterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterator.prototype = $desc;
  function Map() {
  }
  Map.builtin$cls = "Map";
  if (!"name" in Map)
    Map.name = "Map";
  $desc = $collectedClasses.Map;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Map.prototype = $desc;
  function Null() {
  }
  Null.builtin$cls = "Null";
  if (!"name" in Null)
    Null.name = "Null";
  $desc = $collectedClasses.Null;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Null.prototype = $desc;
  function Object() {
  }
  Object.builtin$cls = "Object";
  if (!"name" in Object)
    Object.name = "Object";
  $desc = $collectedClasses.Object;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object.prototype = $desc;
  function Match() {
  }
  Match.builtin$cls = "Match";
  if (!"name" in Match)
    Match.name = "Match";
  $desc = $collectedClasses.Match;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Match.prototype = $desc;
  function StackTrace() {
  }
  StackTrace.builtin$cls = "StackTrace";
  if (!"name" in StackTrace)
    StackTrace.name = "StackTrace";
  $desc = $collectedClasses.StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackTrace.prototype = $desc;
  function StringBuffer(_contents) {
    this._contents = _contents;
  }
  StringBuffer.builtin$cls = "StringBuffer";
  if (!"name" in StringBuffer)
    StringBuffer.name = "StringBuffer";
  $desc = $collectedClasses.StringBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringBuffer.prototype = $desc;
  StringBuffer.prototype.get$_contents = function() {
    return this._contents;
  };
  function Symbol() {
  }
  Symbol.builtin$cls = "Symbol";
  if (!"name" in Symbol)
    Symbol.name = "Symbol";
  $desc = $collectedClasses.Symbol;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Symbol.prototype = $desc;
  function Uri(_host, _port, _path, scheme, userInfo, query, fragment, _pathSegments, _queryParameters) {
    this._host = _host;
    this._port = _port;
    this._path = _path;
    this.scheme = scheme;
    this.userInfo = userInfo;
    this.query = query;
    this.fragment = fragment;
    this._pathSegments = _pathSegments;
    this._queryParameters = _queryParameters;
  }
  Uri.builtin$cls = "Uri";
  if (!"name" in Uri)
    Uri.name = "Uri";
  $desc = $collectedClasses.Uri;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri.prototype = $desc;
  function Uri__makeScheme_isSchemeLowerCharacter() {
  }
  Uri__makeScheme_isSchemeLowerCharacter.builtin$cls = "Uri__makeScheme_isSchemeLowerCharacter";
  if (!"name" in Uri__makeScheme_isSchemeLowerCharacter)
    Uri__makeScheme_isSchemeLowerCharacter.name = "Uri__makeScheme_isSchemeLowerCharacter";
  $desc = $collectedClasses.Uri__makeScheme_isSchemeLowerCharacter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makeScheme_isSchemeLowerCharacter.prototype = $desc;
  function Uri__makeScheme_isSchemeCharacter() {
  }
  Uri__makeScheme_isSchemeCharacter.builtin$cls = "Uri__makeScheme_isSchemeCharacter";
  if (!"name" in Uri__makeScheme_isSchemeCharacter)
    Uri__makeScheme_isSchemeCharacter.name = "Uri__makeScheme_isSchemeCharacter";
  $desc = $collectedClasses.Uri__makeScheme_isSchemeCharacter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makeScheme_isSchemeCharacter.prototype = $desc;
  function Uri__makePath_closure() {
  }
  Uri__makePath_closure.builtin$cls = "Uri__makePath_closure";
  if (!"name" in Uri__makePath_closure)
    Uri__makePath_closure.name = "Uri__makePath_closure";
  $desc = $collectedClasses.Uri__makePath_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makePath_closure.prototype = $desc;
  function Uri__makeQuery_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Uri__makeQuery_closure.builtin$cls = "Uri__makeQuery_closure";
  if (!"name" in Uri__makeQuery_closure)
    Uri__makeQuery_closure.name = "Uri__makeQuery_closure";
  $desc = $collectedClasses.Uri__makeQuery_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makeQuery_closure.prototype = $desc;
  function Uri__normalize_isNormalizedHexDigit() {
  }
  Uri__normalize_isNormalizedHexDigit.builtin$cls = "Uri__normalize_isNormalizedHexDigit";
  if (!"name" in Uri__normalize_isNormalizedHexDigit)
    Uri__normalize_isNormalizedHexDigit.name = "Uri__normalize_isNormalizedHexDigit";
  $desc = $collectedClasses.Uri__normalize_isNormalizedHexDigit;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_isNormalizedHexDigit.prototype = $desc;
  function Uri__normalize_isLowerCaseHexDigit() {
  }
  Uri__normalize_isLowerCaseHexDigit.builtin$cls = "Uri__normalize_isLowerCaseHexDigit";
  if (!"name" in Uri__normalize_isLowerCaseHexDigit)
    Uri__normalize_isLowerCaseHexDigit.name = "Uri__normalize_isLowerCaseHexDigit";
  $desc = $collectedClasses.Uri__normalize_isLowerCaseHexDigit;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_isLowerCaseHexDigit.prototype = $desc;
  function Uri__normalize_isUnreserved() {
  }
  Uri__normalize_isUnreserved.builtin$cls = "Uri__normalize_isUnreserved";
  if (!"name" in Uri__normalize_isUnreserved)
    Uri__normalize_isUnreserved.name = "Uri__normalize_isUnreserved";
  $desc = $collectedClasses.Uri__normalize_isUnreserved;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_isUnreserved.prototype = $desc;
  function Uri__normalize_normalizeHexDigit(component_1, isNormalizedHexDigit_2, isLowerCaseHexDigit_3) {
    this.component_1 = component_1;
    this.isNormalizedHexDigit_2 = isNormalizedHexDigit_2;
    this.isLowerCaseHexDigit_3 = isLowerCaseHexDigit_3;
  }
  Uri__normalize_normalizeHexDigit.builtin$cls = "Uri__normalize_normalizeHexDigit";
  if (!"name" in Uri__normalize_normalizeHexDigit)
    Uri__normalize_normalizeHexDigit.name = "Uri__normalize_normalizeHexDigit";
  $desc = $collectedClasses.Uri__normalize_normalizeHexDigit;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_normalizeHexDigit.prototype = $desc;
  function Uri__normalize_decodeHexDigitPair(component_4) {
    this.component_4 = component_4;
  }
  Uri__normalize_decodeHexDigitPair.builtin$cls = "Uri__normalize_decodeHexDigitPair";
  if (!"name" in Uri__normalize_decodeHexDigitPair)
    Uri__normalize_decodeHexDigitPair.name = "Uri__normalize_decodeHexDigitPair";
  $desc = $collectedClasses.Uri__normalize_decodeHexDigitPair;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_decodeHexDigitPair.prototype = $desc;
  function Uri__normalize_fillResult(box_0, component_5) {
    this.box_0 = box_0;
    this.component_5 = component_5;
  }
  Uri__normalize_fillResult.builtin$cls = "Uri__normalize_fillResult";
  if (!"name" in Uri__normalize_fillResult)
    Uri__normalize_fillResult.name = "Uri__normalize_fillResult";
  $desc = $collectedClasses.Uri__normalize_fillResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_fillResult.prototype = $desc;
  function Uri_hashCode_combine() {
  }
  Uri_hashCode_combine.builtin$cls = "Uri_hashCode_combine";
  if (!"name" in Uri_hashCode_combine)
    Uri_hashCode_combine.name = "Uri_hashCode_combine";
  $desc = $collectedClasses.Uri_hashCode_combine;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_hashCode_combine.prototype = $desc;
  function Uri_parseIPv4Address_error() {
  }
  Uri_parseIPv4Address_error.builtin$cls = "Uri_parseIPv4Address_error";
  if (!"name" in Uri_parseIPv4Address_error)
    Uri_parseIPv4Address_error.name = "Uri_parseIPv4Address_error";
  $desc = $collectedClasses.Uri_parseIPv4Address_error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv4Address_error.prototype = $desc;
  function Uri_parseIPv4Address_closure(error_0) {
    this.error_0 = error_0;
  }
  Uri_parseIPv4Address_closure.builtin$cls = "Uri_parseIPv4Address_closure";
  if (!"name" in Uri_parseIPv4Address_closure)
    Uri_parseIPv4Address_closure.name = "Uri_parseIPv4Address_closure";
  $desc = $collectedClasses.Uri_parseIPv4Address_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv4Address_closure.prototype = $desc;
  function Uri_parseIPv6Address_error() {
  }
  Uri_parseIPv6Address_error.builtin$cls = "Uri_parseIPv6Address_error";
  if (!"name" in Uri_parseIPv6Address_error)
    Uri_parseIPv6Address_error.name = "Uri_parseIPv6Address_error";
  $desc = $collectedClasses.Uri_parseIPv6Address_error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv6Address_error.prototype = $desc;
  function Uri_parseIPv6Address_parseHex(host_0, error_1) {
    this.host_0 = host_0;
    this.error_1 = error_1;
  }
  Uri_parseIPv6Address_parseHex.builtin$cls = "Uri_parseIPv6Address_parseHex";
  if (!"name" in Uri_parseIPv6Address_parseHex)
    Uri_parseIPv6Address_parseHex.name = "Uri_parseIPv6Address_parseHex";
  $desc = $collectedClasses.Uri_parseIPv6Address_parseHex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv6Address_parseHex.prototype = $desc;
  function Uri_parseIPv6Address_closure(parts_2) {
    this.parts_2 = parts_2;
  }
  Uri_parseIPv6Address_closure.builtin$cls = "Uri_parseIPv6Address_closure";
  if (!"name" in Uri_parseIPv6Address_closure)
    Uri_parseIPv6Address_closure.name = "Uri_parseIPv6Address_closure";
  $desc = $collectedClasses.Uri_parseIPv6Address_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv6Address_closure.prototype = $desc;
  function Uri__uriEncode_byteToHex() {
  }
  Uri__uriEncode_byteToHex.builtin$cls = "Uri__uriEncode_byteToHex";
  if (!"name" in Uri__uriEncode_byteToHex)
    Uri__uriEncode_byteToHex.name = "Uri__uriEncode_byteToHex";
  $desc = $collectedClasses.Uri__uriEncode_byteToHex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__uriEncode_byteToHex.prototype = $desc;
  function Console() {
  }
  Console.builtin$cls = "Console";
  if (!"name" in Console)
    Console.name = "Console";
  $desc = $collectedClasses.Console;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Console.prototype = $desc;
  function Interceptor_CssStyleDeclarationBase() {
  }
  Interceptor_CssStyleDeclarationBase.builtin$cls = "Interceptor_CssStyleDeclarationBase";
  if (!"name" in Interceptor_CssStyleDeclarationBase)
    Interceptor_CssStyleDeclarationBase.name = "Interceptor_CssStyleDeclarationBase";
  $desc = $collectedClasses.Interceptor_CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_CssStyleDeclarationBase.prototype = $desc;
  function _CssStyleDeclarationSet(_elementIterable, _elementCssStyleDeclarationSetIterable) {
    this._elementIterable = _elementIterable;
    this._elementCssStyleDeclarationSetIterable = _elementCssStyleDeclarationSetIterable;
  }
  _CssStyleDeclarationSet.builtin$cls = "_CssStyleDeclarationSet";
  if (!"name" in _CssStyleDeclarationSet)
    _CssStyleDeclarationSet.name = "_CssStyleDeclarationSet";
  $desc = $collectedClasses._CssStyleDeclarationSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CssStyleDeclarationSet.prototype = $desc;
  function Object_CssStyleDeclarationBase() {
  }
  Object_CssStyleDeclarationBase.builtin$cls = "Object_CssStyleDeclarationBase";
  if (!"name" in Object_CssStyleDeclarationBase)
    Object_CssStyleDeclarationBase.name = "Object_CssStyleDeclarationBase";
  $desc = $collectedClasses.Object_CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object_CssStyleDeclarationBase.prototype = $desc;
  function _CssStyleDeclarationSet_closure() {
  }
  _CssStyleDeclarationSet_closure.builtin$cls = "_CssStyleDeclarationSet_closure";
  if (!"name" in _CssStyleDeclarationSet_closure)
    _CssStyleDeclarationSet_closure.name = "_CssStyleDeclarationSet_closure";
  $desc = $collectedClasses._CssStyleDeclarationSet_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CssStyleDeclarationSet_closure.prototype = $desc;
  function _CssStyleDeclarationSet_setProperty_closure(propertyName_0, value_1, priority_2) {
    this.propertyName_0 = propertyName_0;
    this.value_1 = value_1;
    this.priority_2 = priority_2;
  }
  _CssStyleDeclarationSet_setProperty_closure.builtin$cls = "_CssStyleDeclarationSet_setProperty_closure";
  if (!"name" in _CssStyleDeclarationSet_setProperty_closure)
    _CssStyleDeclarationSet_setProperty_closure.name = "_CssStyleDeclarationSet_setProperty_closure";
  $desc = $collectedClasses._CssStyleDeclarationSet_setProperty_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CssStyleDeclarationSet_setProperty_closure.prototype = $desc;
  function CssStyleDeclarationBase() {
  }
  CssStyleDeclarationBase.builtin$cls = "CssStyleDeclarationBase";
  if (!"name" in CssStyleDeclarationBase)
    CssStyleDeclarationBase.name = "CssStyleDeclarationBase";
  $desc = $collectedClasses.CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclarationBase.prototype = $desc;
  function _ChildrenElementList(_element, _childElements) {
    this._element = _element;
    this._childElements = _childElements;
  }
  _ChildrenElementList.builtin$cls = "_ChildrenElementList";
  if (!"name" in _ChildrenElementList)
    _ChildrenElementList.name = "_ChildrenElementList";
  $desc = $collectedClasses._ChildrenElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ChildrenElementList.prototype = $desc;
  function _FrozenElementList(_nodeList, _elementList) {
    this._nodeList = _nodeList;
    this._elementList = _elementList;
  }
  _FrozenElementList.builtin$cls = "_FrozenElementList";
  if (!"name" in _FrozenElementList)
    _FrozenElementList.name = "_FrozenElementList";
  $desc = $collectedClasses._FrozenElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList.prototype = $desc;
  function _FrozenElementList$_wrap_closure() {
  }
  _FrozenElementList$_wrap_closure.builtin$cls = "_FrozenElementList$_wrap_closure";
  if (!"name" in _FrozenElementList$_wrap_closure)
    _FrozenElementList$_wrap_closure.name = "_FrozenElementList$_wrap_closure";
  $desc = $collectedClasses._FrozenElementList$_wrap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList$_wrap_closure.prototype = $desc;
  function Element_Element$html_closure() {
  }
  Element_Element$html_closure.builtin$cls = "Element_Element$html_closure";
  if (!"name" in Element_Element$html_closure)
    Element_Element$html_closure.name = "Element_Element$html_closure";
  $desc = $collectedClasses.Element_Element$html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element_Element$html_closure.prototype = $desc;
  function Interceptor_ListMixin() {
  }
  Interceptor_ListMixin.builtin$cls = "Interceptor_ListMixin";
  if (!"name" in Interceptor_ListMixin)
    Interceptor_ListMixin.name = "Interceptor_ListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin() {
  }
  Interceptor_ListMixin_ImmutableListMixin.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin)
    Interceptor_ListMixin_ImmutableListMixin.name = "Interceptor_ListMixin_ImmutableListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin.prototype = $desc;
  function HttpRequest_getString_closure() {
  }
  HttpRequest_getString_closure.builtin$cls = "HttpRequest_getString_closure";
  if (!"name" in HttpRequest_getString_closure)
    HttpRequest_getString_closure.name = "HttpRequest_getString_closure";
  $desc = $collectedClasses.HttpRequest_getString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_getString_closure.prototype = $desc;
  function HttpRequest_request_closure0(xhr_0) {
    this.xhr_0 = xhr_0;
  }
  HttpRequest_request_closure0.builtin$cls = "HttpRequest_request_closure0";
  if (!"name" in HttpRequest_request_closure0)
    HttpRequest_request_closure0.name = "HttpRequest_request_closure0";
  $desc = $collectedClasses.HttpRequest_request_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_request_closure0.prototype = $desc;
  function HttpRequest_request_closure(completer_1, xhr_2) {
    this.completer_1 = completer_1;
    this.xhr_2 = xhr_2;
  }
  HttpRequest_request_closure.builtin$cls = "HttpRequest_request_closure";
  if (!"name" in HttpRequest_request_closure)
    HttpRequest_request_closure.name = "HttpRequest_request_closure";
  $desc = $collectedClasses.HttpRequest_request_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_request_closure.prototype = $desc;
  function _ChildNodeListLazy(_this) {
    this._this = _this;
  }
  _ChildNodeListLazy.builtin$cls = "_ChildNodeListLazy";
  if (!"name" in _ChildNodeListLazy)
    _ChildNodeListLazy.name = "_ChildNodeListLazy";
  $desc = $collectedClasses._ChildNodeListLazy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ChildNodeListLazy.prototype = $desc;
  function Interceptor_ListMixin0() {
  }
  Interceptor_ListMixin0.builtin$cls = "Interceptor_ListMixin0";
  if (!"name" in Interceptor_ListMixin0)
    Interceptor_ListMixin0.name = "Interceptor_ListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin0.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin0() {
  }
  Interceptor_ListMixin_ImmutableListMixin0.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin0";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin0)
    Interceptor_ListMixin_ImmutableListMixin0.name = "Interceptor_ListMixin_ImmutableListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin0.prototype = $desc;
  function Storage_keys_closure(keys_0) {
    this.keys_0 = keys_0;
  }
  Storage_keys_closure.builtin$cls = "Storage_keys_closure";
  if (!"name" in Storage_keys_closure)
    Storage_keys_closure.name = "Storage_keys_closure";
  $desc = $collectedClasses.Storage_keys_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Storage_keys_closure.prototype = $desc;
  function Storage_values_closure(values_0) {
    this.values_0 = values_0;
  }
  Storage_values_closure.builtin$cls = "Storage_values_closure";
  if (!"name" in Storage_values_closure)
    Storage_values_closure.name = "Storage_values_closure";
  $desc = $collectedClasses.Storage_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Storage_values_closure.prototype = $desc;
  function Interceptor_ListMixin1() {
  }
  Interceptor_ListMixin1.builtin$cls = "Interceptor_ListMixin1";
  if (!"name" in Interceptor_ListMixin1)
    Interceptor_ListMixin1.name = "Interceptor_ListMixin1";
  $desc = $collectedClasses.Interceptor_ListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin1.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin1() {
  }
  Interceptor_ListMixin_ImmutableListMixin1.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin1";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin1)
    Interceptor_ListMixin_ImmutableListMixin1.name = "Interceptor_ListMixin_ImmutableListMixin1";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin1.prototype = $desc;
  function _BeforeUnloadEvent(_returnValue, wrapped) {
    this._returnValue = _returnValue;
    this.wrapped = wrapped;
  }
  _BeforeUnloadEvent.builtin$cls = "_BeforeUnloadEvent";
  if (!"name" in _BeforeUnloadEvent)
    _BeforeUnloadEvent.name = "_BeforeUnloadEvent";
  $desc = $collectedClasses._BeforeUnloadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BeforeUnloadEvent.prototype = $desc;
  function _BeforeUnloadEventStreamProvider(_eventType) {
    this._eventType = _eventType;
  }
  _BeforeUnloadEventStreamProvider.builtin$cls = "_BeforeUnloadEventStreamProvider";
  if (!"name" in _BeforeUnloadEventStreamProvider)
    _BeforeUnloadEventStreamProvider.name = "_BeforeUnloadEventStreamProvider";
  $desc = $collectedClasses._BeforeUnloadEventStreamProvider;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BeforeUnloadEventStreamProvider.prototype = $desc;
  function _BeforeUnloadEventStreamProvider_forTarget_closure(controller_0) {
    this.controller_0 = controller_0;
  }
  _BeforeUnloadEventStreamProvider_forTarget_closure.builtin$cls = "_BeforeUnloadEventStreamProvider_forTarget_closure";
  if (!"name" in _BeforeUnloadEventStreamProvider_forTarget_closure)
    _BeforeUnloadEventStreamProvider_forTarget_closure.name = "_BeforeUnloadEventStreamProvider_forTarget_closure";
  $desc = $collectedClasses._BeforeUnloadEventStreamProvider_forTarget_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BeforeUnloadEventStreamProvider_forTarget_closure.prototype = $desc;
  function Interceptor_ListMixin2() {
  }
  Interceptor_ListMixin2.builtin$cls = "Interceptor_ListMixin2";
  if (!"name" in Interceptor_ListMixin2)
    Interceptor_ListMixin2.name = "Interceptor_ListMixin2";
  $desc = $collectedClasses.Interceptor_ListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin2.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin2() {
  }
  Interceptor_ListMixin_ImmutableListMixin2.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin2";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin2)
    Interceptor_ListMixin_ImmutableListMixin2.name = "Interceptor_ListMixin_ImmutableListMixin2";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin2.prototype = $desc;
  function _AttributeMap() {
  }
  _AttributeMap.builtin$cls = "_AttributeMap";
  if (!"name" in _AttributeMap)
    _AttributeMap.name = "_AttributeMap";
  $desc = $collectedClasses._AttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeMap.prototype = $desc;
  function _ElementAttributeMap(_element) {
    this._element = _element;
  }
  _ElementAttributeMap.builtin$cls = "_ElementAttributeMap";
  if (!"name" in _ElementAttributeMap)
    _ElementAttributeMap.name = "_ElementAttributeMap";
  $desc = $collectedClasses._ElementAttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementAttributeMap.prototype = $desc;
  function _ElementCssClassSet(_element) {
    this._element = _element;
  }
  _ElementCssClassSet.builtin$cls = "_ElementCssClassSet";
  if (!"name" in _ElementCssClassSet)
    _ElementCssClassSet.name = "_ElementCssClassSet";
  $desc = $collectedClasses._ElementCssClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementCssClassSet.prototype = $desc;
  function EventStreamProvider(_eventType) {
    this._eventType = _eventType;
  }
  EventStreamProvider.builtin$cls = "EventStreamProvider";
  if (!"name" in EventStreamProvider)
    EventStreamProvider.name = "EventStreamProvider";
  $desc = $collectedClasses.EventStreamProvider;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventStreamProvider.prototype = $desc;
  function _EventStream(_target, _eventType, _useCapture) {
    this._target = _target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _EventStream.builtin$cls = "_EventStream";
  if (!"name" in _EventStream)
    _EventStream.name = "_EventStream";
  $desc = $collectedClasses._EventStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStream.prototype = $desc;
  function _ElementEventStreamImpl(_target, _eventType, _useCapture) {
    this._target = _target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _ElementEventStreamImpl.builtin$cls = "_ElementEventStreamImpl";
  if (!"name" in _ElementEventStreamImpl)
    _ElementEventStreamImpl.name = "_ElementEventStreamImpl";
  $desc = $collectedClasses._ElementEventStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementEventStreamImpl.prototype = $desc;
  function _ElementListEventStreamImpl(_targetList, _useCapture, _eventType) {
    this._targetList = _targetList;
    this._useCapture = _useCapture;
    this._eventType = _eventType;
  }
  _ElementListEventStreamImpl.builtin$cls = "_ElementListEventStreamImpl";
  if (!"name" in _ElementListEventStreamImpl)
    _ElementListEventStreamImpl.name = "_ElementListEventStreamImpl";
  $desc = $collectedClasses._ElementListEventStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementListEventStreamImpl.prototype = $desc;
  function _EventStreamSubscription(_pauseCount, _target, _eventType, _onData, _useCapture) {
    this._pauseCount = _pauseCount;
    this._target = _target;
    this._eventType = _eventType;
    this._onData = _onData;
    this._useCapture = _useCapture;
  }
  _EventStreamSubscription.builtin$cls = "_EventStreamSubscription";
  if (!"name" in _EventStreamSubscription)
    _EventStreamSubscription.name = "_EventStreamSubscription";
  $desc = $collectedClasses._EventStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStreamSubscription.prototype = $desc;
  function _StreamPool(_html$_controller, _subscriptions) {
    this._html$_controller = _html$_controller;
    this._subscriptions = _subscriptions;
  }
  _StreamPool.builtin$cls = "_StreamPool";
  if (!"name" in _StreamPool)
    _StreamPool.name = "_StreamPool";
  $desc = $collectedClasses._StreamPool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamPool.prototype = $desc;
  function _StreamPool_add_closure(this_0, stream_1) {
    this.this_0 = this_0;
    this.stream_1 = stream_1;
  }
  _StreamPool_add_closure.builtin$cls = "_StreamPool_add_closure";
  if (!"name" in _StreamPool_add_closure)
    _StreamPool_add_closure.name = "_StreamPool_add_closure";
  $desc = $collectedClasses._StreamPool_add_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamPool_add_closure.prototype = $desc;
  function _CustomEventStreamProvider(_eventTypeGetter) {
    this._eventTypeGetter = _eventTypeGetter;
  }
  _CustomEventStreamProvider.builtin$cls = "_CustomEventStreamProvider";
  if (!"name" in _CustomEventStreamProvider)
    _CustomEventStreamProvider.name = "_CustomEventStreamProvider";
  $desc = $collectedClasses._CustomEventStreamProvider;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomEventStreamProvider.prototype = $desc;
  function _Html5NodeValidator(uriPolicy) {
    this.uriPolicy = uriPolicy;
  }
  _Html5NodeValidator.builtin$cls = "_Html5NodeValidator";
  if (!"name" in _Html5NodeValidator)
    _Html5NodeValidator.name = "_Html5NodeValidator";
  $desc = $collectedClasses._Html5NodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Html5NodeValidator.prototype = $desc;
  _Html5NodeValidator.prototype.get$uriPolicy = function() {
    return this.uriPolicy;
  };
  function ImmutableListMixin() {
  }
  ImmutableListMixin.builtin$cls = "ImmutableListMixin";
  if (!"name" in ImmutableListMixin)
    ImmutableListMixin.name = "ImmutableListMixin";
  $desc = $collectedClasses.ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImmutableListMixin.prototype = $desc;
  function NodeValidatorBuilder(_validators) {
    this._validators = _validators;
  }
  NodeValidatorBuilder.builtin$cls = "NodeValidatorBuilder";
  if (!"name" in NodeValidatorBuilder)
    NodeValidatorBuilder.name = "NodeValidatorBuilder";
  $desc = $collectedClasses.NodeValidatorBuilder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder.prototype = $desc;
  function NodeValidatorBuilder_allowCustomElement_closure(tagNameUpper_0) {
    this.tagNameUpper_0 = tagNameUpper_0;
  }
  NodeValidatorBuilder_allowCustomElement_closure.builtin$cls = "NodeValidatorBuilder_allowCustomElement_closure";
  if (!"name" in NodeValidatorBuilder_allowCustomElement_closure)
    NodeValidatorBuilder_allowCustomElement_closure.name = "NodeValidatorBuilder_allowCustomElement_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowCustomElement_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowCustomElement_closure.prototype = $desc;
  function NodeValidatorBuilder_allowCustomElement_closure0(tagNameUpper_1) {
    this.tagNameUpper_1 = tagNameUpper_1;
  }
  NodeValidatorBuilder_allowCustomElement_closure0.builtin$cls = "NodeValidatorBuilder_allowCustomElement_closure0";
  if (!"name" in NodeValidatorBuilder_allowCustomElement_closure0)
    NodeValidatorBuilder_allowCustomElement_closure0.name = "NodeValidatorBuilder_allowCustomElement_closure0";
  $desc = $collectedClasses.NodeValidatorBuilder_allowCustomElement_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowCustomElement_closure0.prototype = $desc;
  function NodeValidatorBuilder_allowsElement_closure(element_0) {
    this.element_0 = element_0;
  }
  NodeValidatorBuilder_allowsElement_closure.builtin$cls = "NodeValidatorBuilder_allowsElement_closure";
  if (!"name" in NodeValidatorBuilder_allowsElement_closure)
    NodeValidatorBuilder_allowsElement_closure.name = "NodeValidatorBuilder_allowsElement_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowsElement_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowsElement_closure.prototype = $desc;
  function NodeValidatorBuilder_allowsAttribute_closure(element_0, attributeName_1, value_2) {
    this.element_0 = element_0;
    this.attributeName_1 = attributeName_1;
    this.value_2 = value_2;
  }
  NodeValidatorBuilder_allowsAttribute_closure.builtin$cls = "NodeValidatorBuilder_allowsAttribute_closure";
  if (!"name" in NodeValidatorBuilder_allowsAttribute_closure)
    NodeValidatorBuilder_allowsAttribute_closure.name = "NodeValidatorBuilder_allowsAttribute_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowsAttribute_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowsAttribute_closure.prototype = $desc;
  function _SimpleNodeValidator(uriPolicy) {
    this.uriPolicy = uriPolicy;
  }
  _SimpleNodeValidator.builtin$cls = "_SimpleNodeValidator";
  if (!"name" in _SimpleNodeValidator)
    _SimpleNodeValidator.name = "_SimpleNodeValidator";
  $desc = $collectedClasses._SimpleNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SimpleNodeValidator.prototype = $desc;
  _SimpleNodeValidator.prototype.get$uriPolicy = function() {
    return this.uriPolicy;
  };
  function _CustomElementNodeValidator(allowTypeExtension, allowCustomTag, allowedElements, allowedAttributes, allowedUriAttributes, uriPolicy) {
    this.allowTypeExtension = allowTypeExtension;
    this.allowCustomTag = allowCustomTag;
    this.allowedElements = allowedElements;
    this.allowedAttributes = allowedAttributes;
    this.allowedUriAttributes = allowedUriAttributes;
    this.uriPolicy = uriPolicy;
  }
  _CustomElementNodeValidator.builtin$cls = "_CustomElementNodeValidator";
  if (!"name" in _CustomElementNodeValidator)
    _CustomElementNodeValidator.name = "_CustomElementNodeValidator";
  $desc = $collectedClasses._CustomElementNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomElementNodeValidator.prototype = $desc;
  function _TemplatingNodeValidator(_templateAttrs, allowedElements, allowedAttributes, allowedUriAttributes, uriPolicy) {
    this._templateAttrs = _templateAttrs;
    this.allowedElements = allowedElements;
    this.allowedAttributes = allowedAttributes;
    this.allowedUriAttributes = allowedUriAttributes;
    this.uriPolicy = uriPolicy;
  }
  _TemplatingNodeValidator.builtin$cls = "_TemplatingNodeValidator";
  if (!"name" in _TemplatingNodeValidator)
    _TemplatingNodeValidator.name = "_TemplatingNodeValidator";
  $desc = $collectedClasses._TemplatingNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplatingNodeValidator.prototype = $desc;
  function _TemplatingNodeValidator_closure() {
  }
  _TemplatingNodeValidator_closure.builtin$cls = "_TemplatingNodeValidator_closure";
  if (!"name" in _TemplatingNodeValidator_closure)
    _TemplatingNodeValidator_closure.name = "_TemplatingNodeValidator_closure";
  $desc = $collectedClasses._TemplatingNodeValidator_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplatingNodeValidator_closure.prototype = $desc;
  function _SvgNodeValidator() {
  }
  _SvgNodeValidator.builtin$cls = "_SvgNodeValidator";
  if (!"name" in _SvgNodeValidator)
    _SvgNodeValidator.name = "_SvgNodeValidator";
  $desc = $collectedClasses._SvgNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SvgNodeValidator.prototype = $desc;
  function _WrappedEvent() {
  }
  _WrappedEvent.builtin$cls = "_WrappedEvent";
  if (!"name" in _WrappedEvent)
    _WrappedEvent.name = "_WrappedEvent";
  $desc = $collectedClasses._WrappedEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WrappedEvent.prototype = $desc;
  function FixedSizeListIterator(_array, _length, _position, _current) {
    this._array = _array;
    this._length = _length;
    this._position = _position;
    this._current = _current;
  }
  FixedSizeListIterator.builtin$cls = "FixedSizeListIterator";
  if (!"name" in FixedSizeListIterator)
    FixedSizeListIterator.name = "FixedSizeListIterator";
  $desc = $collectedClasses.FixedSizeListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedSizeListIterator.prototype = $desc;
  function _DOMWindowCrossFrame(_window) {
    this._window = _window;
  }
  _DOMWindowCrossFrame.builtin$cls = "_DOMWindowCrossFrame";
  if (!"name" in _DOMWindowCrossFrame)
    _DOMWindowCrossFrame.name = "_DOMWindowCrossFrame";
  $desc = $collectedClasses._DOMWindowCrossFrame;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DOMWindowCrossFrame.prototype = $desc;
  function _LocationWrapper(_ptr) {
    this._ptr = _ptr;
  }
  _LocationWrapper.builtin$cls = "_LocationWrapper";
  if (!"name" in _LocationWrapper)
    _LocationWrapper.name = "_LocationWrapper";
  $desc = $collectedClasses._LocationWrapper;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LocationWrapper.prototype = $desc;
  function NodeValidator() {
  }
  NodeValidator.builtin$cls = "NodeValidator";
  if (!"name" in NodeValidator)
    NodeValidator.name = "NodeValidator";
  $desc = $collectedClasses.NodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidator.prototype = $desc;
  function _SameOriginUriPolicy(_hiddenAnchor, _loc) {
    this._hiddenAnchor = _hiddenAnchor;
    this._loc = _loc;
  }
  _SameOriginUriPolicy.builtin$cls = "_SameOriginUriPolicy";
  if (!"name" in _SameOriginUriPolicy)
    _SameOriginUriPolicy.name = "_SameOriginUriPolicy";
  $desc = $collectedClasses._SameOriginUriPolicy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SameOriginUriPolicy.prototype = $desc;
  function _ValidatingTreeSanitizer(validator) {
    this.validator = validator;
  }
  _ValidatingTreeSanitizer.builtin$cls = "_ValidatingTreeSanitizer";
  if (!"name" in _ValidatingTreeSanitizer)
    _ValidatingTreeSanitizer.name = "_ValidatingTreeSanitizer";
  $desc = $collectedClasses._ValidatingTreeSanitizer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ValidatingTreeSanitizer.prototype = $desc;
  function _ValidatingTreeSanitizer_sanitizeTree_walk(this_0) {
    this.this_0 = this_0;
  }
  _ValidatingTreeSanitizer_sanitizeTree_walk.builtin$cls = "_ValidatingTreeSanitizer_sanitizeTree_walk";
  if (!"name" in _ValidatingTreeSanitizer_sanitizeTree_walk)
    _ValidatingTreeSanitizer_sanitizeTree_walk.name = "_ValidatingTreeSanitizer_sanitizeTree_walk";
  $desc = $collectedClasses._ValidatingTreeSanitizer_sanitizeTree_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ValidatingTreeSanitizer_sanitizeTree_walk.prototype = $desc;
  function _AttributeClassSet(_svg$_element) {
    this._svg$_element = _svg$_element;
  }
  _AttributeClassSet.builtin$cls = "_AttributeClassSet";
  if (!"name" in _AttributeClassSet)
    _AttributeClassSet.name = "_AttributeClassSet";
  $desc = $collectedClasses._AttributeClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeClassSet.prototype = $desc;
  function ReceivePort() {
  }
  ReceivePort.builtin$cls = "ReceivePort";
  if (!"name" in ReceivePort)
    ReceivePort.name = "ReceivePort";
  $desc = $collectedClasses.ReceivePort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReceivePort.prototype = $desc;
  function _Random() {
  }
  _Random.builtin$cls = "_Random";
  if (!"name" in _Random)
    _Random.name = "_Random";
  $desc = $collectedClasses._Random;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Random.prototype = $desc;
  function Point(x, y) {
    this.x = x;
    this.y = y;
  }
  Point.builtin$cls = "Point";
  if (!"name" in Point)
    Point.name = "Point";
  $desc = $collectedClasses.Point;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Point.prototype = $desc;
  Point.prototype.get$x = function(receiver) {
    return this.x;
  };
  Point.prototype.get$y = function(receiver) {
    return this.y;
  };
  function _RectangleBase() {
  }
  _RectangleBase.builtin$cls = "_RectangleBase";
  if (!"name" in _RectangleBase)
    _RectangleBase.name = "_RectangleBase";
  $desc = $collectedClasses._RectangleBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RectangleBase.prototype = $desc;
  function Rectangle(left, top, width, height) {
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
  }
  Rectangle.builtin$cls = "Rectangle";
  if (!"name" in Rectangle)
    Rectangle.name = "Rectangle";
  $desc = $collectedClasses.Rectangle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Rectangle.prototype = $desc;
  Rectangle.prototype.get$left = function(receiver) {
    return this.left;
  };
  Rectangle.prototype.get$top = function(receiver) {
    return this.top;
  };
  Rectangle.prototype.get$width = function(receiver) {
    return this.width;
  };
  Rectangle.prototype.get$height = function(receiver) {
    return this.height;
  };
  function TypedData_ListMixin() {
  }
  TypedData_ListMixin.builtin$cls = "TypedData_ListMixin";
  if (!"name" in TypedData_ListMixin)
    TypedData_ListMixin.name = "TypedData_ListMixin";
  $desc = $collectedClasses.TypedData_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin() {
  }
  TypedData_ListMixin_FixedLengthListMixin.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin)
    TypedData_ListMixin_FixedLengthListMixin.name = "TypedData_ListMixin_FixedLengthListMixin";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin.prototype = $desc;
  function TypedData_ListMixin0() {
  }
  TypedData_ListMixin0.builtin$cls = "TypedData_ListMixin0";
  if (!"name" in TypedData_ListMixin0)
    TypedData_ListMixin0.name = "TypedData_ListMixin0";
  $desc = $collectedClasses.TypedData_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin0.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin0() {
  }
  TypedData_ListMixin_FixedLengthListMixin0.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin0";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin0)
    TypedData_ListMixin_FixedLengthListMixin0.name = "TypedData_ListMixin_FixedLengthListMixin0";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin0.prototype = $desc;
  function TypedData_ListMixin1() {
  }
  TypedData_ListMixin1.builtin$cls = "TypedData_ListMixin1";
  if (!"name" in TypedData_ListMixin1)
    TypedData_ListMixin1.name = "TypedData_ListMixin1";
  $desc = $collectedClasses.TypedData_ListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin1.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin1() {
  }
  TypedData_ListMixin_FixedLengthListMixin1.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin1";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin1)
    TypedData_ListMixin_FixedLengthListMixin1.name = "TypedData_ListMixin_FixedLengthListMixin1";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin1.prototype = $desc;
  function TypedData_ListMixin2() {
  }
  TypedData_ListMixin2.builtin$cls = "TypedData_ListMixin2";
  if (!"name" in TypedData_ListMixin2)
    TypedData_ListMixin2.name = "TypedData_ListMixin2";
  $desc = $collectedClasses.TypedData_ListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin2.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin2() {
  }
  TypedData_ListMixin_FixedLengthListMixin2.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin2";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin2)
    TypedData_ListMixin_FixedLengthListMixin2.name = "TypedData_ListMixin_FixedLengthListMixin2";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin2.prototype = $desc;
  function TypedData_ListMixin3() {
  }
  TypedData_ListMixin3.builtin$cls = "TypedData_ListMixin3";
  if (!"name" in TypedData_ListMixin3)
    TypedData_ListMixin3.name = "TypedData_ListMixin3";
  $desc = $collectedClasses.TypedData_ListMixin3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin3.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin3() {
  }
  TypedData_ListMixin_FixedLengthListMixin3.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin3";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin3)
    TypedData_ListMixin_FixedLengthListMixin3.name = "TypedData_ListMixin_FixedLengthListMixin3";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin3.prototype = $desc;
  function TypedData_ListMixin4() {
  }
  TypedData_ListMixin4.builtin$cls = "TypedData_ListMixin4";
  if (!"name" in TypedData_ListMixin4)
    TypedData_ListMixin4.name = "TypedData_ListMixin4";
  $desc = $collectedClasses.TypedData_ListMixin4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin4.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin4() {
  }
  TypedData_ListMixin_FixedLengthListMixin4.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin4";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin4)
    TypedData_ListMixin_FixedLengthListMixin4.name = "TypedData_ListMixin_FixedLengthListMixin4";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin4.prototype = $desc;
  function TypedData_ListMixin5() {
  }
  TypedData_ListMixin5.builtin$cls = "TypedData_ListMixin5";
  if (!"name" in TypedData_ListMixin5)
    TypedData_ListMixin5.name = "TypedData_ListMixin5";
  $desc = $collectedClasses.TypedData_ListMixin5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin5.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin5() {
  }
  TypedData_ListMixin_FixedLengthListMixin5.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin5";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin5)
    TypedData_ListMixin_FixedLengthListMixin5.name = "TypedData_ListMixin_FixedLengthListMixin5";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin5.prototype = $desc;
  function TypedData_ListMixin6() {
  }
  TypedData_ListMixin6.builtin$cls = "TypedData_ListMixin6";
  if (!"name" in TypedData_ListMixin6)
    TypedData_ListMixin6.name = "TypedData_ListMixin6";
  $desc = $collectedClasses.TypedData_ListMixin6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin6.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin6() {
  }
  TypedData_ListMixin_FixedLengthListMixin6.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin6";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin6)
    TypedData_ListMixin_FixedLengthListMixin6.name = "TypedData_ListMixin_FixedLengthListMixin6";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin6.prototype = $desc;
  function TypedData_ListMixin7() {
  }
  TypedData_ListMixin7.builtin$cls = "TypedData_ListMixin7";
  if (!"name" in TypedData_ListMixin7)
    TypedData_ListMixin7.name = "TypedData_ListMixin7";
  $desc = $collectedClasses.TypedData_ListMixin7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin7.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin7() {
  }
  TypedData_ListMixin_FixedLengthListMixin7.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin7";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin7)
    TypedData_ListMixin_FixedLengthListMixin7.name = "TypedData_ListMixin_FixedLengthListMixin7";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin7.prototype = $desc;
  function Int64List() {
  }
  Int64List.builtin$cls = "Int64List";
  if (!"name" in Int64List)
    Int64List.name = "Int64List";
  $desc = $collectedClasses.Int64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int64List.prototype = $desc;
  function Uint64List() {
  }
  Uint64List.builtin$cls = "Uint64List";
  if (!"name" in Uint64List)
    Uint64List.name = "Uint64List";
  $desc = $collectedClasses.Uint64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint64List.prototype = $desc;
  function GameLoop() {
  }
  GameLoop.builtin$cls = "GameLoop";
  if (!"name" in GameLoop)
    GameLoop.name = "GameLoop";
  $desc = $collectedClasses.GameLoop;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoop.prototype = $desc;
  function DigitalButton(buttonId, framePressed, frameReleased, timePressed, timeReleased) {
    this.buttonId = buttonId;
    this.framePressed = framePressed;
    this.frameReleased = frameReleased;
    this.timePressed = timePressed;
    this.timeReleased = timeReleased;
  }
  DigitalButton.builtin$cls = "DigitalButton";
  if (!"name" in DigitalButton)
    DigitalButton.name = "DigitalButton";
  $desc = $collectedClasses.DigitalButton;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DigitalButton.prototype = $desc;
  DigitalButton.prototype.set$framePressed = function(v) {
    return this.framePressed = v;
  };
  DigitalButton.prototype.set$frameReleased = function(v) {
    return this.frameReleased = v;
  };
  function DigitalButtonEvent(down, frame, buttonId, time) {
    this.down = down;
    this.frame = frame;
    this.buttonId = buttonId;
    this.time = time;
  }
  DigitalButtonEvent.builtin$cls = "DigitalButtonEvent";
  if (!"name" in DigitalButtonEvent)
    DigitalButtonEvent.name = "DigitalButtonEvent";
  $desc = $collectedClasses.DigitalButtonEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DigitalButtonEvent.prototype = $desc;
  DigitalButtonEvent.prototype.get$down = function() {
    return this.down;
  };
  function DigitalInput() {
  }
  DigitalInput.builtin$cls = "DigitalInput";
  if (!"name" in DigitalInput)
    DigitalInput.name = "DigitalInput";
  $desc = $collectedClasses.DigitalInput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DigitalInput.prototype = $desc;
  function GameLoopTimer() {
  }
  GameLoopTimer.builtin$cls = "GameLoopTimer";
  if (!"name" in GameLoopTimer)
    GameLoopTimer.name = "GameLoopTimer";
  $desc = $collectedClasses.GameLoopTimer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopTimer.prototype = $desc;
  function GameLoopGamepad(gameLoop, buttons, sticks) {
    this.gameLoop = gameLoop;
    this.buttons = buttons;
    this.sticks = sticks;
  }
  GameLoopGamepad.builtin$cls = "GameLoopGamepad";
  if (!"name" in GameLoopGamepad)
    GameLoopGamepad.name = "GameLoopGamepad";
  $desc = $collectedClasses.GameLoopGamepad;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopGamepad.prototype = $desc;
  function GameLoopHtml(element, _frameCounter, _initialized, _interrupt, _previousFrameTime, _frameTime, _resizePending, _nextResize, maxAccumulatedTime, _accumulatedTime, _gameTime, _renderInterpolationFactor, resizeLimit, _pointerLock, _keyboard, _mouse, _gamepad0, _lastMousePos, _touchSet, _rafId, _touchEvents, _keyboardEvents, _mouseEvents, onRender, onResize, onFullscreenChange, onPointerLockChange, onTouchStart, onTouchEnd, onKeyDown, updateTimeStep, game_loop_common$GameLoop$maxAccumulatedTime, _timers, onUpdate) {
    this.element = element;
    this._frameCounter = _frameCounter;
    this._initialized = _initialized;
    this._interrupt = _interrupt;
    this._previousFrameTime = _previousFrameTime;
    this._frameTime = _frameTime;
    this._resizePending = _resizePending;
    this._nextResize = _nextResize;
    this.maxAccumulatedTime = maxAccumulatedTime;
    this._accumulatedTime = _accumulatedTime;
    this._gameTime = _gameTime;
    this._renderInterpolationFactor = _renderInterpolationFactor;
    this.resizeLimit = resizeLimit;
    this._pointerLock = _pointerLock;
    this._keyboard = _keyboard;
    this._mouse = _mouse;
    this._gamepad0 = _gamepad0;
    this._lastMousePos = _lastMousePos;
    this._touchSet = _touchSet;
    this._rafId = _rafId;
    this._touchEvents = _touchEvents;
    this._keyboardEvents = _keyboardEvents;
    this._mouseEvents = _mouseEvents;
    this.onRender = onRender;
    this.onResize = onResize;
    this.onFullscreenChange = onFullscreenChange;
    this.onPointerLockChange = onPointerLockChange;
    this.onTouchStart = onTouchStart;
    this.onTouchEnd = onTouchEnd;
    this.onKeyDown = onKeyDown;
    this.updateTimeStep = updateTimeStep;
    this.game_loop_common$GameLoop$maxAccumulatedTime = game_loop_common$GameLoop$maxAccumulatedTime;
    this._timers = _timers;
    this.onUpdate = onUpdate;
  }
  GameLoopHtml.builtin$cls = "GameLoopHtml";
  if (!"name" in GameLoopHtml)
    GameLoopHtml.name = "GameLoopHtml";
  $desc = $collectedClasses.GameLoopHtml;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopHtml.prototype = $desc;
  function Keyboard(gameLoop, buttons, interceptor) {
    this.gameLoop = gameLoop;
    this.buttons = buttons;
    this.interceptor = interceptor;
  }
  Keyboard.builtin$cls = "Keyboard";
  if (!"name" in Keyboard)
    Keyboard.name = "Keyboard";
  $desc = $collectedClasses.Keyboard;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Keyboard.prototype = $desc;
  function GameLoopMouseEvent(x, y, dx, dy, clampX, clampY, time, withinCanvas, frame) {
    this.x = x;
    this.y = y;
    this.dx = dx;
    this.dy = dy;
    this.clampX = clampX;
    this.clampY = clampY;
    this.time = time;
    this.withinCanvas = withinCanvas;
    this.frame = frame;
  }
  GameLoopMouseEvent.builtin$cls = "GameLoopMouseEvent";
  if (!"name" in GameLoopMouseEvent)
    GameLoopMouseEvent.name = "GameLoopMouseEvent";
  $desc = $collectedClasses.GameLoopMouseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopMouseEvent.prototype = $desc;
  GameLoopMouseEvent.prototype.get$x = function(receiver) {
    return this.x;
  };
  GameLoopMouseEvent.prototype.get$y = function(receiver) {
    return this.y;
  };
  function Mouse(_dx, _dy, _x, _y, _clampX, _clampY, _wheelDx, _wheelDy, _withinCanvas, _time, _frame, gameLoop, buttons, interceptor) {
    this._dx = _dx;
    this._dy = _dy;
    this._x = _x;
    this._y = _y;
    this._clampX = _clampX;
    this._clampY = _clampY;
    this._wheelDx = _wheelDx;
    this._wheelDy = _wheelDy;
    this._withinCanvas = _withinCanvas;
    this._time = _time;
    this._frame = _frame;
    this.gameLoop = gameLoop;
    this.buttons = buttons;
    this.interceptor = interceptor;
  }
  Mouse.builtin$cls = "Mouse";
  if (!"name" in Mouse)
    Mouse.name = "Mouse";
  $desc = $collectedClasses.Mouse;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Mouse.prototype = $desc;
  function PointerLock(gameLoop, lockOnClick) {
    this.gameLoop = gameLoop;
    this.lockOnClick = lockOnClick;
  }
  PointerLock.builtin$cls = "PointerLock";
  if (!"name" in PointerLock)
    PointerLock.name = "PointerLock";
  $desc = $collectedClasses.PointerLock;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PointerLock.prototype = $desc;
  function _GameLoopTouchEvent(event, type) {
    this.event = event;
    this.type = type;
  }
  _GameLoopTouchEvent.builtin$cls = "_GameLoopTouchEvent";
  if (!"name" in _GameLoopTouchEvent)
    _GameLoopTouchEvent.name = "_GameLoopTouchEvent";
  $desc = $collectedClasses._GameLoopTouchEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GameLoopTouchEvent.prototype = $desc;
  _GameLoopTouchEvent.prototype.get$event = function() {
    return this.event;
  };
  _GameLoopTouchEvent.prototype.get$type = function(receiver) {
    return this.type;
  };
  function GameLoopTouchPosition(x, y, dx, dy, time, frame) {
    this.x = x;
    this.y = y;
    this.dx = dx;
    this.dy = dy;
    this.time = time;
    this.frame = frame;
  }
  GameLoopTouchPosition.builtin$cls = "GameLoopTouchPosition";
  if (!"name" in GameLoopTouchPosition)
    GameLoopTouchPosition.name = "GameLoopTouchPosition";
  $desc = $collectedClasses.GameLoopTouchPosition;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopTouchPosition.prototype = $desc;
  GameLoopTouchPosition.prototype.get$x = function(receiver) {
    return this.x;
  };
  GameLoopTouchPosition.prototype.get$y = function(receiver) {
    return this.y;
  };
  function GameLoopTouch(id, positions) {
    this.id = id;
    this.positions = positions;
  }
  GameLoopTouch.builtin$cls = "GameLoopTouch";
  if (!"name" in GameLoopTouch)
    GameLoopTouch.name = "GameLoopTouch";
  $desc = $collectedClasses.GameLoopTouch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopTouch.prototype = $desc;
  GameLoopTouch.prototype.get$id = function(receiver) {
    return this.id;
  };
  GameLoopTouch.prototype.get$positions = function() {
    return this.positions;
  };
  function GameLoopTouchSet(activeTouches, gameLoop) {
    this.activeTouches = activeTouches;
    this.gameLoop = gameLoop;
  }
  GameLoopTouchSet.builtin$cls = "GameLoopTouchSet";
  if (!"name" in GameLoopTouchSet)
    GameLoopTouchSet.name = "GameLoopTouchSet";
  $desc = $collectedClasses.GameLoopTouchSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopTouchSet.prototype = $desc;
  function GameLoopTouchSet__start_closure(this_0) {
    this.this_0 = this_0;
  }
  GameLoopTouchSet__start_closure.builtin$cls = "GameLoopTouchSet__start_closure";
  if (!"name" in GameLoopTouchSet__start_closure)
    GameLoopTouchSet__start_closure.name = "GameLoopTouchSet__start_closure";
  $desc = $collectedClasses.GameLoopTouchSet__start_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopTouchSet__start_closure.prototype = $desc;
  function GameLoopTouchSet__end_closure(this_0) {
    this.this_0 = this_0;
  }
  GameLoopTouchSet__end_closure.builtin$cls = "GameLoopTouchSet__end_closure";
  if (!"name" in GameLoopTouchSet__end_closure)
    GameLoopTouchSet__end_closure.name = "GameLoopTouchSet__end_closure";
  $desc = $collectedClasses.GameLoopTouchSet__end_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopTouchSet__end_closure.prototype = $desc;
  function GameLoopTouchSet__move_closure(this_0) {
    this.this_0 = this_0;
  }
  GameLoopTouchSet__move_closure.builtin$cls = "GameLoopTouchSet__move_closure";
  if (!"name" in GameLoopTouchSet__move_closure)
    GameLoopTouchSet__move_closure.name = "GameLoopTouchSet__move_closure";
  $desc = $collectedClasses.GameLoopTouchSet__move_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopTouchSet__move_closure.prototype = $desc;
  function GameLoopTouchSet__verifyTouchList_closure(this_0, touches_1) {
    this.this_0 = this_0;
    this.touches_1 = touches_1;
  }
  GameLoopTouchSet__verifyTouchList_closure.builtin$cls = "GameLoopTouchSet__verifyTouchList_closure";
  if (!"name" in GameLoopTouchSet__verifyTouchList_closure)
    GameLoopTouchSet__verifyTouchList_closure.name = "GameLoopTouchSet__verifyTouchList_closure";
  $desc = $collectedClasses.GameLoopTouchSet__verifyTouchList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopTouchSet__verifyTouchList_closure.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_findSlot(values_0, copies_1) {
    this.values_0 = values_0;
    this.copies_1 = copies_1;
  }
  convertNativeToDart_AcceptStructuredClone_findSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_findSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_findSlot)
    convertNativeToDart_AcceptStructuredClone_findSlot.name = "convertNativeToDart_AcceptStructuredClone_findSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_findSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_findSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_readSlot(copies_2) {
    this.copies_2 = copies_2;
  }
  convertNativeToDart_AcceptStructuredClone_readSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_readSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_readSlot)
    convertNativeToDart_AcceptStructuredClone_readSlot.name = "convertNativeToDart_AcceptStructuredClone_readSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_readSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_readSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_writeSlot(copies_3) {
    this.copies_3 = copies_3;
  }
  convertNativeToDart_AcceptStructuredClone_writeSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_writeSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_writeSlot)
    convertNativeToDart_AcceptStructuredClone_writeSlot.name = "convertNativeToDart_AcceptStructuredClone_writeSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_writeSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_writeSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_walk(mustCopy_4, findSlot_5, readSlot_6, writeSlot_7) {
    this.mustCopy_4 = mustCopy_4;
    this.findSlot_5 = findSlot_5;
    this.readSlot_6 = readSlot_6;
    this.writeSlot_7 = writeSlot_7;
  }
  convertNativeToDart_AcceptStructuredClone_walk.builtin$cls = "convertNativeToDart_AcceptStructuredClone_walk";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_walk)
    convertNativeToDart_AcceptStructuredClone_walk.name = "convertNativeToDart_AcceptStructuredClone_walk";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_walk.prototype = $desc;
  function CssClassSetImpl() {
  }
  CssClassSetImpl.builtin$cls = "CssClassSetImpl";
  if (!"name" in CssClassSetImpl)
    CssClassSetImpl.name = "CssClassSetImpl";
  $desc = $collectedClasses.CssClassSetImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl.prototype = $desc;
  function CssClassSetImpl_add_closure(value_0) {
    this.value_0 = value_0;
  }
  CssClassSetImpl_add_closure.builtin$cls = "CssClassSetImpl_add_closure";
  if (!"name" in CssClassSetImpl_add_closure)
    CssClassSetImpl_add_closure.name = "CssClassSetImpl_add_closure";
  $desc = $collectedClasses.CssClassSetImpl_add_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl_add_closure.prototype = $desc;
  function FilteredElementList(_node, _childNodes) {
    this._node = _node;
    this._childNodes = _childNodes;
  }
  FilteredElementList.builtin$cls = "FilteredElementList";
  if (!"name" in FilteredElementList)
    FilteredElementList.name = "FilteredElementList";
  $desc = $collectedClasses.FilteredElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList.prototype = $desc;
  function FilteredElementList__filtered_closure() {
  }
  FilteredElementList__filtered_closure.builtin$cls = "FilteredElementList__filtered_closure";
  if (!"name" in FilteredElementList__filtered_closure)
    FilteredElementList__filtered_closure.name = "FilteredElementList__filtered_closure";
  $desc = $collectedClasses.FilteredElementList__filtered_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList__filtered_closure.prototype = $desc;
  function FilteredElementList_removeRange_closure() {
  }
  FilteredElementList_removeRange_closure.builtin$cls = "FilteredElementList_removeRange_closure";
  if (!"name" in FilteredElementList_removeRange_closure)
    FilteredElementList_removeRange_closure.name = "FilteredElementList_removeRange_closure";
  $desc = $collectedClasses.FilteredElementList_removeRange_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList_removeRange_closure.prototype = $desc;
  function NumberFormat(_negativePrefix, _positivePrefix, _negativeSuffix, _positiveSuffix, _groupingSize, _decimalSeparatorAlwaysShown, _useSignForPositiveExponent, _useExponentialNotation, maximumIntegerDigits, minimumIntegerDigits, maximumFractionDigits, minimumFractionDigits, minimumExponentDigits, _multiplier, _intl$_pattern, _locale, _symbols, _intl$_buffer, _maxInt, _zero) {
    this._negativePrefix = _negativePrefix;
    this._positivePrefix = _positivePrefix;
    this._negativeSuffix = _negativeSuffix;
    this._positiveSuffix = _positiveSuffix;
    this._groupingSize = _groupingSize;
    this._decimalSeparatorAlwaysShown = _decimalSeparatorAlwaysShown;
    this._useSignForPositiveExponent = _useSignForPositiveExponent;
    this._useExponentialNotation = _useExponentialNotation;
    this.maximumIntegerDigits = maximumIntegerDigits;
    this.minimumIntegerDigits = minimumIntegerDigits;
    this.maximumFractionDigits = maximumFractionDigits;
    this.minimumFractionDigits = minimumFractionDigits;
    this.minimumExponentDigits = minimumExponentDigits;
    this._multiplier = _multiplier;
    this._intl$_pattern = _intl$_pattern;
    this._locale = _locale;
    this._symbols = _symbols;
    this._intl$_buffer = _intl$_buffer;
    this._maxInt = _maxInt;
    this._zero = _zero;
  }
  NumberFormat.builtin$cls = "NumberFormat";
  if (!"name" in NumberFormat)
    NumberFormat.name = "NumberFormat";
  $desc = $collectedClasses.NumberFormat;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NumberFormat.prototype = $desc;
  function NumberFormat_NumberFormat_closure(newPattern_0) {
    this.newPattern_0 = newPattern_0;
  }
  NumberFormat_NumberFormat_closure.builtin$cls = "NumberFormat_NumberFormat_closure";
  if (!"name" in NumberFormat_NumberFormat_closure)
    NumberFormat_NumberFormat_closure.name = "NumberFormat_NumberFormat_closure";
  $desc = $collectedClasses.NumberFormat_NumberFormat_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NumberFormat_NumberFormat_closure.prototype = $desc;
  function _NumberFormatParser(format, pattern, inQuote, decimalPos, digitLeftCount, zeroDigitCount, digitRightCount, groupingCount, trunk) {
    this.format = format;
    this.pattern = pattern;
    this.inQuote = inQuote;
    this.decimalPos = decimalPos;
    this.digitLeftCount = digitLeftCount;
    this.zeroDigitCount = zeroDigitCount;
    this.digitRightCount = digitRightCount;
    this.groupingCount = groupingCount;
    this.trunk = trunk;
  }
  _NumberFormatParser.builtin$cls = "_NumberFormatParser";
  if (!"name" in _NumberFormatParser)
    _NumberFormatParser.name = "_NumberFormatParser";
  $desc = $collectedClasses._NumberFormatParser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NumberFormatParser.prototype = $desc;
  function _StringIterable(iterator) {
    this.iterator = iterator;
  }
  _StringIterable.builtin$cls = "_StringIterable";
  if (!"name" in _StringIterable)
    _StringIterable.name = "_StringIterable";
  $desc = $collectedClasses._StringIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StringIterable.prototype = $desc;
  _StringIterable.prototype.get$iterator = function(receiver) {
    return this.iterator;
  };
  function _StringIterator(input, index) {
    this.input = input;
    this.index = index;
  }
  _StringIterator.builtin$cls = "_StringIterator";
  if (!"name" in _StringIterator)
    _StringIterator.name = "_StringIterator";
  $desc = $collectedClasses._StringIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StringIterator.prototype = $desc;
  function NumberSymbols(NAME, DECIMAL_SEP, GROUP_SEP, PERCENT, ZERO_DIGIT, PLUS_SIGN, MINUS_SIGN, EXP_SYMBOL, PERMILL, INFINITY, NAN, DECIMAL_PATTERN, SCIENTIFIC_PATTERN, PERCENT_PATTERN, CURRENCY_PATTERN, DEF_CURRENCY_CODE) {
    this.NAME = NAME;
    this.DECIMAL_SEP = DECIMAL_SEP;
    this.GROUP_SEP = GROUP_SEP;
    this.PERCENT = PERCENT;
    this.ZERO_DIGIT = ZERO_DIGIT;
    this.PLUS_SIGN = PLUS_SIGN;
    this.MINUS_SIGN = MINUS_SIGN;
    this.EXP_SYMBOL = EXP_SYMBOL;
    this.PERMILL = PERMILL;
    this.INFINITY = INFINITY;
    this.NAN = NAN;
    this.DECIMAL_PATTERN = DECIMAL_PATTERN;
    this.SCIENTIFIC_PATTERN = SCIENTIFIC_PATTERN;
    this.PERCENT_PATTERN = PERCENT_PATTERN;
    this.CURRENCY_PATTERN = CURRENCY_PATTERN;
    this.DEF_CURRENCY_CODE = DEF_CURRENCY_CODE;
  }
  NumberSymbols.builtin$cls = "NumberSymbols";
  if (!"name" in NumberSymbols)
    NumberSymbols.name = "NumberSymbols";
  $desc = $collectedClasses.NumberSymbols;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NumberSymbols.prototype = $desc;
  NumberSymbols.prototype.get$DECIMAL_SEP = function() {
    return this.DECIMAL_SEP;
  };
  NumberSymbols.prototype.get$GROUP_SEP = function() {
    return this.GROUP_SEP;
  };
  NumberSymbols.prototype.get$PERCENT = function() {
    return this.PERCENT;
  };
  NumberSymbols.prototype.get$ZERO_DIGIT = function() {
    return this.ZERO_DIGIT;
  };
  NumberSymbols.prototype.get$PLUS_SIGN = function() {
    return this.PLUS_SIGN;
  };
  NumberSymbols.prototype.get$MINUS_SIGN = function() {
    return this.MINUS_SIGN;
  };
  NumberSymbols.prototype.get$EXP_SYMBOL = function() {
    return this.EXP_SYMBOL;
  };
  NumberSymbols.prototype.get$PERMILL = function() {
    return this.PERMILL;
  };
  NumberSymbols.prototype.get$INFINITY = function() {
    return this.INFINITY;
  };
  NumberSymbols.prototype.get$NAN = function() {
    return this.NAN;
  };
  NumberSymbols.prototype.get$DEF_CURRENCY_CODE = function() {
    return this.DEF_CURRENCY_CODE;
  };
  function Scound(_sound, meta, paused, muted, _stopped, onPlay, _stopController, onStop, onEnded, onPause, _resumeController, onResume) {
    this._sound = _sound;
    this.meta = meta;
    this.paused = paused;
    this.muted = muted;
    this._stopped = _stopped;
    this.onPlay = onPlay;
    this._stopController = _stopController;
    this.onStop = onStop;
    this.onEnded = onEnded;
    this.onPause = onPause;
    this._resumeController = _resumeController;
    this.onResume = onResume;
  }
  Scound.builtin$cls = "Scound";
  if (!"name" in Scound)
    Scound.name = "Scound";
  $desc = $collectedClasses.Scound;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Scound.prototype = $desc;
  Scound.prototype.get$meta = function() {
    return this.meta;
  };
  function SC(client_id) {
    this.client_id = client_id;
  }
  SC.builtin$cls = "SC";
  if (!"name" in SC)
    SC.name = "SC";
  $desc = $collectedClasses.SC;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SC.prototype = $desc;
  function SC_load_closure(box_0, this_1, completer_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.completer_2 = completer_2;
  }
  SC_load_closure.builtin$cls = "SC_load_closure";
  if (!"name" in SC_load_closure)
    SC_load_closure.name = "SC_load_closure";
  $desc = $collectedClasses.SC_load_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SC_load_closure.prototype = $desc;
  function Closure$2(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  }
  Closure$2.builtin$cls = "Closure$2";
  $desc = $collectedClasses.Closure$2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$2.prototype = $desc;
  function Closure$1(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  }
  Closure$1.builtin$cls = "Closure$1";
  $desc = $collectedClasses.Closure$1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$1.prototype = $desc;
  function Closure$0(call$0, $name) {
    this.call$0 = call$0;
    this.$name = $name;
  }
  Closure$0.builtin$cls = "Closure$0";
  $desc = $collectedClasses.Closure$0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$0.prototype = $desc;
  function Closure$7(call$7, $name) {
    this.call$7 = call$7;
    this.$name = $name;
  }
  Closure$7.builtin$cls = "Closure$7";
  $desc = $collectedClasses.Closure$7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$7.prototype = $desc;
  function Closure$21(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  }
  Closure$21.builtin$cls = "Closure$21";
  $desc = $collectedClasses.Closure$21;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$21.prototype = $desc;
  function Closure$4(call$4, $name) {
    this.call$4 = call$4;
    this.$name = $name;
  }
  Closure$4.builtin$cls = "Closure$4";
  $desc = $collectedClasses.Closure$4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$4.prototype = $desc;
  return [HtmlElement, AnchorElement, AnimationEvent, AreaElement, AudioElement, AutocompleteErrorEvent, BRElement, BaseElement, BeforeLoadEvent, BeforeUnloadEvent, Blob, BodyElement, ButtonElement, CDataSection, CanvasElement, CanvasGradient, CanvasPattern, CanvasRenderingContext, CanvasRenderingContext2D, CharacterData, CloseEvent, Comment, CompositionEvent, ContentElement, CssFontFaceLoadEvent, CssStyleDeclaration, CustomEvent, DListElement, DataListElement, DetailsElement, DeviceMotionEvent, DeviceOrientationEvent, DialogElement, DivElement, Document, DocumentFragment, DocumentType, DomError, DomException, DomImplementation, Element, EmbedElement, ErrorEvent, Event, EventTarget, FieldSetElement, File, FileError, FocusEvent, FormElement, HRElement, HashChangeEvent, HeadElement, HeadingElement, HtmlCollection, HtmlDocument, HtmlFormControlsCollection, HtmlHtmlElement, HtmlOptionsCollection, HttpRequest, HttpRequestEventTarget, IFrameElement, ImageElement, InputElement, KeyboardEvent, KeygenElement, LIElement, LabelElement, LegendElement, LinkElement, Location, MapElement, MediaElement, MediaError, MediaKeyError, MediaKeyEvent, MediaKeyMessageEvent, MediaKeyNeededEvent, MediaStream, MediaStreamEvent, MediaStreamTrackEvent, MenuElement, MessageEvent, MetaElement, MeterElement, MidiConnectionEvent, MidiInput, MidiMessageEvent, MidiOutput, MidiPort, ModElement, MouseEvent, Navigator, NavigatorUserMediaError, Node, BoundClosure$i0, NodeList, OListElement, ObjectElement, OptGroupElement, OptionElement, OutputElement, OverflowEvent, PageTransitionEvent, ParagraphElement, ParamElement, Performance, PopStateEvent, PositionError, PreElement, ProcessingInstruction, ProgressElement, ProgressEvent, QuoteElement, Range, ResourceProgressEvent, RtcDataChannelEvent, RtcDtmfToneChangeEvent, RtcIceCandidateEvent, ScriptElement0, SecurityPolicyViolationEvent, SelectElement, ShadowElement, ShadowRoot, SourceElement, SpanElement, SpeechInputEvent, SpeechRecognitionError, SpeechRecognitionEvent, SpeechSynthesisEvent, Storage, StorageEvent, StyleElement, TableCaptionElement, TableCellElement, TableColElement, TableElement, TableRowElement, TableSectionElement, TemplateElement, Text, TextAreaElement, TextEvent, TitleElement, Touch, TouchEvent, TouchList, TrackElement, TrackEvent, TransitionEvent, UIEvent, UListElement, UnknownElement, VideoElement, WebSocket, WheelEvent, Window, _Attr, _ClientRect, _Entity, _HTMLAppletElement, _HTMLBaseFontElement, _HTMLDirectoryElement, _HTMLFontElement, _HTMLFrameElement, _HTMLFrameSetElement, _HTMLMarqueeElement, _MutationEvent, _NamedNodeMap, _Notation, _XMLHttpRequestProgressEvent, VersionChangeEvent, AElement, AltGlyphElement, AnimateElement, AnimateMotionElement, AnimateTransformElement, AnimatedEnumeration, AnimatedLength, AnimatedLengthList, AnimatedNumber, AnimatedNumberList, AnimatedString, AnimationElement, CircleElement, ClipPathElement, DefsElement, DescElement, EllipseElement, FEBlendElement, FEColorMatrixElement, FEComponentTransferElement, FECompositeElement, FEConvolveMatrixElement, FEDiffuseLightingElement, FEDisplacementMapElement, FEDistantLightElement, FEFloodElement, FEFuncAElement, FEFuncBElement, FEFuncGElement, FEFuncRElement, FEGaussianBlurElement, FEImageElement, FEMergeElement, FEMergeNodeElement, FEMorphologyElement, FEOffsetElement, FEPointLightElement, FESpecularLightingElement, FESpotLightElement, FETileElement, FETurbulenceElement, FilterElement, ForeignObjectElement, GElement, GraphicsElement, ImageElement0, LineElement, LinearGradientElement, MarkerElement, MaskElement, MetadataElement, PathElement, PatternElement, PolygonElement, PolylineElement, RadialGradientElement, RectElement, ScriptElement, SetElement, StopElement, StyleElement0, SvgDocument, SvgElement, SvgSvgElement, SwitchElement, SymbolElement, TSpanElement, TextContentElement, TextElement, TextPathElement, TextPositioningElement, TitleElement0, UseElement, ViewElement, ZoomEvent, _GradientElement, _SVGAltGlyphDefElement, _SVGAltGlyphItemElement, _SVGAnimateColorElement, _SVGComponentTransferFunctionElement, _SVGCursorElement, _SVGFEDropShadowElement, _SVGFontElement, _SVGFontFaceElement, _SVGFontFaceFormatElement, _SVGFontFaceNameElement, _SVGFontFaceSrcElement, _SVGFontFaceUriElement, _SVGGlyphElement, _SVGGlyphRefElement, _SVGHKernElement, _SVGMPathElement, _SVGMissingGlyphElement, _SVGVKernElement, AudioProcessingEvent, OfflineAudioCompletionEvent, ContextEvent, SqlError, ByteBuffer, TypedData, ByteData, Float32List, Float64List, Int16List, Int32List, Int8List, Uint16List, Uint32List, Uint8ClampedList, Uint8List, JS_CONST, Interceptor, JSBool, JSNull, JavaScriptObject, PlainJavaScriptObject, UnknownJavaScriptObject, JSArray, JSMutableArray, JSFixedArray, JSExtendableArray, JSNumber, JSInt, JSDouble, JSString, _CodeUnits, startRootIsolate_closure, startRootIsolate_closure0, _Manager, _IsolateContext, _EventLoop, _EventLoop__runHelper_next, _IsolateEvent, _MainManagerStub, IsolateNatives__processWorkerMessage_closure, _BaseSendPort, _NativeJsSendPort, _NativeJsSendPort_send_closure, _NativeJsSendPort_send__closure, _WorkerSendPort, _WorkerSendPort_send_closure, ReceivePortImpl, _waitForPendingPorts_closure, _PendingSendPortFinder, _JsSerializer, _JsCopier, _JsDeserializer, _JsVisitedMap, _MessageTraverserVisitedMap, _MessageTraverser, BoundClosure$1, _Copier, _Copier_visitMap_closure, _Serializer, _Deserializer, TimerImpl, TimerImpl_internalCallback, TimerImpl_internalCallback0, ConstantMap, ConstantStringMap, ConstantStringMap_forEach_closure, ConstantStringMap_values_closure, _ConstantMapKeyIterable, TypeErrorDecoder, NullError, JsNoSuchMethodError, UnknownJsTypeError, unwrapException_saveStackTrace, _StackTrace, invokeClosure_closure, invokeClosure_closure0, invokeClosure_closure1, invokeClosure_closure2, invokeClosure_closure3, Closure, BoundClosure, CastErrorImplementation, TypeImpl, initHooks_closure, initHooks_closure0, initHooks_closure1, JSSyntaxRegExp, _MatchImplementation, _AllMatchesIterable, _AllMatchesIterator, StringMatch, Asset, AssetImporter, AssetLoader, AssetLoader_httpLoad_closure, AssetLoader_httpLoad_closure0, AssetManager, AssetManager__loadAndImport_closure, AssetPack, BoundClosure$i1, AssetPack_loadPack_closure, AssetPackTraceEvent, AssetPackTrace, NullAssetPackTrace, JsonImporter, NoopImporter, PackImporter, PackImporter_import_closure, PackImporter_import__closure, PackImporter_import_closure0, TextImporter, ImageLoader, ImageLoader_load_closure, ImageLoader_load_closure0, MapLoader, MapLoader_load_closure, MapLoader_load__closure, MapLoader_load___closure, MapLoader_load__closure0, TextLoader, TextLoader_load_closure, AssetPackFileAsset, AssetPackFile, AssetPackFile_toJson_closure, AssetPackFile$fromJson_closure, load_audio_closure, load_audio__closure, Chat, Chat_init_closure, Chat_init_closure0, TabContent, TabContent_processInput_closure, TabContent_processInput_closure0, TabContent_processInput_closure1, TabContent_setupWebSocket_closure, TabContent_setupWebSocket_closure0, TabContent_setupWebSocket_closure1, TabContent_setupWebSocket__closure, TabContent__addmessage_closure, TabContent__parseForUrls_closure, TabContent__parseForUrls_closure0, NullTreeSanitizer, showConsole_closure, main_closure, main_closure0, main__closure, Input, Input_init_closure, Input_init_closure0, Input_init_closure1, Input_init_closure2, Input_init_closure3, Input_init_closure4, Input_init_closure5, Input_init_closure6, Input_init_closure7, Input_init_closure8, Input_init_closure9, Input_init_closure10, Input_init_closure11, Input_init_closure12, Input_init_closure13, Input_init_closure14, Input_init_closure15, Input_init_closure16, Input_init_closure17, Input_init__closure, Input_init_closure18, Input_showClickMenu_closure, Input_showClickMenu_closure0, Joystick, Joystick_closure, Joystick_closure0, Joystick_closure1, JoystickEvent, Camera, UserInterface, UserInterface_init_closure, UserInterface_init_closure0, UserInterface__setEnergy_closure, UserInterface__setMood_closure, Player, Street, Street_load_closure, Street_load_closure0, Street_load_closure1, closure, closure0, ListIterable, ListIterator, MappedIterable, EfficientLengthMappedIterable, MappedIterator, MappedListIterable, WhereIterable, WhereIterator, ExpandIterable, ExpandIterator, EmptyIterator, FixedLengthListMixin, UnmodifiableListMixin, UnmodifiableListBase, _AsyncError, _BroadcastStream, _BroadcastSubscription, BoundClosure$0, _BroadcastStreamController, BoundClosure$2, _SyncBroadcastStreamController, _SyncBroadcastStreamController__sendData_closure, _SyncBroadcastStreamController__sendError_closure, _SyncBroadcastStreamController__sendDone_closure, _AsyncBroadcastStreamController, Future, Future_wait_handleError, Future_wait_closure, _Completer, _AsyncCompleter, _Future, _Future__addListener_closure, _Future__chainFutures_closure, _Future__chainFutures_closure0, _Future__asyncComplete_closure, _Future__asyncCompleteError_closure, _Future__propagateToListeners_closure, _Future__propagateToListeners_closure0, _Future__propagateToListeners__closure, _Future__propagateToListeners__closure0, Stream, Stream_contains_closure, Stream_contains__closure, Stream_contains__closure0, Stream_contains_closure0, Stream_forEach_closure, Stream_forEach__closure, Stream_forEach__closure0, Stream_forEach_closure0, Stream_length_closure, Stream_length_closure0, Stream_isEmpty_closure, Stream_isEmpty_closure0, Stream_toList_closure, Stream_toList_closure0, Stream_last_closure, Stream_last_closure0, Stream_elementAt_closure, Stream_elementAt_closure0, StreamSubscription, _StreamController, _StreamController__subscribe_closure, _StreamController__recordCancel_complete, _SyncStreamControllerDispatch, _AsyncStreamControllerDispatch, _AsyncStreamController, _StreamController__AsyncStreamControllerDispatch, _SyncStreamController, _StreamController__SyncStreamControllerDispatch, _NoCallbacks, _NoCallbackAsyncStreamController, _StreamController__AsyncStreamControllerDispatch0, _NoCallbackSyncStreamController, _StreamController__SyncStreamControllerDispatch0, _ControllerStream, _ControllerSubscription, _EventSink, _BufferingStreamSubscription, _BufferingStreamSubscription__sendError_sendError, _BufferingStreamSubscription__sendDone_sendDone, _StreamImpl, _DelayedEvent, _DelayedData, _DelayedError, _DelayedDone, _PendingEvents, _PendingEvents_schedule_closure, _StreamImplEvents, _cancelAndError_closure, _cancelAndErrorClosure_closure, _cancelAndValue_closure, _ForwardingStream, _ForwardingStreamSubscription, BoundClosure$20, _MapStream, _BaseZone, _BaseZone_bindCallback_closure, _BaseZone_bindCallback_closure0, _BaseZone_bindUnaryCallback_closure, _BaseZone_bindUnaryCallback_closure0, _rootHandleUncaughtError_closure, _rootHandleUncaughtError__closure, _RootZone, _HashMap, _HashMap_values_closure, HashMapKeyIterable, HashMapKeyIterator, _LinkedHashMap, _LinkedHashMap_values_closure, _LinkedIdentityHashMap, _LinkedCustomHashMap, _LinkedCustomHashMap_closure, LinkedHashMapCell, LinkedHashMapKeyIterable, LinkedHashMapKeyIterator, _HashSet, _IdentityHashSet, HashSetIterator, _LinkedHashSet, LinkedHashSetCell, LinkedHashSetIterator, _HashSetBase, IterableBase, ListBase, ListMixin, Maps_mapToString_closure, ListQueue, _ListQueueIterator, _convertJsonToDart_closure, _convertJsonToDart_walk, Codec, Converter, Encoding, JsonUnsupportedObjectError, JsonCyclicError, JsonCodec, JsonEncoder, JsonDecoder, _JsonStringifier, _JsonStringifier_stringifyJsonValue_closure, Utf8Codec, Utf8Encoder, _Utf8Encoder, NoSuchMethodError_toString_closure, Comparable, DateTime, DateTime_toString_fourDigits, DateTime_toString_threeDigits, DateTime_toString_twoDigits, Duration, Duration_toString_sixDigits, Duration_toString_twoDigits, Error, NullThrownError, ArgumentError, RangeError, UnsupportedError, UnimplementedError, StateError, ConcurrentModificationError, StackOverflowError, CyclicInitializationError, _ExceptionImplementation, FormatException, IntegerDivisionByZeroException, Expando, Function, Iterator, Map, Null, Object, Match, StackTrace, StringBuffer, Symbol, Uri, Uri__makeScheme_isSchemeLowerCharacter, Uri__makeScheme_isSchemeCharacter, Uri__makePath_closure, Uri__makeQuery_closure, Uri__normalize_isNormalizedHexDigit, Uri__normalize_isLowerCaseHexDigit, Uri__normalize_isUnreserved, Uri__normalize_normalizeHexDigit, Uri__normalize_decodeHexDigitPair, Uri__normalize_fillResult, Uri_hashCode_combine, Uri_parseIPv4Address_error, Uri_parseIPv4Address_closure, Uri_parseIPv6Address_error, Uri_parseIPv6Address_parseHex, Uri_parseIPv6Address_closure, Uri__uriEncode_byteToHex, Console, Interceptor_CssStyleDeclarationBase, _CssStyleDeclarationSet, Object_CssStyleDeclarationBase, _CssStyleDeclarationSet_closure, _CssStyleDeclarationSet_setProperty_closure, CssStyleDeclarationBase, _ChildrenElementList, _FrozenElementList, _FrozenElementList$_wrap_closure, Element_Element$html_closure, Interceptor_ListMixin, Interceptor_ListMixin_ImmutableListMixin, HttpRequest_getString_closure, HttpRequest_request_closure0, HttpRequest_request_closure, _ChildNodeListLazy, Interceptor_ListMixin0, Interceptor_ListMixin_ImmutableListMixin0, Storage_keys_closure, Storage_values_closure, Interceptor_ListMixin1, Interceptor_ListMixin_ImmutableListMixin1, _BeforeUnloadEvent, _BeforeUnloadEventStreamProvider, _BeforeUnloadEventStreamProvider_forTarget_closure, Interceptor_ListMixin2, Interceptor_ListMixin_ImmutableListMixin2, _AttributeMap, _ElementAttributeMap, _ElementCssClassSet, EventStreamProvider, _EventStream, _ElementEventStreamImpl, _ElementListEventStreamImpl, _EventStreamSubscription, _StreamPool, _StreamPool_add_closure, _CustomEventStreamProvider, _Html5NodeValidator, ImmutableListMixin, NodeValidatorBuilder, NodeValidatorBuilder_allowCustomElement_closure, NodeValidatorBuilder_allowCustomElement_closure0, NodeValidatorBuilder_allowsElement_closure, NodeValidatorBuilder_allowsAttribute_closure, _SimpleNodeValidator, _CustomElementNodeValidator, _TemplatingNodeValidator, _TemplatingNodeValidator_closure, _SvgNodeValidator, _WrappedEvent, FixedSizeListIterator, _DOMWindowCrossFrame, _LocationWrapper, NodeValidator, _SameOriginUriPolicy, _ValidatingTreeSanitizer, _ValidatingTreeSanitizer_sanitizeTree_walk, _AttributeClassSet, ReceivePort, _Random, Point, _RectangleBase, Rectangle, TypedData_ListMixin, TypedData_ListMixin_FixedLengthListMixin, TypedData_ListMixin0, TypedData_ListMixin_FixedLengthListMixin0, TypedData_ListMixin1, TypedData_ListMixin_FixedLengthListMixin1, TypedData_ListMixin2, TypedData_ListMixin_FixedLengthListMixin2, TypedData_ListMixin3, TypedData_ListMixin_FixedLengthListMixin3, TypedData_ListMixin4, TypedData_ListMixin_FixedLengthListMixin4, TypedData_ListMixin5, TypedData_ListMixin_FixedLengthListMixin5, TypedData_ListMixin6, TypedData_ListMixin_FixedLengthListMixin6, TypedData_ListMixin7, TypedData_ListMixin_FixedLengthListMixin7, Int64List, Uint64List, GameLoop, DigitalButton, DigitalButtonEvent, DigitalInput, GameLoopTimer, GameLoopGamepad, GameLoopHtml, Keyboard, GameLoopMouseEvent, Mouse, PointerLock, _GameLoopTouchEvent, GameLoopTouchPosition, GameLoopTouch, GameLoopTouchSet, GameLoopTouchSet__start_closure, GameLoopTouchSet__end_closure, GameLoopTouchSet__move_closure, GameLoopTouchSet__verifyTouchList_closure, convertNativeToDart_AcceptStructuredClone_findSlot, convertNativeToDart_AcceptStructuredClone_readSlot, convertNativeToDart_AcceptStructuredClone_writeSlot, convertNativeToDart_AcceptStructuredClone_walk, CssClassSetImpl, CssClassSetImpl_add_closure, FilteredElementList, FilteredElementList__filtered_closure, FilteredElementList_removeRange_closure, NumberFormat, NumberFormat_NumberFormat_closure, _NumberFormatParser, _StringIterable, _StringIterator, NumberSymbols, Scound, SC, SC_load_closure, Closure$2, Closure$1, Closure$0, Closure$7, Closure$21, Closure$4];
}
